[
		{"name":"src/org/hsqldb/util/DatabaseManager.java/L-1002","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-1825"],"snippet":"int    i = all.indexOf(';');\n            String sql;\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n            g[2] = sql;\n            long l = 0;\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-1825","size":1,"imports":["src/org/hsqldb/util/DatabaseManager.java/L-1002"],"snippet":"int    i = all.indexOf(';');\n            String sql;\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n            g[2] = sql;\n            long l = 0;\n"},
{"name":"src/org/hsqldb/persist/ScriptRunner.java/L-290","size":1,"imports":["src/org/hsqldb/persist/ScriptRunner.java/L-271"],"snippet":"{\n            String error = \"statement error processing log \" + databaseFile\n                           + \"line: \" + scr.getLineNumber();\n            database.logger.logSevereEvent(error, e);\n            if (fullReplay) {\n                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);\n"},
{"name":"src/org/hsqldb/persist/ScriptRunner.java/L-271","size":1,"imports":["src/org/hsqldb/persist/ScriptRunner.java/L-290"],"snippet":"{\n            String error = \"statement error processing log \" + databaseFile\n                           + \"line: \" + scr.getLineNumber();\n            database.logger.logSevereEvent(error, e);\n            if (fullReplay) {\n                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-974","size":1,"imports":["src/org/hsqldb/Expression.java/L-932"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(rangeVariables, set);\n"},
{"name":"src/org/hsqldb/Expression.java/L-932","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-974"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(rangeVariables, set);\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVL.java/L-312","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLDisk.java/L-354","src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-221","src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-356"],"snippet":"if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLDisk.java/L-354","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVL.java/L-312","src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-221","src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-356"],"snippet":"if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-221","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVL.java/L-312","src/org/hsqldb/persist/RowStoreAVLDisk.java/L-354","src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-356"],"snippet":"if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-356","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVL.java/L-312","src/org/hsqldb/persist/RowStoreAVLDisk.java/L-354","src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-221"],"snippet":"if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"},
{"name":"src/org/hsqldb/Expression.java/L-418","size":1,"imports":["src/org/hsqldb/ExpressionOp.java/L-306","src/org/hsqldb/Expression.java/L-427"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    sb.append(nodes[i].describe(session, blanks + 1));\n                    sb.append(' ');\n"},
{"name":"src/org/hsqldb/ExpressionOp.java/L-306","size":1,"imports":["src/org/hsqldb/Expression.java/L-418","src/org/hsqldb/Expression.java/L-427"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    sb.append(nodes[i].describe(session, blanks + 1));\n                    sb.append(' ');\n"},
{"name":"src/org/hsqldb/Expression.java/L-427","size":1,"imports":["src/org/hsqldb/Expression.java/L-418","src/org/hsqldb/ExpressionOp.java/L-306"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    sb.append(nodes[i].describe(session, blanks + 1));\n                    sb.append(' ');\n"},
{"name":"src/org/hsqldb/test/TestPreparedSubQueries.java/L-145","size":1,"imports":["src/org/hsqldb/test/TestPreparedStatements.java/L-203"],"snippet":"                    }\n                } else {\n                    System.out.println(\" -- executing directly\\n<<<\\n\"\n                                       + stmtArray[i].command + \"\\n>>>\\n\");\n                    Statement s = con.createStatement();\n                    boolean   b = s.execute(stmtArray[i].command);\n"},
{"name":"src/org/hsqldb/test/TestPreparedStatements.java/L-203","size":1,"imports":["src/org/hsqldb/test/TestPreparedSubQueries.java/L-145"],"snippet":"                        }\n                    }\n                } else {\n                    System.out.println(\" -- executing directly\\n<<<\\n\"\n                                       + stmtArray[i].command + \"\\n>>>\\n\");\n                    Statement s = con.createStatement();\n                    boolean   b = s.execute(stmtArray[i].command);\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-1342","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-1335"],"snippet":"{\n        for (int i = 0; i < columnMap.length; i++) {\n            newRow[i] = row[columnMap[i]];\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-1335","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-1342"],"snippet":"{\n        for (int i = 0; i < columnMap.length; i++) {\n            newRow[i] = row[columnMap[i]];\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1336","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1323"],"snippet":"{\n                if (nodes[0].dataType == null) {\n                    throw Error.error(ErrorCode.X_42567);\n                }\n                if (!nodes[0].dataType.isArrayType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n                dataType = Type.SQL_INTEGER;\n                break;\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1323","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1336"],"snippet":"{\n                if (nodes[0].dataType == null) {\n                    throw Error.error(ErrorCode.X_42567);\n                }\n                if (!nodes[0].dataType.isArrayType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n                dataType = Type.SQL_INTEGER;\n                break;\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-1082","size":1,"imports":["src/org/hsqldb/Expression.java/L-725"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceColumnReferences(range, list);\n"},
{"name":"src/org/hsqldb/Expression.java/L-725","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-1082"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceColumnReferences(range, list);\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-2383","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-2361"],"snippet":"if (nodes[2].dataType.typeCode == Types.SQL_TIME\n                                || nodes[2].dataType.typeCode\n                                   == Types.SQL_TIME_WITH_TIME_ZONE) {\n                            throw Error.error(ErrorCode.X_42563);\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-2361","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-2383"],"snippet":"if (nodes[2].dataType.typeCode == Types.SQL_TIME\n                                || nodes[2].dataType.typeCode\n                                   == Types.SQL_TIME_WITH_TIME_ZONE) {\n                            throw Error.error(ErrorCode.X_42563);\n"},
{"name":"src/org/hsqldb/persist/LobManager.java/L-1633","size":1,"imports":["src/org/hsqldb/persist/LobManager.java/L-1563"],"snippet":"if (result.isError()) {\n                return result;\n            }\n            if (offset + dataLength > length) {\n                length = offset + dataLength;\n                result = setLength(lobID, length);\n                if (result.isError()) {\n                    return result;\n                }\n            }\n            return ResultLob.newLobSetResponse(lobID, length);\n        } finally {\n            writeLock.unlock();\n"},
{"name":"src/org/hsqldb/persist/LobManager.java/L-1563","size":1,"imports":["src/org/hsqldb/persist/LobManager.java/L-1633"],"snippet":"if (result.isError()) {\n                return result;\n            }\n            if (offset + dataLength > length) {\n                length = offset + dataLength;\n                result = setLength(lobID, length);\n                if (result.isError()) {\n                    return result;\n                }\n            }\n            return ResultLob.newLobSetResponse(lobID, length);\n        } finally {\n            writeLock.unlock();\n"},
{"name":"src/org/hsqldb/types/DateTimeType.java/L-335","size":1,"imports":["src/org/hsqldb/types/DateTimeType.java/L-286"],"snippet":"if (!other.isDateTimeType()) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n                DateTimeType otherType = (DateTimeType) other;\n                if (otherType.startIntervalType > endIntervalType\n                        || startIntervalType > otherType.endIntervalType) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n                int     newType = typeCode;\n                int     scale   = this.scale > otherType.scale ? this.scale\n                                                               : otherType\n                                                                   .scale;\n                boolean zone    = withTimeZone || otherType.withTimeZone;\n                int startType = otherType.startIntervalType\n                                > startIntervalType ? startIntervalType\n                                                    : otherType\n                                                        .startIntervalType;\n                if (startType == Types.SQL_INTERVAL_HOUR) {\n                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                                   : Types.SQL_TIME;\n                } else {\n                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                                   : Types.SQL_TIMESTAMP;\n                }\n                return getDateTimeType(newType, scale);\n"},
{"name":"src/org/hsqldb/types/DateTimeType.java/L-286","size":1,"imports":["src/org/hsqldb/types/DateTimeType.java/L-335"],"snippet":"if (!other.isDateTimeType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n        DateTimeType otherType = (DateTimeType) other;\n        if (otherType.startIntervalType > endIntervalType\n                || startIntervalType > otherType.endIntervalType) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n        int     newType = typeCode;\n        int     scale   = this.scale > otherType.scale ? this.scale\n                                                       : otherType.scale;\n        boolean zone    = withTimeZone || otherType.withTimeZone;\n        int startType = otherType.startIntervalType > startIntervalType\n                        ? startIntervalType\n                        : otherType.startIntervalType;\n        if (startType == Types.SQL_INTERVAL_HOUR) {\n            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                           : Types.SQL_TIME;\n        } else {\n            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                           : Types.SQL_TIMESTAMP;\n        }\n        return getDateTimeType(newType, scale);\n"},
{"name":"src/org/hsqldb/server/ServerConnection.java/L-1135","size":1,"imports":["src/org/hsqldb/server/ServerConnection.java/L-767"],"snippet":"for (int i = 0; i < pgTypes.length; i++) {\n                        pgTypes[i] = PgType.getPgType(colTypes[i],\n                                                      md.isTableColumn(i));\n"},
{"name":"src/org/hsqldb/server/ServerConnection.java/L-767","size":1,"imports":["src/org/hsqldb/server/ServerConnection.java/L-1135"],"snippet":"for (int i = 0; i < pgTypes.length; i++) {\n                            pgTypes[i] = PgType.getPgType(colTypes[i],\n                                                          md.isTableColumn(i));\n"},
{"name":"src/org/hsqldb/StatementDMQL.java/L-640","size":1,"imports":["src/org/hsqldb/StatementDMQL.java/L-680","src/org/hsqldb/StatementDMQL.java/L-656"],"snippet":"appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n                return sb.toString();\n"},
{"name":"src/org/hsqldb/StatementDMQL.java/L-680","size":1,"imports":["src/org/hsqldb/StatementDMQL.java/L-640","src/org/hsqldb/StatementDMQL.java/L-656"],"snippet":"appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n                return sb.toString();\n"},
{"name":"src/org/hsqldb/StatementDMQL.java/L-656","size":1,"imports":["src/org/hsqldb/StatementDMQL.java/L-640","src/org/hsqldb/StatementDMQL.java/L-680"],"snippet":"appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n                return sb.toString();\n"},
{"name":"src/org/hsqldb/lib/OrderedIntHashSet.java/L-97","size":1,"imports":["src/org/hsqldb/lib/OrderedLongHashSet.java/L-97"],"snippet":"{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"},
{"name":"src/org/hsqldb/lib/OrderedLongHashSet.java/L-97","size":1,"imports":["src/org/hsqldb/lib/OrderedIntHashSet.java/L-97"],"snippet":"{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(long[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(long[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"},
{"name":"src/org/hsqldb/map/BitMap.java/L-137","size":1,"imports":["src/org/hsqldb/map/BitMap.java/L-124"],"snippet":"int word = map[windex];\n        if (set) {\n            map[windex] = (word | mask);\n        } else {\n            mask        = ~mask;\n            map[windex] = (word & mask);\n"},
{"name":"src/org/hsqldb/map/BitMap.java/L-124","size":1,"imports":["src/org/hsqldb/map/BitMap.java/L-137"],"snippet":"int word = map[windex];\n            if (set) {\n                map[windex] = (word | mask);\n            } else {\n                mask        = ~mask;\n                map[windex] = (word & mask);\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-463","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-383"],"snippet":"if (reportProgress && (i + 1) % 10000 == 0) {\n                System.out.println(\"insert \" + (i + 1) + \" : \"\n                                   + sw.elapsedTime());\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-383","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-463"],"snippet":"if (reportProgress && (i + 1) % 10000 == 0) {\n                System.out.println(\"insert \" + (i + 1) + \" : \"\n                                   + sw.elapsedTime());\n"},
{"name":"src/org/hsqldb/StatementResultUpdate.java/L-209","size":1,"imports":["src/org/hsqldb/StatementDMQL.java/L-437"],"snippet":"switch (type) {\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n"},
{"name":"src/org/hsqldb/StatementDMQL.java/L-437","size":1,"imports":["src/org/hsqldb/StatementResultUpdate.java/L-209"],"snippet":"switch (type) {\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-1146","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-1129"],"snippet":"for (int j = 0; j < array.length; j++) {\n                    if (j > 0) {\n                        sb.append(',');\n                    }\n                    sb.append(array[j].getId());\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-1129","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-1146"],"snippet":"for (int j = 0; j < array.length; j++) {\n                    if (j > 0) {\n                        sb.append(',');\n                    }\n                    sb.append(array[j].getId());\n"},
{"name":"src/org/hsqldb/util/CodeSwitcher.java/L-439","size":1,"imports":["src/org/hsqldb/util/CodeSwitcher.java/L-415"],"snippet":"if (v.elementAt(i - 1).equals(\"\")) {\n                                i++;\n                            } else {\n"},
{"name":"src/org/hsqldb/util/CodeSwitcher.java/L-415","size":1,"imports":["src/org/hsqldb/util/CodeSwitcher.java/L-439"],"snippet":"if (v.elementAt(i - 1).equals(\"\")) {\n                                i++;\n                            } else {\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-171","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-193","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-215","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-236","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-262","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-249"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-193","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-171","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-215","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-236","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-262","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-249"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-215","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-171","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-193","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-236","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-262","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-249"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-236","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-171","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-193","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-215","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-262","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-249"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-262","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-171","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-193","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-215","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-236","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-249"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-249","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-171","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-193","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-215","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-236","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-262"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/test/TestUtil.java/L-1107","size":1,"imports":["src/org/hsqldb/test/TestUtil.java/L-1020"],"snippet":"{\n            int index = trimmed.indexOf(' ');\n            if (index < 0) {\n                throw new IllegalArgumentException();\n            }\n            enforceSequence = Boolean.valueOf(trimmed.substring(0,\n                    index)).booleanValue();\n            waiter = Waiter.getWaiter(trimmed.substring(index).trim());\n"},
{"name":"src/org/hsqldb/test/TestUtil.java/L-1020","size":1,"imports":["src/org/hsqldb/test/TestUtil.java/L-1107"],"snippet":"{\n                int index = trimmed.indexOf(' ');\n                if (index < 0) {\n                    throw new IllegalArgumentException();\n                }\n                enforceSequence = Boolean.valueOf(trimmed.substring(0,\n                        index)).booleanValue();\n                waiter = Waiter.getWaiter(trimmed.substring(index).trim());\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-944","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-773"],"snippet":"{\n            System.out.println(number_of_txns);\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n            if (Conn == null) {\n                return;\n            }\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-773","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-944"],"snippet":"{\n            System.out.println(number_of_txns);\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n            if (Conn == null) {\n                return;\n            }\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n"},
{"name":"src/org/hsqldb/util/TransferSQLText.java/L-376","size":1,"imports":["src/org/hsqldb/util/TransferSQLText.java/L-704","src/org/hsqldb/util/TransferSQLText.java/L-443"],"snippet":"if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n        String        currentLine  = \"\";\n"},
{"name":"src/org/hsqldb/util/TransferSQLText.java/L-704","size":1,"imports":["src/org/hsqldb/util/TransferSQLText.java/L-376","src/org/hsqldb/util/TransferSQLText.java/L-443"],"snippet":"if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n        String currentLine = \"\";\n"},
{"name":"src/org/hsqldb/util/TransferSQLText.java/L-443","size":1,"imports":["src/org/hsqldb/util/TransferSQLText.java/L-376","src/org/hsqldb/util/TransferSQLText.java/L-704"],"snippet":"if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n        String        currentLine  = \"\";\n"},
{"name":"src/org/hsqldb/persist/DataFileCache.java/L-1018","size":1,"imports":["src/org/hsqldb/persist/DataFileCache.java/L-991"],"snippet":"CachedObject object;\n        if (pos < 0) {\n            return null;\n        }\n        readLock.lock();\n        try {\n            object = cache.get(pos);\n            if (object != null) {\n                if (keep) {\n                    object.keepInMemory(true);\n                }\n                return object;\n            }\n        } finally {\n            readLock.unlock();\n"},
{"name":"src/org/hsqldb/persist/DataFileCache.java/L-991","size":1,"imports":["src/org/hsqldb/persist/DataFileCache.java/L-1018"],"snippet":"CachedObject object;\n        if (pos < 0) {\n            return null;\n        }\n        readLock.lock();\n        try {\n            object = cache.get(pos);\n            if (object != null) {\n                if (keep) {\n                    object.keepInMemory(true);\n                }\n                return object;\n            }\n        } finally {\n            readLock.unlock();\n"},
{"name":"src/org/hsqldb/result/Result.java/L-386","size":1,"imports":["src/org/hsqldb/result/Result.java/L-361"],"snippet":"result.generateKeys        = in.readByte();\n                if (result.generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_NAMES || result\n                        .generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_INDEXES) {\n                    result.generatedMetaData = new ResultMetaData(in);\n                }\n                break;\n"},
{"name":"src/org/hsqldb/result/Result.java/L-361","size":1,"imports":["src/org/hsqldb/result/Result.java/L-386"],"snippet":"result.generateKeys = in.readByte();\n                if (result.generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_NAMES || result\n                        .generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_INDEXES) {\n                    result.generatedMetaData = new ResultMetaData(in);\n                }\n                break;\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-1000","size":1,"imports":["src/org/hsqldb/Expression.java/L-899"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,\n                    length);\n"},
{"name":"src/org/hsqldb/Expression.java/L-899","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-1000"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,\n                    length);\n"},
{"name":"integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-73","size":1,"imports":["integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-73"],"snippet":"super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n\t\tregisterColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n\t\tregisterColumnType( Types.BIT, \"bit\" );\n        registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n\t\tregisterColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n\t\tregisterColumnType( Types.DOUBLE, \"double\" );\n\t\tregisterColumnType( Types.FLOAT, \"float\" );\n\t\tregisterColumnType( Types.INTEGER, \"integer\" );\n\t\tregisterColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n\t\tregisterColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n\t\tregisterColumnType( Types.SMALLINT, \"smallint\" );\n\t\tregisterColumnType( Types.TINYINT, \"tinyint\" );\n\t\tregisterColumnType( Types.TIME, \"time\" );\n\t\tregisterColumnType( Types.TIMESTAMP, \"timestamp\" );\n\t\tregisterColumnType( Types.VARCHAR, \"varchar($l)\" );\n\t\tregisterColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.BLOB, \"longvarbinary\" );\n\t\tregisterColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"},
{"name":"integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-73","size":1,"imports":["integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-73"],"snippet":"super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n                registerColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n                registerColumnType( Types.BIT, \"bit\" );\n                registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n                registerColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n                registerColumnType( Types.DOUBLE, \"double\" );\n                registerColumnType( Types.FLOAT, \"float\" );\n                registerColumnType( Types.INTEGER, \"integer\" );\n                registerColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n                registerColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n                registerColumnType( Types.SMALLINT, \"smallint\" );\n                registerColumnType( Types.TINYINT, \"tinyint\" );\n                registerColumnType( Types.TIME, \"time\" );\n                registerColumnType( Types.TIMESTAMP, \"timestamp\" );\n                registerColumnType( Types.VARCHAR, \"varchar($l)\" );\n                registerColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n                        registerColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n                        registerColumnType( Types.BLOB, \"longvarbinary\" );\n                        registerColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"},
{"name":"src/org/hsqldb/test/TestSqlPersistent.java/L-305","size":1,"imports":["src/org/hsqldb/test/TestSqlPersistent.java/L-128"],"snippet":"integerValue = new Integer(1000);\n            arrayValue   = new Double[] {\n                new Double(1), new Double(Double.NaN),\n                new Double(Double.NEGATIVE_INFINITY),\n                new Double(Double.POSITIVE_INFINITY)\n            };\n"},
{"name":"src/org/hsqldb/test/TestSqlPersistent.java/L-128","size":1,"imports":["src/org/hsqldb/test/TestSqlPersistent.java/L-305"],"snippet":"integerValue = new Integer(1000);\n            arrayValue   = new Double[] {\n                new Double(1), new Double(Double.NaN),\n                new Double(Double.NEGATIVE_INFINITY),\n                new Double(Double.POSITIVE_INFINITY)\n            };\n"},
{"name":"src/org/hsqldb/NumberSequence.java/L-236","size":1,"imports":["src/org/hsqldb/NumberSequence.java/L-191"],"snippet":"            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n"},
{"name":"src/org/hsqldb/NumberSequence.java/L-191","size":1,"imports":["src/org/hsqldb/NumberSequence.java/L-236"],"snippet":"        sb.append(Tokens.T_START).append(' ');\n        sb.append(Tokens.T_WITH).append(' ');\n        sb.append(startValue);\n        if (getIncrement() != 1) {\n            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n            sb.append(Tokens.T_BY).append(' ');\n            sb.append(getIncrement());\n        }\n        if (!hasDefaultMinMax()) {\n            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n            sb.append(getMinValue());\n            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n            sb.append(getMaxValue());\n        }\n        if (isCycle()) {\n            sb.append(' ').append(Tokens.T_CYCLE);\n        }\n        if (name == null) {\n            sb.append(Tokens.T_CLOSEBRACKET);\n"},
{"name":"src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-419","size":1,"imports":["src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-355"],"snippet":"{\n                patternIndex++;\n            } else {\n                final int tableValue = table[patternIndex];\n                matchStart += (patternIndex - tableValue);\n                if (patternIndex > 0) {\n                    patternIndex = tableValue;\n                }\n                patternIndex++;\n"},
{"name":"src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-355","size":1,"imports":["src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-419"],"snippet":"{\n                patternIndex++;\n            } else {\n                final int tableValue = table[patternIndex];\n                matchStart += (patternIndex - tableValue);\n                if (patternIndex > 0) {\n                    patternIndex = tableValue;\n                }\n                patternIndex++;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCClobFile.java/L-963","size":1,"imports":["src/org/hsqldb/jdbc/JDBCBlobFile.java/L-770"],"snippet":"{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    protected void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    protected void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"},
{"name":"src/org/hsqldb/jdbc/JDBCBlobFile.java/L-770","size":1,"imports":["src/org/hsqldb/jdbc/JDBCClobFile.java/L-963"],"snippet":"{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    private void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    private void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"},
{"name":"src/org/hsqldb/test/TestSql.java/L-370","size":1,"imports":["src/org/hsqldb/test/TestSqlPersistent.java/L-445"],"snippet":"stmnt.execute(ddl1);\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n            ResultSet rs =\n            boolean result = rs.next();\n            value = rs.getDouble(2);\n            int integerValue = rs.getInt(4);\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n                integerValue = rs.getInt(1);\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n            if (rs.next()) {\n                int max = rs.getInt(1);\n                System.out.println(\"Max value for i: \" + max);\n            }\n            try {\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}\n"},
{"name":"src/org/hsqldb/test/TestSqlPersistent.java/L-445","size":1,"imports":["src/org/hsqldb/test/TestSql.java/L-370"],"snippet":"stmnt.execute(ddl1);\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n            ResultSet rs =\n            boolean result = rs.next();\n            value = rs.getDouble(2);\n            int integerValue = rs.getInt(4);\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n                integerValue = rs.getInt(1);\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n            if (rs.next()) {\n                int max = rs.getInt(1);\n                System.out.println(\"Max value for i: \" + max);\n            }\n            try {\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}\n"},
{"name":"src/org/hsqldb/server/ServerConfiguration.java/L-148","size":1,"imports":["src/org/hsqldb/server/ServerConfiguration.java/L-155","src/org/hsqldb/server/ServerConfiguration.java/L-172","src/org/hsqldb/server/ServerConfiguration.java/L-165"],"snippet":"for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"},
{"name":"src/org/hsqldb/server/ServerConfiguration.java/L-155","size":1,"imports":["src/org/hsqldb/server/ServerConfiguration.java/L-148","src/org/hsqldb/server/ServerConfiguration.java/L-172","src/org/hsqldb/server/ServerConfiguration.java/L-165"],"snippet":"for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"},
{"name":"src/org/hsqldb/server/ServerConfiguration.java/L-172","size":1,"imports":["src/org/hsqldb/server/ServerConfiguration.java/L-148","src/org/hsqldb/server/ServerConfiguration.java/L-155","src/org/hsqldb/server/ServerConfiguration.java/L-165"],"snippet":"for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"},
{"name":"src/org/hsqldb/server/ServerConfiguration.java/L-165","size":1,"imports":["src/org/hsqldb/server/ServerConfiguration.java/L-148","src/org/hsqldb/server/ServerConfiguration.java/L-155","src/org/hsqldb/server/ServerConfiguration.java/L-172"],"snippet":"for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-1886","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-1023"],"snippet":"if (readIfThis(Tokens.NO)) {\n            readThis(Tokens.PAD);\n            padSpace = Boolean.FALSE;\n        } else if (readIfThis(Tokens.PAD)) {\n            readThis(Tokens.SPACE);\n            padSpace = Boolean.TRUE;\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-1023","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-1886"],"snippet":"if (readIfThis(Tokens.NO)) {\n                    readThis(Tokens.PAD);\n                    padSpace = Boolean.FALSE;\n                } else if (readIfThis(Tokens.PAD)) {\n                    readThis(Tokens.SPACE);\n                    padSpace = Boolean.TRUE;\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-954","size":1,"imports":["src/org/hsqldb/Expression.java/L-916"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(set);\n"},
{"name":"src/org/hsqldb/Expression.java/L-916","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-954"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(set);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-215","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-237","src/org/hsqldb/index/NodeAVLDisk.java/L-259","src/org/hsqldb/index/NodeAVLDisk.java/L-280","src/org/hsqldb/index/NodeAVLDisk.java/L-306","src/org/hsqldb/index/NodeAVLDisk.java/L-293"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-237","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-215","src/org/hsqldb/index/NodeAVLDisk.java/L-259","src/org/hsqldb/index/NodeAVLDisk.java/L-280","src/org/hsqldb/index/NodeAVLDisk.java/L-306","src/org/hsqldb/index/NodeAVLDisk.java/L-293"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-259","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-215","src/org/hsqldb/index/NodeAVLDisk.java/L-237","src/org/hsqldb/index/NodeAVLDisk.java/L-280","src/org/hsqldb/index/NodeAVLDisk.java/L-306","src/org/hsqldb/index/NodeAVLDisk.java/L-293"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-280","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-215","src/org/hsqldb/index/NodeAVLDisk.java/L-237","src/org/hsqldb/index/NodeAVLDisk.java/L-259","src/org/hsqldb/index/NodeAVLDisk.java/L-306","src/org/hsqldb/index/NodeAVLDisk.java/L-293"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-306","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-215","src/org/hsqldb/index/NodeAVLDisk.java/L-237","src/org/hsqldb/index/NodeAVLDisk.java/L-259","src/org/hsqldb/index/NodeAVLDisk.java/L-280","src/org/hsqldb/index/NodeAVLDisk.java/L-293"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-293","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-215","src/org/hsqldb/index/NodeAVLDisk.java/L-237","src/org/hsqldb/index/NodeAVLDisk.java/L-259","src/org/hsqldb/index/NodeAVLDisk.java/L-280","src/org/hsqldb/index/NodeAVLDisk.java/L-306"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/util/TransferSQLText.java/L-74","size":1,"imports":["src/org/hsqldb/util/TransferSQLText.java/L-167","src/org/hsqldb/util/TransferSQLText.java/L-101"],"snippet":"if (WTextWrite == null) {\n            try {\n                WTextWrite = new BufferedWriter(new FileWriter(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n"},
{"name":"src/org/hsqldb/util/TransferSQLText.java/L-167","size":1,"imports":["src/org/hsqldb/util/TransferSQLText.java/L-74","src/org/hsqldb/util/TransferSQLText.java/L-101"],"snippet":"if (WTextWrite == null) {\n            try {\n                WTextWrite = new BufferedWriter(new FileWriter(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n"},
{"name":"src/org/hsqldb/util/TransferSQLText.java/L-101","size":1,"imports":["src/org/hsqldb/util/TransferSQLText.java/L-74","src/org/hsqldb/util/TransferSQLText.java/L-167"],"snippet":"if (WTextWrite == null) {\n            try {\n                WTextWrite = new BufferedWriter(new FileWriter(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-104","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-172"],"snippet":"Object[] data = ((Row) object).getData();\n        for (int i = 0; i < nullsList.length; i++) {\n            if (data[i] == null) {\n                nullsList[i] = true;\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-172","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-104"],"snippet":"Object[] data = ((Row) object).getData();\n        for (int i = 0; i < nullsList.length; i++) {\n            if (data[i] == null) {\n                nullsList[i] = true;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-155","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-112"],"snippet":"int limit = session.rowActionList.size();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                if (!action.canCommit(session, session.tempSet)) {\n                    return false;\n                }\n            }\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-112","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-155"],"snippet":"int limit = session.rowActionList.size();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                if (!action.canCommit(session, session.tempSet)) {\n                    return false;\n                }\n            }\n            session.actionTimestamp = getNextGlobalChangeTimestamp();\n"},
{"name":"src/org/hsqldb/types/DateTimeType.java/L-692","size":1,"imports":["src/org/hsqldb/types/DateTimeType.java/L-658"],"snippet":"{\n                        TimeData ti = (TimeData) a;\n                        long seconds = session.getCurrentDate().getSeconds()\n                                       + ti.getSeconds()\n                                       - session.getZoneSeconds();\n                        return new TimestampData(seconds,\n                                                 scaleNanos(ti.getNanos()),\n                                                 session.getZoneSeconds());\n"},
{"name":"src/org/hsqldb/types/DateTimeType.java/L-658","size":1,"imports":["src/org/hsqldb/types/DateTimeType.java/L-692"],"snippet":"{\n                        TimeData ti = (TimeData) a;\n                        long seconds = session.getCurrentDate().getSeconds()\n                                       + ti.getSeconds()\n                                       - session.getZoneSeconds();\n                        return new TimestampData(seconds,\n                                                 scaleNanos(ti.getNanos()),\n                                                 session.getZoneSeconds());\n"},
{"name":"src/org/hsqldb/StatementSet.java/L-344","size":1,"imports":["src/org/hsqldb/StatementExpression.java/L-185","src/org/hsqldb/StatementQuery.java/L-94","src/org/hsqldb/StatementDML.java/L-294","src/org/hsqldb/StatementProcedure.java/L-378"],"snippet":"for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"},
{"name":"src/org/hsqldb/StatementExpression.java/L-185","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-344","src/org/hsqldb/StatementQuery.java/L-94","src/org/hsqldb/StatementDML.java/L-294","src/org/hsqldb/StatementProcedure.java/L-378"],"snippet":"for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"},
{"name":"src/org/hsqldb/StatementQuery.java/L-94","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-344","src/org/hsqldb/StatementExpression.java/L-185","src/org/hsqldb/StatementDML.java/L-294","src/org/hsqldb/StatementProcedure.java/L-378"],"snippet":"for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"},
{"name":"src/org/hsqldb/StatementDML.java/L-294","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-344","src/org/hsqldb/StatementExpression.java/L-185","src/org/hsqldb/StatementQuery.java/L-94","src/org/hsqldb/StatementProcedure.java/L-378"],"snippet":"for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"},
{"name":"src/org/hsqldb/StatementProcedure.java/L-378","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-344","src/org/hsqldb/StatementExpression.java/L-185","src/org/hsqldb/StatementQuery.java/L-94","src/org/hsqldb/StatementDML.java/L-294"],"snippet":"for (int i = 0; i < subqueries.length; i++) {\n                if (subqueries[i].queryExpression != null) {\n                    subqueries[i].queryExpression.getBaseTableNames(set);\n                }\n            }\n            for (int i = 0; i < routines.length; i++) {\n                set.addAll(routines[i].getTableNamesForRead());\n"},
{"name":"src/org/hsqldb/NumberSequence.java/L-335","size":1,"imports":["src/org/hsqldb/NumberSequence.java/L-506","src/org/hsqldb/NumberSequence.java/L-465"],"snippet":"long min;\n        long max;\n        switch (dataType.typeCode) {\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n"},
{"name":"src/org/hsqldb/NumberSequence.java/L-506","size":1,"imports":["src/org/hsqldb/NumberSequence.java/L-335","src/org/hsqldb/NumberSequence.java/L-465"],"snippet":"long min;\n        long max;\n        switch (dataType.typeCode) {\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n"},
{"name":"src/org/hsqldb/NumberSequence.java/L-465","size":1,"imports":["src/org/hsqldb/NumberSequence.java/L-335","src/org/hsqldb/NumberSequence.java/L-506"],"snippet":"long min;\n        long max;\n        switch (dataType.typeCode) {\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n"},
{"name":"src/org/hsqldb/rowio/RowInputText.java/L-291","size":1,"imports":["src/org/hsqldb/rowio/RowInputText.java/L-274"],"snippet":"{\n        String s = readString();\n        if (s == null) {\n            return null;\n        }\n        s = s.trim();\n        if (s.length() == 0) {\n            return null;\n        }\n        return ValuePool.getInt(Integer.parseInt(s));\n"},
{"name":"src/org/hsqldb/rowio/RowInputText.java/L-274","size":1,"imports":["src/org/hsqldb/rowio/RowInputText.java/L-291"],"snippet":"{\n        String s = readString();\n        if (s == null) {\n            return null;\n        }\n        s = s.trim();\n        if (s.length() == 0) {\n            return null;\n        }\n        return ValuePool.getInt(Integer.parseInt(s));\n"},
{"name":"src/org/hsqldb/server/OdbcUtil.java/L-269","size":1,"imports":["src/org/hsqldb/server/OdbcUtil.java/L-257"],"snippet":"if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new IllegalArgumentException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"},
{"name":"src/org/hsqldb/server/OdbcUtil.java/L-257","size":1,"imports":["src/org/hsqldb/server/OdbcUtil.java/L-269"],"snippet":"if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new IllegalArgumentException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"},
{"name":"src/org/hsqldb/lib/OrderedIntHashSet.java/L-97","size":1,"imports":["src/org/hsqldb/lib/OrderedLongHashSet.java/L-97"],"snippet":"{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"},
{"name":"src/org/hsqldb/lib/OrderedLongHashSet.java/L-97","size":1,"imports":["src/org/hsqldb/lib/OrderedIntHashSet.java/L-97"],"snippet":"{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(long[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(long[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"},
{"name":"integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-73","size":1,"imports":["integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-73"],"snippet":"super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n\t\tregisterColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n\t\tregisterColumnType( Types.BIT, \"bit\" );\n        registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n\t\tregisterColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n\t\tregisterColumnType( Types.DOUBLE, \"double\" );\n\t\tregisterColumnType( Types.FLOAT, \"float\" );\n\t\tregisterColumnType( Types.INTEGER, \"integer\" );\n\t\tregisterColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n\t\tregisterColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n\t\tregisterColumnType( Types.SMALLINT, \"smallint\" );\n\t\tregisterColumnType( Types.TINYINT, \"tinyint\" );\n\t\tregisterColumnType( Types.TIME, \"time\" );\n\t\tregisterColumnType( Types.TIMESTAMP, \"timestamp\" );\n\t\tregisterColumnType( Types.VARCHAR, \"varchar($l)\" );\n\t\tregisterColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.BLOB, \"longvarbinary\" );\n\t\tregisterColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"},
{"name":"integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-73","size":1,"imports":["integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-73"],"snippet":"super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n                registerColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n                registerColumnType( Types.BIT, \"bit\" );\n                registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n                registerColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n                registerColumnType( Types.DOUBLE, \"double\" );\n                registerColumnType( Types.FLOAT, \"float\" );\n                registerColumnType( Types.INTEGER, \"integer\" );\n                registerColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n                registerColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n                registerColumnType( Types.SMALLINT, \"smallint\" );\n                registerColumnType( Types.TINYINT, \"tinyint\" );\n                registerColumnType( Types.TIME, \"time\" );\n                registerColumnType( Types.TIMESTAMP, \"timestamp\" );\n                registerColumnType( Types.VARCHAR, \"varchar($l)\" );\n                registerColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n                        registerColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n                        registerColumnType( Types.BLOB, \"longvarbinary\" );\n                        registerColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"},
{"name":"src/org/hsqldb/util/OracleTransferHelper.java/L-98","size":1,"imports":["src/org/hsqldb/util/PostgresTransferHelper.java/L-120"],"snippet":"if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n            t.Stmts.sDestDrop += DropSequence;\n"},
{"name":"src/org/hsqldb/util/PostgresTransferHelper.java/L-120","size":1,"imports":["src/org/hsqldb/util/OracleTransferHelper.java/L-98"],"snippet":"if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n            t.Stmts.sDestDrop += DropSequence;\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-2514","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-2480"],"snippet":"while (true) {\n                Iterator it = unresolved.iterator();\n                if (!it.hasNext()) {\n                    break;\n                }\n                OrderedHashSet newResolved = new OrderedHashSet();\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n                if (newResolved.size() == 0) {\n                    break;\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-2480","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-2514"],"snippet":"while (true) {\n                Iterator it = unresolved.iterator();\n                if (!it.hasNext()) {\n                    break;\n                }\n                OrderedHashSet newResolved = new OrderedHashSet();\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n                if (newResolved.size() == 0) {\n                    break;\n"},
{"name":"src/org/hsqldb/test/TestGroupByHaving.java/L-227","size":1,"imports":["src/org/hsqldb/test/TestGroupByHaving.java/L-200"],"snippet":"Object[][] expected = new Object[][] {\n            {\n                new Double(42500), new Integer(13)\n            }, {\n                new Double(45000), new Integer(23)\n            },\n        };\n        compareResults(sql, expected, \"00000\");\n"},
{"name":"src/org/hsqldb/test/TestGroupByHaving.java/L-200","size":1,"imports":["src/org/hsqldb/test/TestGroupByHaving.java/L-227"],"snippet":"Object[][] expected = new Object[][] {\n            {\n                new Double(42500), new Integer(13)\n            }, {\n                new Double(45000), new Integer(23)\n            },\n        };\n        compareResults(sql, expected, \"00000\");\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-613","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-418"],"snippet":"{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-418","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-613"],"snippet":"{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-3679","size":1,"imports":["src/org/hsqldb/Expression.java/L-321","src/org/hsqldb/Expression.java/L-351","src/org/hsqldb/Expression.java/L-335"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            sb.append(nodes[i].getSQL());\n"},
{"name":"src/org/hsqldb/Expression.java/L-321","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-3679","src/org/hsqldb/Expression.java/L-351","src/org/hsqldb/Expression.java/L-335"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    if (i > 0) {\n                        sb.append(',');\n                    }\n                    sb.append(nodes[i].getSQL());\n"},
{"name":"src/org/hsqldb/Expression.java/L-351","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-3679","src/org/hsqldb/Expression.java/L-321","src/org/hsqldb/Expression.java/L-335"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    if (i > 0) {\n                        sb.append(',');\n                    }\n                    sb.append(nodes[i].getSQL());\n"},
{"name":"src/org/hsqldb/Expression.java/L-335","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-3679","src/org/hsqldb/Expression.java/L-321","src/org/hsqldb/Expression.java/L-351"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    if (i > 0) {\n                        sb.append(',');\n                    }\n                    sb.append(nodes[i].getSQL());\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-203","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-151"],"snippet":"{\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, 0, limit, session.actionTimestamp);\n                finaliseRows(session, list, 0, limit);\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-151","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-203"],"snippet":"{\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, 0, limit, session.actionTimestamp);\n                finaliseRows(session, list, 0, limit);\n"},
{"name":"src/org/hsqldb/test/TestUpdatableResultSets.java/L-71","size":1,"imports":["src/org/hsqldb/test/TestUpdatableResultSets.java/L-223","src/org/hsqldb/test/TestUpdatableResultSets.java/L-128"],"snippet":"String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n            connection.setAutoCommit(false);\n"},
{"name":"src/org/hsqldb/test/TestUpdatableResultSets.java/L-223","size":1,"imports":["src/org/hsqldb/test/TestUpdatableResultSets.java/L-71","src/org/hsqldb/test/TestUpdatableResultSets.java/L-128"],"snippet":"String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n            connection.setAutoCommit(false);\n"},
{"name":"src/org/hsqldb/test/TestUpdatableResultSets.java/L-128","size":1,"imports":["src/org/hsqldb/test/TestUpdatableResultSets.java/L-71","src/org/hsqldb/test/TestUpdatableResultSets.java/L-223"],"snippet":"String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n            connection.setAutoCommit(false);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-4430","size":1,"imports":["src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-4358"],"snippet":"{\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n            return;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-4358","size":1,"imports":["src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-4430"],"snippet":"{\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n            return;\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-632","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-609"],"snippet":"parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-609","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-632"],"snippet":"parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-4915","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-4814"],"snippet":"if (grant) {\n            readThis(Tokens.TO);\n        } else {\n            readThis(Tokens.FROM);\n        }\n        while (true) {\n            checkIsSimpleName();\n            granteeList.add(token.tokenString);\n            read();\n            if (token.tokenType == Tokens.COMMA) {\n                read();\n            } else {\n                break;\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-4814","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-4915"],"snippet":"if (grant) {\n            readThis(Tokens.TO);\n        } else {\n            readThis(Tokens.FROM);\n        }\n        while (true) {\n            checkIsSimpleName();\n            granteeList.add(token.tokenString);\n            read();\n            if (token.tokenType == Tokens.COMMA) {\n                read();\n            } else {\n                break;\n"},
{"name":"src/org/hsqldb/StatementCompound.java/L-499","size":1,"imports":["src/org/hsqldb/StatementCompound.java/L-375"],"snippet":"for (int i = 0; i < statements.length; i++) {\n                result = executeProtected(session, statements[i]);\n                result = handleCondition(session, result);\n                if (result.isError()) {\n                    break;\n                }\n                if (result.getType() == ResultConstants.VALUE) {\n                    break;\n                }\n                if (result.getType() == ResultConstants.DATA) {\n                    break;\n"},
{"name":"src/org/hsqldb/StatementCompound.java/L-375","size":1,"imports":["src/org/hsqldb/StatementCompound.java/L-499"],"snippet":"for (int i = 0; i < statements.length; i++) {\n            result = executeProtected(session, statements[i]);\n            result = handleCondition(session, result);\n            if (result.isError()) {\n                break;\n            }\n            if (result.getType() == ResultConstants.VALUE) {\n                break;\n            }\n            if (result.getType() == ResultConstants.DATA) {\n                break;\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-491","size":1,"imports":["src/org/hsqldb/TransactionManager2PL.java/L-286","src/org/hsqldb/TransactionManagerMVCC.java/L-725"],"snippet":"if (cs.getCompileTimestamp()\n                    < database.schemaManager.getSchemaChangeTimestamp()) {\n                cs = session.statementManager.getStatement(session, cs);\n                session.sessionContext.currentStatement = cs;\n                if (cs == null) {\n                    return;\n"},
{"name":"src/org/hsqldb/TransactionManager2PL.java/L-286","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-491","src/org/hsqldb/TransactionManagerMVCC.java/L-725"],"snippet":"if (cs.getCompileTimestamp()\n                    < database.schemaManager.getSchemaChangeTimestamp()) {\n                cs = session.statementManager.getStatement(session, cs);\n                session.sessionContext.currentStatement = cs;\n                if (cs == null) {\n                    return;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-725","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-491","src/org/hsqldb/TransactionManager2PL.java/L-286"],"snippet":"if (cs.getCompileTimestamp()\n                    < database.schemaManager.getSchemaChangeTimestamp()) {\n                cs = session.statementManager.getStatement(session, cs);\n                session.sessionContext.currentStatement = cs;\n                if (cs == null) {\n                    return;\n"},
{"name":"src/org/hsqldb/index/IndexAVL.java/L-1593","size":1,"imports":["src/org/hsqldb/index/IndexAVL.java/L-1567"],"snippet":"if (c == null) {\n                break;\n            }\n            nodeData = c.getData(store);\n            if (compareRow(session, data, nodeData) == 0) {\n                row = c.getRow(store);\n                session.database.txManager.setTransactionInfo(store, row);\n                if (session.database.txManager.canRead(\n                        session, store, row, TransactionManager.ACTION_DUP,\n                        null)) {\n                    return true;\n                }\n                continue;\n            }\n            break;\n"},
{"name":"src/org/hsqldb/index/IndexAVL.java/L-1567","size":1,"imports":["src/org/hsqldb/index/IndexAVL.java/L-1593"],"snippet":"if (c == null) {\n                break;\n            }\n            nodeData = c.getData(store);\n            if (compareRow(session, data, nodeData) == 0) {\n                row = c.getRow(store);\n                session.database.txManager.setTransactionInfo(store, row);\n                if (session.database.txManager.canRead(\n                        session, store, row, TransactionManager.ACTION_DUP,\n                        null)) {\n                    return true;\n                }\n                continue;\n            }\n            break;\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-122","size":1,"imports":["src/org/hsqldb/TransactionManager2PL.java/L-98","src/org/hsqldb/TransactionManagerMVCC.java/L-167"],"snippet":"            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n            endTransaction(session);\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.commit(session);\n"},
{"name":"src/org/hsqldb/TransactionManager2PL.java/L-98","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-122","src/org/hsqldb/TransactionManagerMVCC.java/L-167"],"snippet":"            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n            endTransaction(session);\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.commit(session);\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-167","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-122","src/org/hsqldb/TransactionManager2PL.java/L-98"],"snippet":"            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n            endTransaction(session);\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.commit(session);\n"},
{"name":"src/org/hsqldb/test/TestStoredProcedure.java/L-257","size":1,"imports":["src/org/hsqldb/test/TestStoredProcedure.java/L-221"],"snippet":"boolean isResult = cs.execute();\n        assertFalse(isResult);\n        cs.getMoreResults();\n        ResultSet rs = cs.getResultSet();\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n"},
{"name":"src/org/hsqldb/test/TestStoredProcedure.java/L-221","size":1,"imports":["src/org/hsqldb/test/TestStoredProcedure.java/L-257"],"snippet":"boolean isResult = cs.execute();\n        assertFalse(isResult);\n        cs.getMoreResults();\n        ResultSet rs = cs.getResultSet();\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n"},
{"name":"src/org/hsqldb/navigator/RowSetNavigatorDataTable.java/L-204","size":1,"imports":["src/org/hsqldb/navigator/RowSetNavigatorData.java/L-199"],"snippet":"if (columnMap == null) {\n                data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,\n                        visibleColumnCount);\n            } else {\n                Object[] newData = new Object[visibleColumnCount];\n                ArrayUtil.projectRow(data, columnMap, newData);\n                data = newData;\n"},
{"name":"src/org/hsqldb/navigator/RowSetNavigatorData.java/L-199","size":1,"imports":["src/org/hsqldb/navigator/RowSetNavigatorDataTable.java/L-204"],"snippet":"if (columnMap == null) {\n            data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,\n                    visibleColumnCount);\n        } else {\n            Object[] newData = new Object[visibleColumnCount];\n            ArrayUtil.projectRow(data, columnMap, newData);\n            data = newData;\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLMemory.java/L-58","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLDiskData.java/L-64"],"snippet":"{\n        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n        manager.setStore(table, this);\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLDiskData.java/L-64","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLMemory.java/L-58"],"snippet":"{\n        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n        manager.setStore(table, this);\n"},
{"name":"src/org/hsqldb/rights/GranteeManager.java/L-510","size":1,"imports":["src/org/hsqldb/rights/GranteeManager.java/L-496"],"snippet":"for (int i = 0; i < map.size(); i++) {\n                Grantee g = (Grantee) map.get(i);\n                g.revokeDbObject(name);\n"},
{"name":"src/org/hsqldb/rights/GranteeManager.java/L-496","size":1,"imports":["src/org/hsqldb/rights/GranteeManager.java/L-510"],"snippet":"for (int i = 0; i < map.size(); i++) {\n            Grantee g = (Grantee) map.get(i);\n            g.revokeDbObject(name);\n"},
{"name":"src/org/hsqldb/RowAVL.java/L-161","size":1,"imports":["src/org/hsqldb/RowAVLDiskData.java/L-146"],"snippet":"{\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n        return newnode;\n"},
{"name":"src/org/hsqldb/RowAVLDiskData.java/L-146","size":1,"imports":["src/org/hsqldb/RowAVL.java/L-161"],"snippet":"{\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n        return newnode;\n"},
{"name":"src/org/hsqldb/Scanner.java/L-1506","size":1,"imports":["src/org/hsqldb/Scanner.java/L-1489"],"snippet":"{\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n                    return;\n"},
{"name":"src/org/hsqldb/Scanner.java/L-1489","size":1,"imports":["src/org/hsqldb/Scanner.java/L-1506"],"snippet":"{\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n                    return;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4450","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2754"],"snippet":"if (type.isDistinctType()) {\n                        row[udt_catalog] = database.getCatalogName().name;\n                        row[udt_schema]  = type.getSchemaName().name;\n                        row[udt_name]    = type.getName().name;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2754","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4450"],"snippet":"if (type.isDistinctType()) {\n                    row[udt_catalog] = database.getCatalogName().name;\n                    row[udt_schema]  = type.getSchemaName().name;\n                    row[udt_name]    = type.getName().name;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-4908","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-2968"],"snippet":"if (token.tokenType == Tokens.LEFTBRACKET) {\n            read();\n            Expression e1 = XreadNumericValueExpression();\n            readThis(Tokens.RIGHTBRACKET);\n            e = new ExpressionAccessor(e, e1);\n        }\n        return e;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-2968","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-4908"],"snippet":"if (token.tokenType == Tokens.LEFTBRACKET) {\n            read();\n            Expression e1 = XreadNumericValueExpression();\n            readThis(Tokens.RIGHTBRACKET);\n            e = new ExpressionAccessor(e, e1);\n        }\n        return e;\n"},
{"name":"src/org/hsqldb/util/ConnectionDialogSwing.java/L-255","size":1,"imports":["src/org/hsqldb/util/ConnectionDialog.java/L-256"],"snippet":"        if (d.width >= 640) {\n            setLocation((d.width - size.width) \/ 2,\n                        (d.height - size.height) \/ 2);\n        } else {\n            setLocation(0, 0);\n            setSize(d);\n"},
{"name":"src/org/hsqldb/util/ConnectionDialog.java/L-256","size":1,"imports":["src/org/hsqldb/util/ConnectionDialogSwing.java/L-255"],"snippet":"        if (d.width >= 640) {\n            setLocation((d.width - size.width) \/ 2,\n                        (d.height - size.height) \/ 2);\n        } else {\n            setLocation(0, 0);\n            setSize(d);\n"},
{"name":"src/org/hsqldb/Scanner.java/L-1018","size":1,"imports":["src/org/hsqldb/Scanner.java/L-1002"],"snippet":"{\n                        token.tokenString = sqlString.substring(tokenStart,\n                                currentPosition + 1);\n                        token.tokenType   = Tokens.X_MALFORMED_NUMERIC;\n                        token.isMalformed = true;\n                        return;\n                    }\n                    hasPoint      = true;\n"},
{"name":"src/org/hsqldb/Scanner.java/L-1002","size":1,"imports":["src/org/hsqldb/Scanner.java/L-1018"],"snippet":"{\n                        token.tokenString = sqlString.substring(tokenStart,\n                                currentPosition + 1);\n                        token.tokenType   = Tokens.X_MALFORMED_NUMERIC;\n                        token.isMalformed = true;\n                        return;\n                    }\n                    hasPoint = true;\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-609","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-591"],"snippet":"if (nodes[2] != null\n                        && ((Number) nodes[2].valueData).intValue()\n                           == Tokens.OCTETS) {\n                }\n                return ValuePool.getLong(result);\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-591","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-609"],"snippet":"if (nodes[2] != null\n                        && ((Number) nodes[2].valueData).intValue()\n                           == Tokens.OCTETS) {\n                }\n                return ValuePool.getLong(result);\n"},
{"name":"src/org/hsqldb/StatementDML.java/L-279","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-329"],"snippet":"for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n            set.add(name);\n        }\n        for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"},
{"name":"src/org/hsqldb/StatementSet.java/L-329","size":1,"imports":["src/org/hsqldb/StatementDML.java/L-279"],"snippet":"for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n            set.add(name);\n        }\n        for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"},
{"name":"src/org/hsqldb/ExpressionAggregate.java/L-226","size":1,"imports":["src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/ExpressionLogical.java/L-647","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-2180","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/ExpressionTable.java/L-99","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/Expression.java/L-1159","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/ExpressionLike.java/L-123","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/ExpressionArithmetic.java/L-255","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1202","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/ExpressionAccessor.java/L-79","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/ExpressionAccessor.java/L-79","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionOp.java/L-379"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/ExpressionOp.java/L-379","size":1,"imports":["src/org/hsqldb/ExpressionAggregate.java/L-226","src/org/hsqldb/ExpressionLogical.java/L-647","src/org/hsqldb/FunctionCustom.java/L-2180","src/org/hsqldb/ExpressionTable.java/L-99","src/org/hsqldb/Expression.java/L-1159","src/org/hsqldb/ExpressionLike.java/L-123","src/org/hsqldb/ExpressionArithmetic.java/L-255","src/org/hsqldb/FunctionSQL.java/L-1202","src/org/hsqldb/ExpressionAccessor.java/L-79"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i] != null) {\n                        nodes[i].resolveTypes(session, this);\n"},
{"name":"src/org/hsqldb/ParserRoutine.java/L-2148","size":1,"imports":["src/org/hsqldb/ParserRoutine.java/L-2117"],"snippet":"sqlState = parseSQLStateValue();\n            if (readIfThis(Tokens.SET)) {\n                readThis(Tokens.MESSAGE_TEXT);\n                readThis(Tokens.EQUALS);\n                message = XreadSimpleValueSpecificationOrNull();\n                if (message == null) {\n                    throw unexpectedToken();\n                }\n                resolveOuterReferencesAndTypes(routine, context, message);\n"},
{"name":"src/org/hsqldb/ParserRoutine.java/L-2117","size":1,"imports":["src/org/hsqldb/ParserRoutine.java/L-2148"],"snippet":"sqlState = parseSQLStateValue();\n        if (readIfThis(Tokens.SET)) {\n            readThis(Tokens.MESSAGE_TEXT);\n            readThis(Tokens.EQUALS);\n            message = XreadSimpleValueSpecificationOrNull();\n            if (message == null) {\n                throw unexpectedToken();\n            }\n            resolveOuterReferencesAndTypes(routine, context, message);\n"},
{"name":"src/org/hsqldb/StatementDML.java/L-1585","size":1,"imports":["src/org/hsqldb/StatementDML.java/L-1499"],"snippet":"catch (HsqlException e) {\n                    String[] info = getConstraintInfo(c);\n                    refiterator.release();\n                    throw Error.error(null, ErrorCode.X_27000,\n                                      ErrorCode.CONSTRAINT, info);\n"},
{"name":"src/org/hsqldb/StatementDML.java/L-1499","size":1,"imports":["src/org/hsqldb/StatementDML.java/L-1585"],"snippet":"catch (HsqlException e) {\n                                String[] info = getConstraintInfo(c);\n                                refiterator.release();\n                                throw Error.error(null, ErrorCode.X_27000,\n                                                  ErrorCode.CONSTRAINT, info);\n"},
{"name":"src/org/hsqldb/map/BitMap.java/L-635","size":1,"imports":["src/org/hsqldb/map/BitMap.java/L-612"],"snippet":"int    length      = a.length > b.length ? a.length\n                                                 : b.length;\n        int    shortLength = a.length > b.length ? b.length\n                                                 : a.length;\n        byte[] map         = new byte[length];\n        if (length != shortLength) {\n            byte[] source = a.length > b.length ? a\n                                                : b;\n            System.arraycopy(source, shortLength, map, shortLength,\n                             length - shortLength);\n"},
{"name":"src/org/hsqldb/map/BitMap.java/L-612","size":1,"imports":["src/org/hsqldb/map/BitMap.java/L-635"],"snippet":"int    length      = a.length > b.length ? a.length\n                                                 : b.length;\n        int    shortLength = a.length > b.length ? b.length\n                                                 : a.length;\n        byte[] map         = new byte[length];\n        if (length != shortLength) {\n            byte[] source = a.length > b.length ? a\n                                                : b;\n            System.arraycopy(source, shortLength, map, shortLength,\n                             length - shortLength);\n"},
{"name":"src/org/hsqldb/types/BitType.java/L-93","size":1,"imports":["src/org/hsqldb/types/CharacterType.java/L-165","src/org/hsqldb/types/BinaryType.java/L-118"],"snippet":"{\n        if (precision == 0) {\n            return getNameString();\n        }\n        StringBuffer sb = new StringBuffer(16);\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n        return sb.toString();\n    }\n    public boolean isBitType() {\n        return true;\n"},
{"name":"src/org/hsqldb/types/CharacterType.java/L-165","size":1,"imports":["src/org/hsqldb/types/BitType.java/L-93","src/org/hsqldb/types/BinaryType.java/L-118"],"snippet":"{\n        if (precision == 0) {\n            return getNameString();\n        }\n        StringBuffer sb = new StringBuffer(16);\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n        return sb.toString();\n    }\n    public boolean isCharacterType() {\n        return true;\n"},
{"name":"src/org/hsqldb/types/BinaryType.java/L-118","size":1,"imports":["src/org/hsqldb/types/BitType.java/L-93","src/org/hsqldb/types/CharacterType.java/L-165"],"snippet":"{\n        if (precision == 0) {\n            return getNameString();\n        }\n        StringBuffer sb = new StringBuffer(16);\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n        return sb.toString();\n    }\n    public boolean isBinaryType() {\n        return true;\n"},
{"name":"src/org/hsqldb/lib/IntKeyLongValueHashMap.java/L-55","size":1,"imports":["src/org/hsqldb/lib/LongKeyLongValueHashMap.java/L-65"],"snippet":"{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public long get(int key, int defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(int key, long[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = longValueTable[lookup];\n            return true;\n        }\n        return false;\n    }\n    public boolean put(int key, int value) {\n        int oldSize = size();\n        super.addOrRemove(key, value, null, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(int key) {\n        int oldSize = size();\n        super.addOrRemove(key, 0, null, null, true);\n        return oldSize != size();\n"},
{"name":"src/org/hsqldb/lib/LongKeyLongValueHashMap.java/L-65","size":1,"imports":["src/org/hsqldb/lib/IntKeyLongValueHashMap.java/L-55"],"snippet":"{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public long get(long key, long defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(long key, long[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = longValueTable[lookup];\n            return true;\n        }\n        return false;\n    }\n    public boolean put(long key, long value) {\n        int oldSize = size();\n        super.addOrRemove(key, value, null, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(long key) {\n        int oldSize = size();\n        super.addOrRemove(key, 0, null, null, true);\n        return oldSize != size();\n"},
{"name":"src/org/hsqldb/Table.java/L-2710","size":1,"imports":["src/org/hsqldb/Table.java/L-2662"],"snippet":"while (nav.hasNext()) {\n            Object[] data = (Object[]) nav.getNext();\n            Object[] newData =\n                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);\n            insertData(session, store, newData);\n"},
{"name":"src/org/hsqldb/Table.java/L-2662","size":1,"imports":["src/org/hsqldb/Table.java/L-2710"],"snippet":"while (nav.hasNext()) {\n            Object[] data = (Object[]) nav.getNext();\n            Object[] newData =\n                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);\n            insertData(session, store, newData);\n"},
{"name":"src/org/hsqldb/Expression.java/L-1047","size":1,"imports":["src/org/hsqldb/Expression.java/L-1061","src/org/hsqldb/ExpressionArithmetic.java/L-240","src/org/hsqldb/ExpressionAccessor.java/L-65","src/org/hsqldb/ExpressionOp.java/L-358"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i] == null) {\n                        continue;\n                    }\n                    unresolvedSet = nodes[i].resolveColumnReferences(session,\n                            rangeGroup, rangeCount, rangeGroups,\n                            unresolvedSet, acceptsSequences);\n"},
{"name":"src/org/hsqldb/Expression.java/L-1061","size":1,"imports":["src/org/hsqldb/Expression.java/L-1047","src/org/hsqldb/ExpressionArithmetic.java/L-240","src/org/hsqldb/ExpressionAccessor.java/L-65","src/org/hsqldb/ExpressionOp.java/L-358"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].resolveColumnReferences(session,\n                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,\n                    acceptsSequences);\n"},
{"name":"src/org/hsqldb/ExpressionArithmetic.java/L-240","size":1,"imports":["src/org/hsqldb/Expression.java/L-1047","src/org/hsqldb/Expression.java/L-1061","src/org/hsqldb/ExpressionAccessor.java/L-65","src/org/hsqldb/ExpressionOp.java/L-358"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].resolveColumnReferences(session,\n                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,\n                    acceptsSequences);\n"},
{"name":"src/org/hsqldb/ExpressionAccessor.java/L-65","size":1,"imports":["src/org/hsqldb/Expression.java/L-1047","src/org/hsqldb/Expression.java/L-1061","src/org/hsqldb/ExpressionArithmetic.java/L-240","src/org/hsqldb/ExpressionOp.java/L-358"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].resolveColumnReferences(session,\n                    rangeGroup, rangeCount, rangeGroups, unresolvedSet, acceptsSequences);\n"},
{"name":"src/org/hsqldb/ExpressionOp.java/L-358","size":1,"imports":["src/org/hsqldb/Expression.java/L-1047","src/org/hsqldb/Expression.java/L-1061","src/org/hsqldb/ExpressionArithmetic.java/L-240","src/org/hsqldb/ExpressionAccessor.java/L-65"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].resolveColumnReferences(session,\n                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,\n                    acceptsSequences);\n"},
{"name":"src/org/hsqldb/rowio/RowInputTextQuoted.java/L-140","size":1,"imports":["src/org/hsqldb/rowio/RowInputText.java/L-181"],"snippet":"catch (Exception e) {\n            Object[] messages = new Object[] {\n                new Integer(field), e.toString()\n            };\n            throw new IOException(\n                Error.getMessage(\n                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));\n        }\n        return s;\n"},
{"name":"src/org/hsqldb/rowio/RowInputText.java/L-181","size":1,"imports":["src/org/hsqldb/rowio/RowInputTextQuoted.java/L-140"],"snippet":"catch (Exception e) {\n            Object[] messages = new Object[] {\n                new Integer(field), e.toString()\n            };\n            throw new IOException(\n                Error.getMessage(\n                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));\n        }\n        return s;\n"},
{"name":"src/org/hsqldb/test/TestSql.java/L-467","size":1,"imports":["src/org/hsqldb/test/TestSqlPersistent.java/L-542"],"snippet":"stmnt.execute(\"drop table CDTYPE if exists\");\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");\n"},
{"name":"src/org/hsqldb/test/TestSqlPersistent.java/L-542","size":1,"imports":["src/org/hsqldb/test/TestSql.java/L-467"],"snippet":"stmnt.execute(\"drop table CDTYPE if exists\");\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");\n"},
{"name":"src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java/L-264","size":1,"imports":["src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java/L-115"],"snippet":"return result;\n  }\n  private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n"},
{"name":"src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java/L-115","size":1,"imports":["src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java/L-264"],"snippet":"return result;\n  }\n  private static int zzUnpackAction(String packed, int offset, int [] result) {\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-179","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-132"],"snippet":"for (int i = 0; i < session.tempSet.size(); i++) {\n                Session current =\n                    ((RowActionBase) session.tempSet.get(i)).session;\n                current.abortTransaction = true;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-132","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-179"],"snippet":"for (int i = 0; i < session.tempSet.size(); i++) {\n                Session current =\n                    ((RowActionBase) session.tempSet.get(i)).session;\n                current.abortTransaction = true;\n"},
{"name":"src/org/hsqldb/DatabaseManager.java/L-400","size":1,"imports":["src/org/hsqldb/DatabaseManager.java/L-346"],"snippet":"if (type == DatabaseURL.S_FILE) {\n            databaseMap = fileDatabaseMap;\n            key         = filePathToKey(path);\n        } else if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw (Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\"));\n"},
{"name":"src/org/hsqldb/DatabaseManager.java/L-346","size":1,"imports":["src/org/hsqldb/DatabaseManager.java/L-400"],"snippet":"if (type == DatabaseURL.S_FILE) {\n            databaseMap = fileDatabaseMap;\n            key         = filePathToKey(path);\n        } else if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw (Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\"));\n"},
{"name":"src/org/hsqldb/StatementDML.java/L-1387","size":1,"imports":["src/org/hsqldb/StatementDML.java/L-1129"],"snippet":"if (extraUpdateTables != null) {\n            for (int i = 0; i < extraUpdateTables.size(); i++) {\n                Table currentTable = (Table) extraUpdateTables.get(i);\n                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,\n                                          navigator);\n"},
{"name":"src/org/hsqldb/StatementDML.java/L-1129","size":1,"imports":["src/org/hsqldb/StatementDML.java/L-1387"],"snippet":"if (extraUpdateTables != null) {\n            for (int i = 0; i < extraUpdateTables.size(); i++) {\n                Table currentTable = (Table) extraUpdateTables.get(i);\n                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,\n                                          navigator);\n"},
{"name":"src/org/hsqldb/RangeVariableResolver.java/L-446","size":1,"imports":["src/org/hsqldb/RangeVariableResolver.java/L-430"],"snippet":"if (idx < 0) {\n                    e.isSingleColumnEqual     = true;\n                    e.isSingleColumnCondition = true;\n                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());\n                    continue;\n                }\n                if (idx >= firstOuterJoinIndex) {\n                    continue;\n"},
{"name":"src/org/hsqldb/RangeVariableResolver.java/L-430","size":1,"imports":["src/org/hsqldb/RangeVariableResolver.java/L-446"],"snippet":"if (idx < 0) {\n                    e.isSingleColumnEqual     = true;\n                    e.isSingleColumnCondition = true;\n                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());\n                    continue;\n                }\n                if (idx >= firstOuterJoinIndex) {\n                    continue;\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-1381","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-1364"],"snippet":"TimestampData ts;\n                if (nodes[0] == null) {\n                    ts = session.getCurrentTimestamp(true);\n                } else {\n                    if (data[0] == null) {\n                        return null;\n                    }\n                    ts = (TimestampData) data[0];\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-1364","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-1381"],"snippet":"TimestampData ts;\n                if (nodes[0] == null) {\n                    ts = session.getCurrentTimestamp(true);\n                } else {\n                    if (data[0] == null) {\n                        return null;\n                    }\n                    ts = (TimestampData) data[0];\n"},
{"name":"src/org/hsqldb/util/Grid.java/L-174","size":1,"imports":["src/org/hsqldb/util/Tree.java/L-155"],"snippet":"{\n        dMinimum = d;\n    }\n    public void setBounds(int x, int y, int w, int h) {\n        super.setBounds(x, y, w, h);\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n        iImage = null;\n        repaint();\n"},
{"name":"src/org/hsqldb/util/Tree.java/L-155","size":1,"imports":["src/org/hsqldb/util/Grid.java/L-174"],"snippet":"{\n        dMinimum = d;\n    }\n    public void setBounds(int x, int y, int w, int h) {\n        super.setBounds(x, y, w, h);\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n        iImage = null;\n        repaint();\n"},
{"name":"src/org/hsqldb/util/Transfer.java/L-411","size":1,"imports":["src/org/hsqldb/util/DatabaseManager.java/L-476"],"snippet":"Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();\n        Dimension size = fMain.getSize();\n        if (d.width >= 640) {\n            fMain.setLocation((d.width - size.width) \/ 2,\n                              (d.height - size.height) \/ 2);\n        } else {\n            fMain.setLocation(0, 0);\n            fMain.setSize(d);\n"},
{"name":"src/org/hsqldb/util/DatabaseManager.java/L-476","size":1,"imports":["src/org/hsqldb/util/Transfer.java/L-411"],"snippet":"Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();\n        Dimension size = fMain.getSize();\n        if (d.width >= 640) {\n            fMain.setLocation((d.width - size.width) \/ 2,\n                              (d.height - size.height) \/ 2);\n        } else {\n            fMain.setLocation(0, 0);\n            fMain.setSize(d);\n"},
{"name":"src/org/hsqldb/ParserDML.java/L-609","size":1,"imports":["src/org/hsqldb/ParserDML.java/L-490"],"snippet":"condition =\n                ExpressionLogical.andExpressions(baseSelect.queryCondition,\n                                                 condition);\n            rangeVariables = baseSelect.rangeVariables;\n        }\n        if (condition != null) {\n            rangeVariables[0].addJoinCondition(condition);\n            RangeVariableResolver resolver =\n                new RangeVariableResolver(rangeVariables, null,\n                                          compileContext, false);\n            resolver.processConditions(session);\n            rangeVariables = resolver.rangeVariables;\n        }\n        for (int i = 0; i < rangeVariables.length; i++) {\n            rangeVariables[i].resolveRangeTableTypes(session,\n                    RangeVariable.emptyArray);\n"},
{"name":"src/org/hsqldb/ParserDML.java/L-490","size":1,"imports":["src/org/hsqldb/ParserDML.java/L-609"],"snippet":"condition =\n                ExpressionLogical.andExpressions(baseSelect.queryCondition,\n                                                 condition);\n            rangeVariables = baseSelect.rangeVariables;\n        }\n        if (condition != null) {\n            rangeVariables[0].addJoinCondition(condition);\n            RangeVariableResolver resolver =\n                new RangeVariableResolver(rangeVariables, null,\n                                          compileContext, false);\n            resolver.processConditions(session);\n            rangeVariables = resolver.rangeVariables;\n        }\n        for (int i = 0; i < rangeVariables.length; i++) {\n            rangeVariables[i].resolveRangeTableTypes(session,\n                    RangeVariable.emptyArray);\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-4474","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-4079"],"snippet":"for (int i = 0; i < headerArray.length; i++) {\n                condlPrint(\"<TH>\"\n                        + SqlFile.escapeHtml(headerArray[i]) + \"<\/TH>\", true);\n                condlPrint(((i > 0) ? \"  \" : \"\")\n                        + ((i < headerArray.length - 1 || rightJust[i])\n                           ? StringUtil.toPaddedString(\n                             headerArray[i], maxWidth[i], ' ', !rightJust[i])\n                           : headerArray[i])\n                        , false);\n            }\n            condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n            condlPrintln(\"\", false);\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-4079","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-4474"],"snippet":"for (int i = 0; i < headerArray.length; i++) {\n                            condlPrint(\"<TH>\"\n                                    + SqlFile.escapeHtml(headerArray[i])\n                                    + \"<\/TH>\", true);\n                            condlPrint(((i > 0) ? \"  \" : \"\")\n                                    + ((i < headerArray.length - 1\n                                        || rightJust[i])\n                                       ? StringUtil.toPaddedString(\n                                         headerArray[i], maxWidth[i],\n                                         ' ', !rightJust[i])\n                                       : headerArray[i])\n                                    , false);\n                        }\n                        condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n                        condlPrintln(\"\", false);\n"},
{"name":"src/org/hsqldb/persist/LobManager.java/L-1320","size":1,"imports":["src/org/hsqldb/persist/LobManager.java/L-1286"],"snippet":"if (blockAddresses[i][LOBS.BLOCK_COUNT]\n                    + blockAddresses[i][LOBS.BLOCK_OFFSET] > blockLimit) {\n                blockCount -= (blockAddresses[i][LOBS.BLOCK_COUNT]\n                               + blockAddresses[i][LOBS.BLOCK_OFFSET]\n                               - blockLimit);\n"},
{"name":"src/org/hsqldb/persist/LobManager.java/L-1286","size":1,"imports":["src/org/hsqldb/persist/LobManager.java/L-1320"],"snippet":"if (blockAddresses[i][LOBS.BLOCK_COUNT]\n                + blockAddresses[i][LOBS.BLOCK_OFFSET] > blockLimit) {\n            blockCount -= (blockAddresses[i][LOBS.BLOCK_COUNT]\n                           + blockAddresses[i][LOBS.BLOCK_OFFSET]\n                           - blockLimit);\n"},
{"name":"src/org/hsqldb/lib/StringConverter.java/L-252","size":1,"imports":["src/org/hsqldb/lib/StringConverter.java/L-224"],"snippet":"{\n            int c = ((int) b[i]) & 0xff;\n            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];\n            s[j++] = (char) HEXBYTES[c & 0xf];\n"},
{"name":"src/org/hsqldb/lib/StringConverter.java/L-224","size":1,"imports":["src/org/hsqldb/lib/StringConverter.java/L-252"],"snippet":"{\n            int c = ((int) b[i]) & 0xff;\n            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];\n            s[j++] = (char) HEXBYTES[c & 0xf];\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/Testdb.java/L-56","size":1,"imports":["src/org/hsqldb/sample/Testdb.java/L-56"],"snippet":"{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"},
{"name":"src/org/hsqldb/sample/Testdb.java/L-56","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/Testdb.java/L-56"],"snippet":"{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"},
{"name":"src/org/hsqldb/jdbc/JDBCResultSet.java/L-1989","size":1,"imports":["src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-983"],"snippet":"switch (targetType.typeCode) {\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n                break;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-983","size":1,"imports":["src/org/hsqldb/jdbc/JDBCResultSet.java/L-1989"],"snippet":"switch (targetType.typeCode) {\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n                break;\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-2175","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-2137"],"snippet":"if (column != null) {\n                    DefaultMutableTreeNode childNode =\n                        (DefaultMutableTreeNode) treePath\n                            .getLastPathComponent();\n                    String  childName = null;\n                    boolean isChar;\n                    if (childNode.getChildCount() > 0) {\n                        childName = childNode.getFirstChild().toString();\n                        isChar    = childName.indexOf(\"CHAR\") >= 0;\n                        result    += \" WHERE \" + quoteObjectName(column);\n                        if (isChar) {\n                            result += \" LIKE \\'%%\\'\";\n                        } else {\n                            result += \" = \";\n                        }\n                    }\n                }\n                return result;\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-2137","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-2175"],"snippet":"if (column != null) {\n                    DefaultMutableTreeNode childNode =\n                        (DefaultMutableTreeNode) treePath\n                            .getLastPathComponent();\n                    String  childName = null;\n                    boolean isChar;\n                    if (childNode.getChildCount() > 0) {\n                        childName = childNode.getFirstChild().toString();\n                        isChar    = childName.indexOf(\"CHAR\") >= 0;\n                        result    += \" WHERE \" + quoteObjectName(column);\n                        if (isChar) {\n                            result += \" LIKE \\'%%\\'\";\n                        } else {\n                            result += \" = \";\n                        }\n                    }\n                }\n                return result;\n"},
{"name":"integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java/L-154","size":1,"imports":["integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java/L-119"],"snippet":"            c.commit();\n        } finally {\n            if (st != null) try {\n                st.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                st = null;  \/\/ Encourage GC\n            }\n            if (c != null) try {\n                c.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                c = null;  \/\/ Encourage GC\n"},
{"name":"integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java/L-119","size":1,"imports":["integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java/L-154"],"snippet":"            c.commit();\n        } finally {\n            if (st != null) try {\n                st.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                st = null;  \/\/ Encourage GC\n            }\n            if (c != null) try {\n                c.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                c = null;  \/\/ Encourage GC\n"},
{"name":"src/org/hsqldb/test/TestSql.java/L-177","size":1,"imports":["src/org/hsqldb/test/TestSql.java/L-157"],"snippet":"ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n                    result0 += \"\\n\";\n                }\n                rs.close();\n                System.out.println(result0);\n"},
{"name":"src/org/hsqldb/test/TestSql.java/L-157","size":1,"imports":["src/org/hsqldb/test/TestSql.java/L-177"],"snippet":"ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n                    result0 += \"\\n\";\n                }\n                rs.close();\n                System.out.println(result0);\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-759","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-682"],"snippet":"ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-682","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-759"],"snippet":"ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-2503","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-2482"],"snippet":"{\n                            read();\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n                            break;\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-2482","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-2503"],"snippet":"{\n                            read();\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n                            break;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-4936","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-4696"],"snippet":"{\n                    r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,\n                            r.nodes.length + 1);\n                    r.nodes[r.nodes.length - 1] = e;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-4696","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-4936"],"snippet":"{\n                r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,\n                        r.nodes.length + 1);\n                r.nodes[r.nodes.length - 1] = e;\n"},
{"name":"src/org/hsqldb/types/RowType.java/L-333","size":1,"imports":["src/org/hsqldb/types/RowType.java/L-305"],"snippet":"{\n            return this;\n        }\n        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n        return new RowType(newTypes);\n"},
{"name":"src/org/hsqldb/types/RowType.java/L-305","size":1,"imports":["src/org/hsqldb/types/RowType.java/L-333"],"snippet":"{\n            return this;\n        }\n        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n        return new RowType(newTypes);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCConnection.java/L-2213","size":1,"imports":["src/org/hsqldb/jdbc/JDBCConnection.java/L-2124"],"snippet":"checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCConnection.java/L-2124","size":1,"imports":["src/org/hsqldb/jdbc/JDBCConnection.java/L-2213"],"snippet":"checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"},
{"name":"src/org/hsqldb/persist/LobManager.java/L-1154","size":1,"imports":["src/org/hsqldb/persist/LobManager.java/L-672"],"snippet":"{\n            Object[] data = getLobHeader(lobID);\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n            return ResultLob.newLobSetResponse(lobID, length);\n"},
{"name":"src/org/hsqldb/persist/LobManager.java/L-672","size":1,"imports":["src/org/hsqldb/persist/LobManager.java/L-1154"],"snippet":"{\n            Object[] data = getLobHeader(lobID);\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n            return ResultLob.newLobSetResponse(lobID, length);\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1215","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1189"],"snippet":"if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n        }\n    }\n    public Type getDomainOrUDT(String name, String schemaName, boolean raise) {\n        readLock.lock();\n        try {\n            Schema schema = (Schema) schemaMap.get(schemaName);\n            if (schema != null) {\n                SchemaObject object = schema.typeLookup.getObject(name);\n                if (object != null) {\n                    return (Type) object;\n                }\n            }\n            if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1189","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1215"],"snippet":"if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n        }\n    }\n    public Type getUserDefinedType(String name, String schemaName,\n                                   boolean raise) {\n        readLock.lock();\n        try {\n            Schema schema = (Schema) schemaMap.get(schemaName);\n            if (schema != null) {\n                SchemaObject object = schema.typeLookup.getObject(name);\n                if (object != null) {\n                    return (Type) object;\n                }\n            }\n            if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-617","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-387"],"snippet":"{\n        rowActionMap.getWriteLock().lock();\n        try {\n            RowAction action = (RowAction) rowActionMap.get(id);\n            synchronized (action) {\n                if (action.type == RowActionBase.ACTION_NONE) {\n                    rowActionMap.remove(id);\n                }\n            }\n        } finally {\n            rowActionMap.getWriteLock().unlock();\n        }\n    }\n    void addToCommittedQueue(Session session, Object[] list) {\n        synchronized (committedTransactionTimestamps) {\n            committedTransactions.addLast(list);\n            committedTransactionTimestamps.addLast(session.actionTimestamp);\n            if (committedTransactions.size() > 64) {\n            }\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-387","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-617"],"snippet":"{\n        rowActionMap.getWriteLock().lock();\n        try {\n            RowAction action = (RowAction) rowActionMap.get(id);\n            synchronized (action) {\n                if (action.type == RowActionBase.ACTION_NONE) {\n                    rowActionMap.remove(id);\n                }\n            }\n        } finally {\n            rowActionMap.getWriteLock().unlock();\n        }\n    }\n    void addToCommittedQueue(Session session, Object[] list) {\n        synchronized (committedTransactionTimestamps) {\n            committedTransactions.addLast(list);\n            committedTransactionTimestamps.addLast(session.actionTimestamp);\n            if (committedTransactions.size() > 64) {\n            }\n"},
{"name":"src/org/hsqldb/types/BlobDataID.java/L-223","size":1,"imports":["src/org/hsqldb/types/BinaryData.java/L-195"],"snippet":"{\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBytes(SessionInterface session, long pos, BlobData b,\n                         long offset, long length) {\n        if (length > Integer.MAX_VALUE) {\n            throw new IndexOutOfBoundsException();\n        }\n        byte[] bytes = b.getBytes(session, offset, (int) length);\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBinaryStream(SessionInterface session, long pos,\n                                InputStream in) {\n    }\n"},
{"name":"src/org/hsqldb/types/BinaryData.java/L-195","size":1,"imports":["src/org/hsqldb/types/BlobDataID.java/L-223"],"snippet":"{\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBytes(SessionInterface session, long pos, BlobData b,\n                         long offset, long length) {\n        if (length > Integer.MAX_VALUE) {\n            throw new IndexOutOfBoundsException();\n        }\n        byte[] bytes = b.getBytes(session, offset, (int) length);\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBinaryStream(SessionInterface session, long pos,\n                                InputStream in) {\n    }\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/Testdb.java/L-56","size":1,"imports":["src/org/hsqldb/sample/Testdb.java/L-56"],"snippet":"{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"},
{"name":"src/org/hsqldb/sample/Testdb.java/L-56","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/Testdb.java/L-56"],"snippet":"{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-4944","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-4841"],"snippet":"if (token.tokenType == Tokens.GRANTED) {\n            read();\n            readThis(Tokens.BY);\n            if (token.tokenType == Tokens.CURRENT_USER) {\n                read();\n            } else {\n                readThis(Tokens.CURRENT_ROLE);\n                if (session.getRole() == null) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                grantor = session.getRole();\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-4841","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-4944"],"snippet":"            if (token.tokenType == Tokens.GRANTED) {\n                read();\n                readThis(Tokens.BY);\n                if (token.tokenType == Tokens.CURRENT_USER) {\n                    read();\n                } else {\n                    readThis(Tokens.CURRENT_ROLE);\n                    if (session.getRole() == null) {\n                        throw Error.error(ErrorCode.X_0P000);\n                    }\n                    grantor = session.getRole();\n"},
{"name":"src/org/hsqldb/lib/LongValueHashMap.java/L-116","size":1,"imports":["src/org/hsqldb/lib/IntValueHashMap.java/L-117"],"snippet":"if (i == value) {\n                return objectKeyTable[it.getLookup()];\n            }\n        }\n        return null;\n    }\n    public boolean put(Object key, long value) {\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n        int oldSize = size();\n        super.addOrRemove(0, value, key, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(Object key) {\n        int oldSize = size();\n        super.addOrRemove(0, 0, key, null, true);\n        return oldSize != size();\n    }\n    public boolean containsKey(Object key) {\n        return super.containsKey(key);\n"},
{"name":"src/org/hsqldb/lib/IntValueHashMap.java/L-117","size":1,"imports":["src/org/hsqldb/lib/LongValueHashMap.java/L-116"],"snippet":"if (i == value) {\n                return objectKeyTable[it.getLookup()];\n            }\n        }\n        return null;\n    }\n    public boolean put(Object key, int value) {\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n        int oldSize = size();\n        super.addOrRemove(0, value, key, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(Object key) {\n        int oldSize = size();\n        super.addOrRemove(0, 0, key, null, true);\n        return oldSize != size();\n    }\n    public boolean containsKey(Object key) {\n        return super.containsKey(key);\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1590","size":1,"imports":["src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1538","size":1,"imports":["src/org/hsqldb/test/TestOdbcTypes.java/L-1590"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-288","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-320","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-343","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-420","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-373"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-320","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-288","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-343","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-420","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-373"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-343","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-288","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-320","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-420","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-373"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-420","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-288","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-320","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-343","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-373"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-373","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-288","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-320","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-343","src/org/hsqldb/index/NodeAVLDiskLarge.java/L-420"],"snippet":"NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/types/BlobDataID.java/L-176","size":1,"imports":["src/org/hsqldb/types/ClobDataID.java/L-211"],"snippet":"Result resultIn = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getOffset();\n    }\n    public long nonZeroLength(SessionInterface session) {\n        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);\n        Result    resultIn  = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getBlockLength();\n"},
{"name":"src/org/hsqldb/types/ClobDataID.java/L-211","size":1,"imports":["src/org/hsqldb/types/BlobDataID.java/L-176"],"snippet":"Result resultIn = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getOffset();\n    }\n    public long nonSpaceLength(SessionInterface session) {\n        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);\n        Result    resultIn  = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getBlockLength();\n"},
{"name":"src/org/hsqldb/StatementCommand.java/L-212","size":1,"imports":["src/org/hsqldb/StatementSession.java/L-234"],"snippet":"{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n            return result;\n        }\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n        return result;\n"},
{"name":"src/org/hsqldb/StatementSession.java/L-234","size":1,"imports":["src/org/hsqldb/StatementCommand.java/L-212"],"snippet":"{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n            return result;\n        }\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n        return result;\n"},
{"name":"src/org/hsqldb/Scanner.java/L-1618","size":1,"imports":["src/org/hsqldb/Scanner.java/L-1570"],"snippet":"{\n                    int pos = sqlString.indexOf('\\r', currentPosition + 2);\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\\n', currentPosition + 2);\n                    }\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n                    return;\n"},
{"name":"src/org/hsqldb/Scanner.java/L-1570","size":1,"imports":["src/org/hsqldb/Scanner.java/L-1618"],"snippet":"{\n                    int pos = sqlString.indexOf('\\r', currentPosition + 2);\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\\n', currentPosition + 2);\n                    }\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n                    return;\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-1029","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-915"],"snippet":"Conn.commit();\n                return aBalance;\n            } catch (Exception E) {\n                if (verbose) {\n                    System.out.println(\"Transaction failed: \"\n                                       + E.getMessage());\n                    E.printStackTrace();\n                }\n                incrementFailedTransactionCount();\n                try {\n                    Conn.rollback();\n                } catch (SQLException E1) {}\n            }\n            return 0;\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-915","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-1029"],"snippet":"Conn.commit();\n                return aBalance;\n            } catch (Exception E) {\n                if (verbose) {\n                    System.out.println(\"Transaction failed: \"\n                                       + E.getMessage());\n                    E.printStackTrace();\n                }\n                incrementFailedTransactionCount();\n                try {\n                    Conn.rollback();\n                } catch (SQLException E1) {}\n            }\n            return 0;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-186","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-134"],"snippet":"adjustLobUsage(session);\n            persistCommit(session);\n            int newLimit = session.rowActionList.size();\n            if (newLimit > limit) {\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, limit, newLimit,\n                                 session.actionTimestamp);\n                finaliseRows(session, list, limit, newLimit);\n                session.rowActionList.setSize(limit);\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-134","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-186"],"snippet":"adjustLobUsage(session);\n            persistCommit(session);\n            int newLimit = session.rowActionList.size();\n            if (newLimit > limit) {\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, limit, newLimit,\n                                 session.actionTimestamp);\n                finaliseRows(session, list, limit, newLimit);\n                session.rowActionList.setSize(limit);\n"},
{"name":"src/org/hsqldb/ParserBase.java/L-802","size":1,"imports":["src/org/hsqldb/ParserBase.java/L-775"],"snippet":"String tokenS;\n        if (token.charsetSchema != null) {\n            tokenS = token.charsetSchema;\n        } else if (token.charsetName != null) {\n            tokenS = token.charsetName;\n        } else if (token.namePrePrefix != null) {\n            tokenS = token.namePrePrefix;\n        } else if (token.namePrefix != null) {\n            tokenS = token.namePrefix;\n        } else {\n            tokenS = token.tokenString;\n"},
{"name":"src/org/hsqldb/ParserBase.java/L-775","size":1,"imports":["src/org/hsqldb/ParserBase.java/L-802"],"snippet":"String tokenS;\n        if (token.charsetSchema != null) {\n            tokenS = token.charsetSchema;\n        } else if (token.charsetName != null) {\n            tokenS = token.charsetName;\n        } else if (token.namePrePrefix != null) {\n            tokenS = token.namePrePrefix;\n        } else if (token.namePrefix != null) {\n            tokenS = token.namePrefix;\n        } else {\n            tokenS = token.tokenString;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-5425","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-5385"],"snippet":"if (token.tokenType == Tokens.COMMA) {\n                readThis(Tokens.COMMA);\n            } else if (token.tokenType == Tokens.CLOSEBRACKET) {\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-5385","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-5425"],"snippet":"if (token.tokenType == Tokens.COMMA) {\n                readThis(Tokens.COMMA);\n            } else if (token.tokenType == Tokens.CLOSEBRACKET) {\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n"},
{"name":"src/org/hsqldb/scriptio/ScriptWriterEncode.java/L-81","size":1,"imports":["src/org/hsqldb/scriptio/ScriptWriterEncode.java/L-64"],"snippet":"try {\n            cryptOut = crypto.getOutputStream(fileStreamOut);\n            fileStreamOut = new GZIPOutputStream(cryptOut);\n            isCrypt       = true;\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"},
{"name":"src/org/hsqldb/scriptio/ScriptWriterEncode.java/L-64","size":1,"imports":["src/org/hsqldb/scriptio/ScriptWriterEncode.java/L-81"],"snippet":"try {\n            cryptOut = crypto.getOutputStream(fileStreamOut);\n            fileStreamOut = new GZIPOutputStream(cryptOut);\n            isCrypt       = true;\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"},
{"name":"src/org/hsqldb/StatementSimple.java/L-121","size":1,"imports":["src/org/hsqldb/StatementSchemaDefinition.java/L-59"],"snippet":"{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"},
{"name":"src/org/hsqldb/StatementSchemaDefinition.java/L-59","size":1,"imports":["src/org/hsqldb/StatementSimple.java/L-121"],"snippet":"{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"},
{"name":"src/org/hsqldb/DatabaseManager.java/L-372","size":1,"imports":["src/org/hsqldb/DatabaseManager.java/L-310"],"snippet":"if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\");\n"},
{"name":"src/org/hsqldb/DatabaseManager.java/L-310","size":1,"imports":["src/org/hsqldb/DatabaseManager.java/L-372"],"snippet":"if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\");\n"},
{"name":"src/org/hsqldb/lib/HsqlByteArrayOutputStream.java/L-170","size":1,"imports":["src/org/hsqldb/lib/HsqlByteArrayOutputStream.java/L-111"],"snippet":"{\n        ensureRoom(2);\n        buffer[count++] = (byte) (v >>> 8);\n        buffer[count++] = (byte) v;\n"},
{"name":"src/org/hsqldb/lib/HsqlByteArrayOutputStream.java/L-111","size":1,"imports":["src/org/hsqldb/lib/HsqlByteArrayOutputStream.java/L-170"],"snippet":"{\n        ensureRoom(2);\n        buffer[count++] = (byte) (v >>> 8);\n        buffer[count++] = (byte) v;\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1590","size":1,"imports":["src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1538","size":1,"imports":["src/org/hsqldb/test/TestOdbcTypes.java/L-1590"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-1800","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-1685"],"snippet":"if (token.tokenType == Tokens.AND) {\n                read();\n                if (token.tokenType == Tokens.NO) {\n                    read();\n                } else {\n                    chain = true;\n                }\n                readThis(Tokens.CHAIN);\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-1685","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-1800"],"snippet":"if (token.tokenType == Tokens.AND) {\n            read();\n            if (token.tokenType == Tokens.NO) {\n                read();\n            } else {\n                chain = true;\n            }\n            readThis(Tokens.CHAIN);\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1116","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1068"],"snippet":"Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1068","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1116"],"snippet":"Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"},
{"name":"src/org/hsqldb/ParserDML.java/L-283","size":1,"imports":["src/org/hsqldb/ParserDML.java/L-206"],"snippet":"if (table != baseTable) {\n            int[] baseColumnMap = table.getBaseTableColumnMap();\n            int[] newColumnMap  = new int[columnMap.length];\n            ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);\n            columnMap = newColumnMap;\n"},
{"name":"src/org/hsqldb/ParserDML.java/L-206","size":1,"imports":["src/org/hsqldb/ParserDML.java/L-283"],"snippet":"if (table != baseTable) {\n                    int[] baseColumnMap = table.getBaseTableColumnMap();\n                    int[] newColumnMap  = new int[columnMap.length];\n                    ArrayUtil.projectRow(baseColumnMap, columnMap,\n                                         newColumnMap);\n                    columnMap = newColumnMap;\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-1102","size":1,"imports":["src/org/hsqldb/Expression.java/L-969"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                if (nodes[i].hasReference(range)) {\n                    return true;\n"},
{"name":"src/org/hsqldb/Expression.java/L-969","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-1102"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                if (nodes[i].hasReference(range)) {\n                    return true;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3817","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4426"],"snippet":"{\n            row[data_type] = \"INTERVAL\";\n            row[interval_type] =\n                ((IntervalType) type).getQualifier(type.typeCode);\n            row[interval_precision] = ValuePool.getLong(type.precision);\n            row[datetime_precision] = ValuePool.getLong(type.scale);\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4426","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3817"],"snippet":"{\n                        row[data_type] = \"INTERVAL\";\n                        row[interval_type] =\n                            ((IntervalType) type).getQualifier(type.typeCode);\n                        row[interval_precision] =\n                            ValuePool.getLong(type.precision);\n                        row[datetime_precision] =\n                            ValuePool.getLong(type.scale);\n"},
{"name":"src/org/hsqldb/util/DatabaseManager.java/L-927","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-1744"],"snippet":"if (r == null) {\n            String[] g = new String[1];\n            g[0] = \"Result\";\n            gResult.setHead(g);\n            g[0] = \"(empty)\";\n            gResult.addRow(g);\n            return;\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-1744","size":1,"imports":["src/org/hsqldb/util/DatabaseManager.java/L-927"],"snippet":"if (r == null) {\n            String[] g = new String[1];\n            g[0] = \"Result\";\n            gResult.setHead(g);\n            g[0] = \"(empty)\";\n            gResult.addRow(g);\n            return;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCClobFile.java/L-260","size":1,"imports":["src/org/hsqldb/jdbc/JDBCBlobFile.java/L-190"],"snippet":"if (start < 1) {\n            throw JDBCUtil.outOfRangeArgument(\"start: \" + start);\n        } else if (pattern == null || pattern.length == 0\n                   || start > length()) {\n            return -1L;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCBlobFile.java/L-190","size":1,"imports":["src/org/hsqldb/jdbc/JDBCClobFile.java/L-260"],"snippet":"if (start < 1) {\n            throw JDBCUtil.outOfRangeArgument(\"start: \" + start);\n        } else if (pattern == null || pattern.length == 0\n                   || start > length()) {\n            return -1L;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-124","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-97"],"snippet":"session.actionTimestamp = getNextGlobalChangeTimestamp();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.prepareCommit(session);\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-97","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-124"],"snippet":"session.actionTimestamp = getNextGlobalChangeTimestamp();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.prepareCommit(session);\n"},
{"name":"src/org/hsqldb/test/TestOdbcService.java/L-137","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcService.java/L-148","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcService.java/L-239","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcService.java/L-324","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcService.java/L-343","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/AbstractTestOdbc.java/L-195","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-154","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-184","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-214","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-243","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-307","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-336","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-365","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-394","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-423","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-453","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-483","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-514","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-543","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-605","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-635","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-664","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-692","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-725","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) { junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-760","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-798","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-831","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-871","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-911","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-952","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-992","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1037","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1077","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1117","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1157","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1197","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1279","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1321","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1368","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1410","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1590","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1590","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1538"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-1538","size":1,"imports":["src/org/hsqldb/test/TestOdbcService.java/L-137","src/org/hsqldb/test/TestOdbcService.java/L-148","src/org/hsqldb/test/TestOdbcService.java/L-239","src/org/hsqldb/test/TestOdbcService.java/L-324","src/org/hsqldb/test/TestOdbcService.java/L-343","src/org/hsqldb/test/AbstractTestOdbc.java/L-195","src/org/hsqldb/test/TestOdbcTypes.java/L-154","src/org/hsqldb/test/TestOdbcTypes.java/L-184","src/org/hsqldb/test/TestOdbcTypes.java/L-214","src/org/hsqldb/test/TestOdbcTypes.java/L-243","src/org/hsqldb/test/TestOdbcTypes.java/L-307","src/org/hsqldb/test/TestOdbcTypes.java/L-336","src/org/hsqldb/test/TestOdbcTypes.java/L-365","src/org/hsqldb/test/TestOdbcTypes.java/L-394","src/org/hsqldb/test/TestOdbcTypes.java/L-423","src/org/hsqldb/test/TestOdbcTypes.java/L-453","src/org/hsqldb/test/TestOdbcTypes.java/L-483","src/org/hsqldb/test/TestOdbcTypes.java/L-514","src/org/hsqldb/test/TestOdbcTypes.java/L-543","src/org/hsqldb/test/TestOdbcTypes.java/L-605","src/org/hsqldb/test/TestOdbcTypes.java/L-635","src/org/hsqldb/test/TestOdbcTypes.java/L-664","src/org/hsqldb/test/TestOdbcTypes.java/L-692","src/org/hsqldb/test/TestOdbcTypes.java/L-725","src/org/hsqldb/test/TestOdbcTypes.java/L-760","src/org/hsqldb/test/TestOdbcTypes.java/L-798","src/org/hsqldb/test/TestOdbcTypes.java/L-831","src/org/hsqldb/test/TestOdbcTypes.java/L-871","src/org/hsqldb/test/TestOdbcTypes.java/L-911","src/org/hsqldb/test/TestOdbcTypes.java/L-952","src/org/hsqldb/test/TestOdbcTypes.java/L-992","src/org/hsqldb/test/TestOdbcTypes.java/L-1037","src/org/hsqldb/test/TestOdbcTypes.java/L-1077","src/org/hsqldb/test/TestOdbcTypes.java/L-1117","src/org/hsqldb/test/TestOdbcTypes.java/L-1157","src/org/hsqldb/test/TestOdbcTypes.java/L-1197","src/org/hsqldb/test/TestOdbcTypes.java/L-1279","src/org/hsqldb/test/TestOdbcTypes.java/L-1321","src/org/hsqldb/test/TestOdbcTypes.java/L-1368","src/org/hsqldb/test/TestOdbcTypes.java/L-1410","src/org/hsqldb/test/TestOdbcTypes.java/L-1590"],"snippet":"catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCResultSet.java/L-4928","size":1,"imports":["src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-1408"],"snippet":"{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            if (cal != null) {\n                millis = HsqlDateTime.convertMillisToCalendar(calendar,\n                        millis);\n            }\n        }\n        Timestamp ts = new Timestamp(millis);\n        ts.setNanos(t.getNanos());\n        return ts;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-1408","size":1,"imports":["src/org/hsqldb/jdbc/JDBCResultSet.java/L-4928"],"snippet":"{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            if (cal != null) {\n                millis = HsqlDateTime.convertMillisToCalendar(calendar,\n                        millis);\n            }\n        }\n        Timestamp ts = new Timestamp(millis);\n        ts.setNanos(t.getNanos());\n        return ts;\n"},
{"name":"src/org/hsqldb/types/BlobInputStream.java/L-98","size":1,"imports":["src/org/hsqldb/types/ClobInputStream.java/L-117"],"snippet":"{\n        checkClosed();\n        if (n <= 0) {\n            return 0;\n        }\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n        currentPosition += n;\n        return n;\n    }\n    public int available() {\n        long avail = availableLength - currentPosition;\n        if (avail > Integer.MAX_VALUE) {\n            return Integer.MAX_VALUE;\n        }\n        return (int) avail;\n    }\n    public void close() throws IOException {\n        isClosed = true;\n"},
{"name":"src/org/hsqldb/types/ClobInputStream.java/L-117","size":1,"imports":["src/org/hsqldb/types/BlobInputStream.java/L-98"],"snippet":"{\n        checkClosed();\n        if (n <= 0) {\n            return 0;\n        }\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n        currentPosition += n;\n        return n;\n    }\n    public int available() {\n        long avail = availableLength - currentPosition;\n        if (avail > Integer.MAX_VALUE) {\n            return Integer.MAX_VALUE;\n        }\n        return (int) avail;\n    }\n    public void close() throws IOException {\n        isClosed = true;\n"},
{"name":"src/org/hsqldb/server/WebServer.java/L-128","size":1,"imports":["doc/verbatim/src/org/hsqldb/server/WebServer.java/L-128"],"snippet":"{\n        super(ServerConstants.SC_PROTOCOL_HTTP);\n    }\n    public static void main(String[] args) {\n        HsqlProperties argProps = null;\n        argProps = HsqlProperties.argArrayToProps(args,\n                ServerProperties.sc_key_prefix);\n        String[] errors = argProps.getErrorKeys();\n        if (errors.length != 0) {\n            System.out.println(\"no value for argument:\" + errors[0]);\n            printHelp(\"webserver.help\");\n            return;\n        }\n        String propsPath = argProps.getProperty(ServerProperties.sc_key_props);\n        String propsExtension = \"\";\n        if (propsPath == null) {\n            propsPath      = \"webserver\";\n            propsExtension = \".properties\";\n        }\n        propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);\n        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(\n            ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension);\n        ServerProperties props =\n            fileProps == null\n            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)\n            : fileProps;\n        props.addProperties(argProps);\n        ServerConfiguration.translateDefaultDatabaseProperty(props);\n        ServerConfiguration.translateDefaultNoSystemExitProperty(props);\n        ServerConfiguration.translateAddressProperty(props);\n        Server server = new WebServer();\n        try {\n            server.setProperties(props);\n        } catch (Exception e) {\n            server.printError(\"Failed to set properties\");\n            server.printStackTrace(e);\n            return;\n        }\n        server.print(\"Startup sequence initiated from main() method\");\n        if (fileProps != null) {\n            server.print(\"Loaded properties from [\" + propsPath\n                         + \".properties]\");\n        } else {\n            server.print(\"Could not load properties from file\");\n            server.print(\"Using cli\/default properties only\");\n        }\n        server.start();\n    }\n    public String getDefaultWebPage() {\n        return serverProperties.getProperty(\n            ServerProperties.sc_key_web_default_page);\n    }\n    public String getHelpString() {\n        return ResourceBundleHandler.getString(serverBundleHandle,\n                                               \"webserver.help\");\n    }\n    public String getProductName() {\n        return \"HSQLDB web server\";\n    }\n    public String getProtocol() {\n        return isTls() ? \"HTTPS\"\n                       : \"HTTP\";\n    }\n    public String getWebRoot() {\n        return serverProperties.getProperty(ServerProperties.sc_key_web_root);\n"},
{"name":"doc/verbatim/src/org/hsqldb/server/WebServer.java/L-128","size":1,"imports":["src/org/hsqldb/server/WebServer.java/L-128"],"snippet":"{\n        super(ServerConstants.SC_PROTOCOL_HTTP);\n    }\n    public static void main(String[] args) {\n        HsqlProperties argProps = null;\n        argProps = HsqlProperties.argArrayToProps(args,\n                ServerProperties.sc_key_prefix);\n        String[] errors = argProps.getErrorKeys();\n        if (errors.length != 0) {\n            System.out.println(\"no value for argument:\" + errors[0]);\n            printHelp(\"webserver.help\");\n            return;\n        }\n        String propsPath = argProps.getProperty(ServerProperties.sc_key_props);\n        String propsExtension = \"\";\n        if (propsPath == null) {\n            propsPath      = \"webserver\";\n            propsExtension = \".properties\";\n        }\n        propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);\n        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(\n            ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension);\n        ServerProperties props =\n            fileProps == null\n            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)\n            : fileProps;\n        props.addProperties(argProps);\n        ServerConfiguration.translateDefaultDatabaseProperty(props);\n        ServerConfiguration.translateDefaultNoSystemExitProperty(props);\n        ServerConfiguration.translateAddressProperty(props);\n        Server server = new WebServer();\n        try {\n            server.setProperties(props);\n        } catch (Exception e) {\n            server.printError(\"Failed to set properties\");\n            server.printStackTrace(e);\n            return;\n        }\n        server.print(\"Startup sequence initiated from main() method\");\n        if (fileProps != null) {\n            server.print(\"Loaded properties from [\" + propsPath\n                         + \".properties]\");\n        } else {\n            server.print(\"Could not load properties from file\");\n            server.print(\"Using cli\/default properties only\");\n        }\n        server.start();\n    }\n    public String getDefaultWebPage() {\n        return serverProperties.getProperty(\n            ServerProperties.sc_key_web_default_page);\n    }\n    public String getHelpString() {\n        return ResourceBundleHandler.getString(serverBundleHandle,\n                                               \"webserver.help\");\n    }\n    public String getProductName() {\n        return \"HSQLDB web server\";\n    }\n    public String getProtocol() {\n        return isTls() ? \"HTTPS\"\n                       : \"HTTP\";\n    }\n    public String getWebRoot() {\n        return serverProperties.getProperty(ServerProperties.sc_key_web_root);\n"},
{"name":"src/org/hsqldb/index/IndexAVL.java/L-811","size":1,"imports":["src/org/hsqldb/index/IndexAVL.java/L-766"],"snippet":"{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n                return i;\n"},
{"name":"src/org/hsqldb/index/IndexAVL.java/L-766","size":1,"imports":["src/org/hsqldb/index/IndexAVL.java/L-811"],"snippet":"{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n                return i;\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-238","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-183"],"snippet":"if (baOut.length != baR1.length) {\n                assertTrue(\"Expected array len \" + baR1.length + \", got len \"\n                           + baOut.length, false);\n            }\n            for (int i = 0; i < baOut.length; i++) {\n                if (baOut[i] != baR1[i]) {\n                    assertTrue(\"Expected array len \" + baR1.length\n                               + \", got len \" + baOut.length, false);\n                }\n            }\n            rs.close();\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-183","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-238"],"snippet":"if (baOut.length != baR1.length) {\n                assertTrue(\"Expected array len \" + baR1.length + \", got len \"\n                           + baOut.length, false);\n            }\n            for (int i = 0; i < baOut.length; i++) {\n                if (baOut[i] != baR1[i]) {\n                    assertTrue(\"Expected array len \" + baR1.length\n                               + \", got len \" + baOut.length, false);\n                }\n            }\n            rs.close();\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1110","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1013"],"snippet":"if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n                Object value;\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1013","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1110"],"snippet":"if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n                Object value;\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-260","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-740","src/org/hsqldb/test/TestLobs.java/L-665"],"snippet":"System.out.println(\"Starting (sub-)test: \" + getName());\n        try {\n            String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";\n            String ddl1 =\n                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";\n            statement.execute(ddl0);\n            statement.execute(ddl1);\n        } catch (SQLException e) {}\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-740","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-260","src/org/hsqldb/test/TestLobs.java/L-665"],"snippet":"System.out.println(\"Starting (sub-)test: \" + getName());\n        try {\n            String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";\n            String ddl1 =\n                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";\n            statement.execute(ddl0);\n            statement.execute(ddl1);\n        } catch (SQLException e) {}\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-665","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-260","src/org/hsqldb/test/TestLobs.java/L-740"],"snippet":"System.out.println(\"Starting (sub-)test: \" + getName());\n        try {\n            String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";\n            String ddl1 =\n                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";\n            statement.execute(ddl0);\n            statement.execute(ddl1);\n        } catch (SQLException e) {}\n"},
{"name":"src/org/hsqldb/types/DateTimeType.java/L-1121","size":1,"imports":["src/org/hsqldb/types/DateTimeType.java/L-1071"],"snippet":"if (a == null || b == null) {\n            return null;\n        }\n        if (otherType.isNumberType()) {\n            if (typeCode == Types.SQL_DATE) {\n                b = ((NumberType) otherType).floor(b);\n            }\n            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(\n                IntervalSecondData.oneDay, b);\n"},
{"name":"src/org/hsqldb/types/DateTimeType.java/L-1071","size":1,"imports":["src/org/hsqldb/types/DateTimeType.java/L-1121"],"snippet":"if (a == null || b == null) {\n            return null;\n        }\n        if (otherType.isNumberType()) {\n            if (typeCode == Types.SQL_DATE) {\n                b = ((NumberType) otherType).floor(b);\n            }\n            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(\n                IntervalSecondData.oneDay, b);\n"},
{"name":"src/org/hsqldb/SetFunction.java/L-408","size":1,"imports":["src/org/hsqldb/SetFunction.java/L-352"],"snippet":"if (!NumberType.isInLongLimits(bi)) {\n                            throw Error.error(ErrorCode.X_22015);\n                        }\n                        if (((IntervalType) type).isDaySecondIntervalType()) {\n                            return new IntervalSecondData(bi.longValue(),\n                                                          currentLong,\n                                                          (IntervalType) type,\n                                                          true);\n                        } else {\n                            return IntervalMonthData.newIntervalMonth(\n                                bi.longValue(), (IntervalType) type);\n"},
{"name":"src/org/hsqldb/SetFunction.java/L-352","size":1,"imports":["src/org/hsqldb/SetFunction.java/L-408"],"snippet":"if (!NumberType.isInLongLimits(bi)) {\n                            throw Error.error(ErrorCode.X_22015);\n                        }\n                        if (((IntervalType) type).isDaySecondIntervalType()) {\n                            return new IntervalSecondData(bi.longValue(),\n                                                          currentLong,\n                                                          (IntervalType) type,\n                                                          true);\n                        } else {\n                            return IntervalMonthData.newIntervalMonth(\n                                bi.longValue(), (IntervalType) type);\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-523","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-505"],"snippet":"{\n            for (int j = 0; j < arrb.length; j++) {\n                if (arra[i] == arrb[j]) {\n                    k++;\n                    break;\n                }\n            }\n        }\n        return k;\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-505","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-523"],"snippet":"{\n            for (int j = 0; j < arrb.length; j++) {\n                if (arra[i] == arrb[j]) {\n                    k++;\n                    break;\n                }\n            }\n        }\n        return k;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-1109","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-1017"],"snippet":"if (queryExpression.sortAndSlice == null) {\n                    queryExpression.addSortAndSlice(sortAndSlice);\n                } else {\n                    if (queryExpression.sortAndSlice.hasLimit()) {\n                        if (sortAndSlice.hasLimit()) {\n                            throw Error.error(ErrorCode.X_42549);\n                        }\n                        for (int i = 0; i < sortAndSlice.exprList.size();\n                                i++) {\n                            Expression e =\n                                (Expression) sortAndSlice.exprList.get(i);\n                            queryExpression.sortAndSlice.addOrderExpression(e);\n                        }\n                    } else {\n                        queryExpression.addSortAndSlice(sortAndSlice);\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-1017","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-1109"],"snippet":"if (queryExpression.sortAndSlice == null) {\n            queryExpression.addSortAndSlice(sortAndSlice);\n        } else {\n            if (queryExpression.sortAndSlice.hasLimit()) {\n                if (sortAndSlice.hasLimit()) {\n                    throw Error.error(ErrorCode.X_42549);\n                }\n                for (int i = 0; i < sortAndSlice.exprList.size(); i++) {\n                    Expression e = (Expression) sortAndSlice.exprList.get(i);\n                    queryExpression.sortAndSlice.addOrderExpression(e);\n                }\n            } else {\n                queryExpression.addSortAndSlice(sortAndSlice);\n"},
{"name":"src/org/hsqldb/StatementSet.java/L-270","size":1,"imports":["src/org/hsqldb/StatementExpression.java/L-117","src/org/hsqldb/StatementCompound.java/L-201","src/org/hsqldb/StatementSimple.java/L-106"],"snippet":"{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"},
{"name":"src/org/hsqldb/StatementExpression.java/L-117","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-270","src/org/hsqldb/StatementCompound.java/L-201","src/org/hsqldb/StatementSimple.java/L-106"],"snippet":"{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"},
{"name":"src/org/hsqldb/StatementCompound.java/L-201","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-270","src/org/hsqldb/StatementExpression.java/L-117","src/org/hsqldb/StatementSimple.java/L-106"],"snippet":"{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"},
{"name":"src/org/hsqldb/StatementSimple.java/L-106","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-270","src/org/hsqldb/StatementExpression.java/L-117","src/org/hsqldb/StatementCompound.java/L-201"],"snippet":"{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"},
{"name":"src/org/hsqldb/ExpressionLogical.java/L-943","size":1,"imports":["src/org/hsqldb/ExpressionLogical.java/L-923"],"snippet":"{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[RIGHT].dataType.canConvertFrom(\n                            nodes[LEFT].dataType)) {\n                        nodes[LEFT] = ExpressionOp.getCastExpression(session,\n                                nodes[LEFT], nodes[RIGHT].dataType);\n"},
{"name":"src/org/hsqldb/ExpressionLogical.java/L-923","size":1,"imports":["src/org/hsqldb/ExpressionLogical.java/L-943"],"snippet":"{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[RIGHT].dataType.canConvertFrom(\n                            nodes[LEFT].dataType)) {\n                        nodes[LEFT] = ExpressionOp.getCastExpression(session,\n                                nodes[LEFT], nodes[RIGHT].dataType);\n"},
{"name":"src/org/hsqldb/test/TestStressInsert.java/L-182","size":1,"imports":["src/org/hsqldb/test/TestStressInsert.java/L-159"],"snippet":"if (i % 100 == 0) {\n                long t3 = System.currentTimeMillis();\n                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));\n                t2 = t3;\n            }\n        }\n        System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));\n        shutdown();\n"},
{"name":"src/org/hsqldb/test/TestStressInsert.java/L-159","size":1,"imports":["src/org/hsqldb/test/TestStressInsert.java/L-182"],"snippet":"if (i % 100 == 0) {\n                long t3 = System.currentTimeMillis();\n                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));\n                t2 = t3;\n            }\n        }\n        System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));\n        shutdown();\n"},
{"name":"src/org/hsqldb/jdbc/JDBCResultSet.java/L-4821","size":1,"imports":["src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-1348"],"snippet":"{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);\n            millis = HsqlDateTime.getNormalisedTime(millis);\n        }\n        return new Time(millis);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-1348","size":1,"imports":["src/org/hsqldb/jdbc/JDBCResultSet.java/L-4821"],"snippet":"{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);\n            millis = HsqlDateTime.getNormalisedTime(millis);\n        }\n        return new Time(millis);\n"},
{"name":"src/org/hsqldb/util/DatabaseManager.java/L-974","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-1797"],"snippet":"String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n            if (c != '\\n') {\n                b.append(c);\n            }\n        }\n        all = b.toString();\n        String[] g = new String[4];\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n        gResult.setHead(g);\n        int max = 1;\n        lTime = System.currentTimeMillis() - lTime;\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-1797","size":1,"imports":["src/org/hsqldb/util/DatabaseManager.java/L-974"],"snippet":"String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n            if (c != '\\n') {\n                b.append(c);\n            }\n        }\n        all = b.toString();\n        String[] g = new String[4];\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n        gResult.setHead(g);\n        int max = 1;\n        lTime = System.currentTimeMillis() - lTime;\n"},
{"name":"doc/verbatim/src/org/hsqldb/test/TestBase.java/L-87","size":1,"imports":["src/org/hsqldb/test/TestBase.java/L-87"],"snippet":"{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"},
{"name":"src/org/hsqldb/test/TestBase.java/L-87","size":1,"imports":["doc/verbatim/src/org/hsqldb/test/TestBase.java/L-87"],"snippet":"{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-704","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-690"],"snippet":"parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,\n                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,\n                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,\n                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,\n                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,\n                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,\n                    Tokens.CLOSEBRACKET\n                };\n                break;\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-690","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-704"],"snippet":"parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,\n                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,\n                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,\n                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,\n                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,\n                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,\n                    Tokens.CLOSEBRACKET\n                };\n                break;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-756","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-528"],"snippet":"session.actionTimestamp = getNextGlobalChangeTimestamp();\n            if (!session.isTransaction) {\n                session.transactionTimestamp = session.actionTimestamp;\n                session.isTransaction        = true;\n                liveTransactionTimestamps.addLast(\n                    session.transactionTimestamp);\n                transactionCount++;\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-528","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-756"],"snippet":"session.actionTimestamp = getNextGlobalChangeTimestamp();\n            if (!session.isTransaction) {\n                session.transactionTimestamp = session.actionTimestamp;\n                session.isTransaction        = true;\n                liveTransactionTimestamps.addLast(\n                    session.transactionTimestamp);\n                transactionCount++;\n"},
{"name":"src/org/hsqldb/test/JDBCBench.java/L-832","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-745"],"snippet":"if (abalancesum != bbalancesum || bbalancesum != tbalancesum\n                    || tbalancesum != deltasum) {\n                System.out.println(\"sums don't match!\");\n            } else {\n                System.out.println(\"sums match!\");\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-745","size":1,"imports":["src/org/hsqldb/test/JDBCBench.java/L-832"],"snippet":"if (abalancesum != bbalancesum || bbalancesum != tbalancesum\n                    || tbalancesum != deltasum) {\n                System.out.println(\"sums don't match!\");\n            } else {\n                System.out.println(\"sums match!\");\n"},
{"name":"src/org/hsqldb/index/IndexAVL.java/L-719","size":1,"imports":["src/org/hsqldb/index/IndexAVL.java/L-704"],"snippet":"{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[rowColMap[j]]);\n            if (i != 0) {\n                return i;\n            }\n        }\n        return 0;\n"},
{"name":"src/org/hsqldb/index/IndexAVL.java/L-704","size":1,"imports":["src/org/hsqldb/index/IndexAVL.java/L-719"],"snippet":"{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[rowColMap[j]]);\n            if (i != 0) {\n                return i;\n            }\n        }\n        return 0;\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-2069","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-2052"],"snippet":"if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Number) nodes[0].valueData).intValue();\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-2052","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-2069"],"snippet":"if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Number) nodes[0].valueData).intValue();\n"},
{"name":"src/org/hsqldb/lib/IntValueHashMap.java/L-259","size":1,"imports":["src/org/hsqldb/lib/HashMap.java/L-85","src/org/hsqldb/lib/LongValueHashMap.java/L-210"],"snippet":"{\n        Iterator it = t.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            put(key, t.get(key));\n"},
{"name":"src/org/hsqldb/lib/HashMap.java/L-85","size":1,"imports":["src/org/hsqldb/lib/IntValueHashMap.java/L-259","src/org/hsqldb/lib/LongValueHashMap.java/L-210"],"snippet":"{\n        Iterator it = t.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            put(key, t.get(key));\n"},
{"name":"src/org/hsqldb/lib/LongValueHashMap.java/L-210","size":1,"imports":["src/org/hsqldb/lib/IntValueHashMap.java/L-259","src/org/hsqldb/lib/HashMap.java/L-85"],"snippet":"{\n        Iterator it = t.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            put(key, t.get(key));\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-1704","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-914"],"snippet":"boolean ifNot = false;\n        if (token.tokenType == Tokens.IF) {\n            int position = getPosition();\n            read();\n            if (token.tokenType == Tokens.NOT) {\n                read();\n                readThis(Tokens.EXISTS);\n                ifNot = true;\n            } else {\n                rewind(position);\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-914","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-1704"],"snippet":"boolean ifNot = false;\n        if (token.tokenType == Tokens.IF) {\n            int position = getPosition();\n            read();\n            if (token.tokenType == Tokens.NOT) {\n                read();\n                readThis(Tokens.EXISTS);\n                ifNot = true;\n            } else {\n                rewind(position);\n"},
{"name":"src/org/hsqldb/types/NumberType.java/L-910","size":1,"imports":["src/org/hsqldb/types/NumberType.java/L-1123","src/org/hsqldb/types/NumberType.java/L-1072"],"snippet":"double d = ((Number) a).doubleValue();\n                    if (session instanceof Session) {\n                        if (!((Session) session).database.sqlConvertTruncate) {\n                            d = java.lang.Math.rint(d);\n"},
{"name":"src/org/hsqldb/types/NumberType.java/L-1123","size":1,"imports":["src/org/hsqldb/types/NumberType.java/L-910","src/org/hsqldb/types/NumberType.java/L-1072"],"snippet":"double d = ((Number) a).doubleValue();\n            if (session instanceof Session) {\n                if (!((Session) session).database.sqlConvertTruncate) {\n                    d = java.lang.Math.rint(d);\n"},
{"name":"src/org/hsqldb/types/NumberType.java/L-1072","size":1,"imports":["src/org/hsqldb/types/NumberType.java/L-910","src/org/hsqldb/types/NumberType.java/L-1123"],"snippet":"double d = ((Number) a).doubleValue();\n            if (session instanceof Session) {\n                if (!((Session) session).database.sqlConvertTruncate) {\n                    d = java.lang.Math.rint(d);\n"},
{"name":"src/org/hsqldb/ParserRoutine.java/L-1369","size":1,"imports":["src/org/hsqldb/ParserRoutine.java/L-1749","src/org/hsqldb/ParserRoutine.java/L-1791","src/org/hsqldb/ParserRoutine.java/L-1875","src/org/hsqldb/ParserRoutine.java/L-1823"],"snippet":"if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"},
{"name":"src/org/hsqldb/ParserRoutine.java/L-1749","size":1,"imports":["src/org/hsqldb/ParserRoutine.java/L-1369","src/org/hsqldb/ParserRoutine.java/L-1791","src/org/hsqldb/ParserRoutine.java/L-1875","src/org/hsqldb/ParserRoutine.java/L-1823"],"snippet":"if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"},
{"name":"src/org/hsqldb/ParserRoutine.java/L-1791","size":1,"imports":["src/org/hsqldb/ParserRoutine.java/L-1369","src/org/hsqldb/ParserRoutine.java/L-1749","src/org/hsqldb/ParserRoutine.java/L-1875","src/org/hsqldb/ParserRoutine.java/L-1823"],"snippet":"if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"},
{"name":"src/org/hsqldb/ParserRoutine.java/L-1875","size":1,"imports":["src/org/hsqldb/ParserRoutine.java/L-1369","src/org/hsqldb/ParserRoutine.java/L-1749","src/org/hsqldb/ParserRoutine.java/L-1791","src/org/hsqldb/ParserRoutine.java/L-1823"],"snippet":"if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"},
{"name":"src/org/hsqldb/ParserRoutine.java/L-1823","size":1,"imports":["src/org/hsqldb/ParserRoutine.java/L-1369","src/org/hsqldb/ParserRoutine.java/L-1749","src/org/hsqldb/ParserRoutine.java/L-1791","src/org/hsqldb/ParserRoutine.java/L-1875"],"snippet":"if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"},
{"name":"src/org/hsqldb/result/ResultLob.java/L-416","size":1,"imports":["src/org/hsqldb/result/ResultLob.java/L-393"],"snippet":"result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;\n"},
{"name":"src/org/hsqldb/result/ResultLob.java/L-393","size":1,"imports":["src/org/hsqldb/result/ResultLob.java/L-416"],"snippet":"result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-201","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-245"],"snippet":"if (node.iRight == NO_POS) {\n            return null;\n        }\n        if (node.nRight == null || !node.nRight.isInMemory()) {\n            node.nRight         = findNode(store, node.iRight);\n            node.nRight.nParent = node;\n        }\n        return node.nRight;\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-245","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-201"],"snippet":"if (node.iRight == NO_POS) {\n            return null;\n        }\n        if (node.nRight == null || !node.nRight.isInMemory()) {\n            node.nRight         = findNode(store, node.iRight);\n            node.nRight.nParent = node;\n        }\n        return node.nRight;\n"},
{"name":"src/org/hsqldb/test/TestKarl.java/L-267","size":1,"imports":["src/org/hsqldb/test/TestKarl.java/L-232"],"snippet":"int col_count = rs.getMetaData().getColumnCount();\n        for (int i = 1; i <= col_count; i++) {\n            System.out.print(rs.getMetaData().getColumnLabel(i) + \"\\t\");\n        }\n        System.out.println(\"\");\n        while (rs.next()) {\n            for (int i = 1; i <= col_count; i++) {\n                System.out.print(rs.getObject(i));\n                System.out.print(\"\\t\");\n            }\n            System.out.println(\"\");\n"},
{"name":"src/org/hsqldb/test/TestKarl.java/L-232","size":1,"imports":["src/org/hsqldb/test/TestKarl.java/L-267"],"snippet":"int       col_count = rs.getMetaData().getColumnCount();\n        for (int i = 1; i <= col_count; i++) {\n            System.out.print(rs.getMetaData().getColumnLabel(i) + \"\\t\");\n        }\n        System.out.println(\"\");\n        while (rs.next()) {\n            for (int i = 1; i <= col_count; i++) {\n                System.out.print(rs.getObject(i));\n                System.out.print(\"\\t\");\n            }\n            System.out.println(\"\");\n"},
{"name":"src/org/hsqldb/test/TestDima.java/L-113","size":1,"imports":["src/org/hsqldb/test/TestDima.java/L-103"],"snippet":"while (rs.next()) {\n                System.out.println(rs.getInt(1));\n                System.out.println(rs.getInt(2));\n                System.out.println(rs.getString(3));\n"},
{"name":"src/org/hsqldb/test/TestDima.java/L-103","size":1,"imports":["src/org/hsqldb/test/TestDima.java/L-113"],"snippet":"while (rs.next()) {\n                System.out.println(rs.getInt(1));\n                System.out.println(rs.getInt(2));\n                System.out.println(rs.getString(3));\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-1225","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-1059"],"snippet":"if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n            read();\n            readThis(Tokens.COMMIT);\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n            read();\n            readThis(Tokens.ROWS);\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-1059","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-1225"],"snippet":"if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n            read();\n            readThis(Tokens.COMMIT);\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n            read();\n            readThis(Tokens.ROWS);\n"},
{"name":"src/org/hsqldb/types/BlobInputStream.java/L-75","size":1,"imports":["src/org/hsqldb/types/ClobInputStream.java/L-75"],"snippet":"checkClosed();\n        if (currentPosition >= availableLength) {\n            return -1;\n        }\n        if (buffer == null\n                || currentPosition >= bufferOffset + buffer.length) {\n            try {\n                checkClosed();\n                readIntoBuffer();\n            } catch (Exception e) {\n                throw JavaSystem.toIOException(e);\n"},
{"name":"src/org/hsqldb/types/ClobInputStream.java/L-75","size":1,"imports":["src/org/hsqldb/types/BlobInputStream.java/L-75"],"snippet":"checkClosed();\n        if (currentPosition >= availableLength) {\n            return -1;\n        }\n        if (buffer == null\n                || currentPosition >= bufferOffset + buffer.length) {\n            try {\n                checkClosed();\n                readIntoBuffer();\n            } catch (Exception e) {\n                throw JavaSystem.toIOException(e);\n"},
{"name":"src/org/hsqldb/util/TransferCommon.java/L-135","size":1,"imports":["src/org/hsqldb/util/TransferCommon.java/L-110"],"snippet":"for (int i = 0; i < tTable.size(); i++) {\n                t          = (TransferTable) tTable.elementAt(i);\n                t.tracer   = tracer;\n                t.sourceDb = (TransferDb) sourceDb;\n                t.destDb   = targetDb;\n"},
{"name":"src/org/hsqldb/util/TransferCommon.java/L-110","size":1,"imports":["src/org/hsqldb/util/TransferCommon.java/L-135"],"snippet":"for (int i = 0; i < tTable.size(); i++) {\n                t          = (TransferTable) tTable.elementAt(i);\n                t.tracer   = tracer;\n                t.sourceDb = (TransferDb) sourceDb;\n                t.destDb   = targetDb;\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-2570","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-4131","src/org/hsqldb/ParserDDL.java/L-2676"],"snippet":"if (token.tokenType == Tokens.BY) {\n                        read();\n                        readThis(Tokens.DEFAULT);\n                    } else {\n                        readThis(Tokens.ALWAYS);\n                        generatedAlways = true;\n                    }\n                    readThis(Tokens.AS);\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-4131","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-2570","src/org/hsqldb/ParserDDL.java/L-2676"],"snippet":"if (token.tokenType == Tokens.BY) {\n            read();\n            readThis(Tokens.DEFAULT);\n        } else {\n            readThis(Tokens.ALWAYS);\n            generatedAlways = true;\n        }\n        readThis(Tokens.AS);\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-2676","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-2570","src/org/hsqldb/ParserDDL.java/L-4131"],"snippet":"if (token.tokenType == Tokens.BY) {\n                read();\n                readThis(Tokens.DEFAULT);\n            } else {\n                readThis(Tokens.ALWAYS);\n                generatedAlways = true;\n            }\n            readThis(Tokens.AS);\n"},
{"name":"src/org/hsqldb/StatementCompound.java/L-589","size":1,"imports":["src/org/hsqldb/StatementCompound.java/L-521"],"snippet":"if (result.getErrorCode() == StatementTypes.ITERATE) {\n                    if (result.getMainString() == null) {\n                        continue;\n                    }\n                    if (label != null\n                            && label.name.equals(result.getMainString())) {\n                        continue;\n                    }\n                    break;\n"},
{"name":"src/org/hsqldb/StatementCompound.java/L-521","size":1,"imports":["src/org/hsqldb/StatementCompound.java/L-589"],"snippet":"if (result.getErrorCode() == StatementTypes.ITERATE) {\n                    if (result.getMainString() == null) {\n                        continue;\n                    }\n                    if (label != null\n                            && label.name.equals(result.getMainString())) {\n                        continue;\n                    }\n                    break;\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-546","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-1927","src/org/hsqldb/ParserCommand.java/L-573"],"snippet":"if (!e.getDataType().isCharacterType()) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                if (e.getType() != OpTypes.VALUE\n                        && (e.getType() != OpTypes.SQL_FUNCTION\n                            || !((FunctionSQL) e).isValueFunction())) {\n                    throw Error.error(ErrorCode.X_0P000);\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-1927","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-546","src/org/hsqldb/ParserCommand.java/L-573"],"snippet":"if (!e.getDataType().isCharacterType()) {\n                throw Error.error(ErrorCode.X_0P000);\n            }\n            if (e.getType() != OpTypes.VALUE\n                    && (e.getType() != OpTypes.SQL_FUNCTION\n                        || !((FunctionSQL) e).isValueFunction())) {\n                throw Error.error(ErrorCode.X_0P000);\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-573","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-546","src/org/hsqldb/ParserCommand.java/L-1927"],"snippet":"if (!e.getDataType().isCharacterType()) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                if (e.getType() != OpTypes.VALUE\n                        && (e.getType() != OpTypes.SQL_FUNCTION\n                            || !((FunctionSQL) e).isValueFunction())) {\n                    throw Error.error(ErrorCode.X_0P000);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCResultSet.java/L-7645","size":1,"imports":["src/org/hsqldb/jdbc/JDBCResultSet.java/L-4494"],"snippet":"if (o instanceof Clob) {\n                return (Clob) o;\n            } else if (o instanceof String) {\n                return new JDBCClob((String) o);\n            }\n            throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCResultSet.java/L-4494","size":1,"imports":["src/org/hsqldb/jdbc/JDBCResultSet.java/L-7645"],"snippet":"if (o instanceof Clob) {\n            return (Clob) o;\n        } else if (o instanceof String) {\n            return new JDBCClob((String) o);\n        }\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-2340","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-2758","src/org/hsqldb/cmdline/SqlFile.java/L-2384"],"snippet":"shared.userVars.put(mathMatcher.group(1), Long.toString(\n                                new Calculator(((mathMatcher.groupCount() > 1\n                                && mathMatcher.group(2) != null)\n                                ? mathMatcher.group(2)\n                                : \"\"), shared.userVars).reduce(0, false)));\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-2758","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-2340","src/org/hsqldb/cmdline/SqlFile.java/L-2384"],"snippet":"shared.userVars.put(mathMatcher.group(1), Long.toString(\n                    new Calculator(((mathMatcher.groupCount() > 1\n                    && mathMatcher.group(2) != null) ? mathMatcher.group(2)\n                    : \"\"), shared.userVars).reduce(0, false)));\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-2384","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-2340","src/org/hsqldb/cmdline/SqlFile.java/L-2758"],"snippet":"shared.userVars.put(\n                                        mathMatcher.group(1), Long.toString(\n                                        new Calculator(\n                                        ((mathMatcher.groupCount() > 1\n                                        && mathMatcher.group(2) != null)\n                                        ? mathMatcher.group(2)\n                                        : \"\"),\n                                        shared.userVars).reduce(0, false)));\n"},
{"name":"integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-191","size":1,"imports":["integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-211"],"snippet":"getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"},
{"name":"integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-211","size":1,"imports":["integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-191"],"snippet":"getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n        }\n        public String getAddColumnString() {\n                return \"add column\";\n        }\n        public boolean supportsIdentityColumns() {\n                return true;\n        }\n        public String getIdentityColumnString() {\n                return \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n        }\n        public String getIdentitySelectString() {\n                return \"call identity()\";\n        }\n        public String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n        }\n        public String getForUpdateString() {\n                return \"\";\n        }\n        public boolean supportsUnique() {\n                return false;\n        }\n        public boolean supportsLimit() {\n                return true;\n        }\n        public String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n                        return new StringBuffer( sql.length() + 10 )\n                                        .append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n                                        .toString();\n                }\n        }\n        public boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n        }\n        public boolean supportsIfExistsAfterTableName() {\n                return true;\n        }\n        public boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n        }\n        public boolean supportsSequences() {\n                return true;\n        }\n        public boolean supportsPooledSequences() {\n                return true;\n        }\n        protected String getCreateSequenceString(String sequenceName) {\n                return \"create sequence \" + sequenceName;\n        }\n        protected String getDropSequenceString(String sequenceName) {\n                return \"drop sequence \" + sequenceName;\n        }\n        public String getSelectSequenceNextValString(String sequenceName) {\n                return \"next value for \" + sequenceName;\n        }\n        public String getSequenceNextValString(String sequenceName) {\n                return \"call next value for \" + sequenceName;\n        }\n        public String getQuerySequencesString() {\n                return \"select sequence_name from information_schema.system_sequences\";\n        }\n        public ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n        }\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation \", \" table:\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n                }\n        };\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"},
{"name":"src/org/hsqldb/Table.java/L-2221","size":1,"imports":["src/org/hsqldb/Table.java/L-2199"],"snippet":"{\n        if (!database.isReferentialIntegrity()) {\n            return;\n        }\n        TriggerDef[] trigVec = triggerLists[trigVecIndex];\n        for (int i = 0, size = trigVec.length; i < size; i++) {\n            TriggerDef td         = trigVec[i];\n            boolean    sqlTrigger = td instanceof TriggerDefSQL;\n            if (td.hasOldTable()) {\n            }\n            td.pushPair(session, null, null);\n"},
{"name":"src/org/hsqldb/Table.java/L-2199","size":1,"imports":["src/org/hsqldb/Table.java/L-2221"],"snippet":"{\n        if (!database.isReferentialIntegrity()) {\n            return;\n        }\n        TriggerDef[] trigVec = triggerLists[trigVecIndex];\n        for (int i = 0, size = trigVec.length; i < size; i++) {\n            TriggerDef td         = trigVec[i];\n            boolean    sqlTrigger = td instanceof TriggerDefSQL;\n            if (td.hasOldTable()) {\n            }\n            td.pushPair(session, null, null);\n"},
{"name":"src/org/hsqldb/util/DatabaseManager.java/L-856","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-1636"],"snippet":"{\n                ResultSet rs = sStatement.getResultSet();\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n                    gResult.setHead(g);\n                    String s = t.getMessage();\n                    g[0] = s;\n                    gResult.addRow(g);\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-1636","size":1,"imports":["src/org/hsqldb/util/DatabaseManager.java/L-856"],"snippet":"{\n                ResultSet rs = sStatement.getResultSet();\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n                    gResult.setHead(g);\n                    String s = t.getMessage();\n                    g[0] = s;\n                    gResult.addRow(g);\n"},
{"name":"src/org/hsqldb/persist/RAFileNIO.java/L-134","size":1,"imports":["src/org/hsqldb/persist/RAFileNIO.java/L-192","src/org/hsqldb/persist/RAFileNIO.java/L-171"],"snippet":"catch (Throwable e) {\n            database.logger.logWarningEvent(JVM_ERROR, e);\n            IOException io = new IOException(e.toString());\n            try {\n                io.initCause(e);\n            } catch (Throwable e1) {}\n            throw io;\n"},
{"name":"src/org/hsqldb/persist/RAFileNIO.java/L-192","size":1,"imports":["src/org/hsqldb/persist/RAFileNIO.java/L-134","src/org/hsqldb/persist/RAFileNIO.java/L-171"],"snippet":"catch (Throwable e) {\n            database.logger.logWarningEvent(JVM_ERROR, e);\n            IOException io = new IOException(e.toString());\n            try {\n                io.initCause(e);\n            } catch (Throwable e1) {}\n            throw io;\n"},
{"name":"src/org/hsqldb/persist/RAFileNIO.java/L-171","size":1,"imports":["src/org/hsqldb/persist/RAFileNIO.java/L-134","src/org/hsqldb/persist/RAFileNIO.java/L-192"],"snippet":"catch (Throwable e) {\n            database.logger.logWarningEvent(JVM_ERROR, e);\n            IOException io = new IOException(e.toString());\n            try {\n                io.initCause(e);\n            } catch (Throwable e1) {}\n            throw io;\n"},
{"name":"src/org/hsqldb/StatementExpression.java/L-117","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-270"],"snippet":"{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n    }\n    public Result execute(Session session) {\n        Result result;\n        try {\n            if (subqueries.length > 0) {\n                materializeSubQueries(session);\n            }\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"},
{"name":"src/org/hsqldb/StatementSet.java/L-270","size":1,"imports":["src/org/hsqldb/StatementExpression.java/L-117"],"snippet":"{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n    }\n    public Result execute(Session session) {\n        Result result;\n        try {\n            if (subqueries.length > 0) {\n                materializeSubQueries(session);\n            }\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCConnection.java/L-2213","size":1,"imports":["src/org/hsqldb/jdbc/JDBCConnection.java/L-2124"],"snippet":"checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCConnection.java/L-2124","size":1,"imports":["src/org/hsqldb/jdbc/JDBCConnection.java/L-2213"],"snippet":"checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-469","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-310"],"snippet":"int hash = (int) longKey;\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n        int     index       = hashIndex.getHashIndex(hash);\n        int     lookup      = hashIndex.hashTable[index];\n        int     lastLookup  = -1;\n        Object  returnValue = null;\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-310","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-469"],"snippet":"int hash = (int) longKey;\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n        int    index       = hashIndex.getHashIndex(hash);\n        int    lookup      = hashIndex.hashTable[index];\n        int    lastLookup  = -1;\n        Object returnValue = null;\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-603","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-530"],"snippet":"{\n                reader = dataClob.getCharacterStream();\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }\n            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n            ps = connection.prepareStatement(dml1);\n            sw.zero();\n            sw.start();\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-530","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-603"],"snippet":"{\n                reader = dataClob.getCharacterStream();\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }\n            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n            ps = connection.prepareStatement(dml1);\n            sw.zero();\n            sw.start();\n"},
{"name":"src/org/hsqldb/test/JDBCBench.java/L-919","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-843"],"snippet":"{\n                    if (pstmt1 != null) {\n                        pstmt1.close();\n                    }\n                    if (pstmt2 != null) {\n                        pstmt2.close();\n                    }\n                    if (pstmt3 != null) {\n                        pstmt3.close();\n                    }\n                    if (pstmt4 != null) {\n                        pstmt4.close();\n                    }\n                    if (pstmt5 != null) {\n                        pstmt5.close();\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-843","size":1,"imports":["src/org/hsqldb/test/JDBCBench.java/L-919"],"snippet":"{\n                if (pstmt1 != null) {\n                    pstmt1.close();\n                }\n                if (pstmt2 != null) {\n                    pstmt2.close();\n                }\n                if (pstmt3 != null) {\n                    pstmt3.close();\n                }\n                if (pstmt4 != null) {\n                    pstmt4.close();\n                }\n                if (pstmt5 != null) {\n                    pstmt5.close();\n"},
{"name":"src/org/hsqldb/lib/IntKeyIntValueHashMap.java/L-58","size":1,"imports":["src/org/hsqldb/lib/LongKeyIntValueHashMap.java/L-65"],"snippet":"{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public int get(int key, int defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(int key, int[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = intValueTable[lookup];\n            return true;\n        }\n        return false;\n"},
{"name":"src/org/hsqldb/lib/LongKeyIntValueHashMap.java/L-65","size":1,"imports":["src/org/hsqldb/lib/IntKeyIntValueHashMap.java/L-58"],"snippet":"{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public int get(long key, int defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(long key, int[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = intValueTable[lookup];\n            return true;\n        }\n        return false;\n"},
{"name":"src/org/hsqldb/RowAction.java/L-850","size":1,"imports":["src/org/hsqldb/RowAction.java/L-818"],"snippet":"if (mode == TransactionManager.ACTION_READ) {\n                        actionType = action.ACTION_DELETE;\n                    } else if (mode == TransactionManager.ACTION_DUP) {\n                        actionType = ACTION_INSERT;\n                        session.tempSet.clear();\n                        session.tempSet.add(action);\n                    } else if (mode == TransactionManager.ACTION_REF) {\n                        actionType = ACTION_DELETE;\n"},
{"name":"src/org/hsqldb/RowAction.java/L-818","size":1,"imports":["src/org/hsqldb/RowAction.java/L-850"],"snippet":"if (mode == TransactionManager.ACTION_READ) {\n                        actionType = action.ACTION_DELETE;\n                    } else if (mode == TransactionManager.ACTION_DUP) {\n                        actionType = ACTION_INSERT;\n                        session.tempSet.clear();\n                        session.tempSet.add(action);\n                    } else if (mode == TransactionManager.ACTION_REF) {\n                        actionType = ACTION_DELETE;\n"},
{"name":"src/org/hsqldb/index/NodeAVLDiskLarge.java/L-179","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-223"],"snippet":"if (node.iLeft == NO_POS) {\n            return null;\n        }\n        if (node.nLeft == null || !node.nLeft.isInMemory()) {\n            node.nLeft         = findNode(store, node.iLeft);\n            node.nLeft.nParent = node;\n        }\n        return node.nLeft;\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-223","size":1,"imports":["src/org/hsqldb/index/NodeAVLDiskLarge.java/L-179"],"snippet":"if (node.iLeft == NO_POS) {\n            return null;\n        }\n        if (node.nLeft == null || !node.nLeft.isInMemory()) {\n            node.nLeft         = findNode(store, node.iLeft);\n            node.nLeft.nParent = node;\n        }\n        return node.nLeft;\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-608","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-573"],"snippet":"ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Select \" + (i + 1) + \" : \"\n                                       + (sw.elapsedTime() + 1));\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-573","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-608"],"snippet":"ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Select \" + (i + 1) + \" : \"\n                                       + (sw.elapsedTime() + 1));\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"},
{"name":"src/org/hsqldb/RowAction.java/L-589","size":1,"imports":["src/org/hsqldb/RowAction.java/L-557"],"snippet":"{\n                if (action.type == ACTION_DELETE) {\n                    if (actionType == ACTION_INSERT) {\n                        actionType = ACTION_INSERT_DELETE;\n                    } else {\n                        actionType = action.type;\n                    }\n                } else if (action.type == ACTION_INSERT) {\n                    actionType = action.type;\n                }\n            }\n            action = action.next;\n        } while (action != null);\n        return actionType;\n"},
{"name":"src/org/hsqldb/RowAction.java/L-557","size":1,"imports":["src/org/hsqldb/RowAction.java/L-589"],"snippet":"{\n                if (action.type == ACTION_DELETE) {\n                    if (actionType == ACTION_INSERT) {\n                        actionType = ACTION_INSERT_DELETE;\n                    } else {\n                        actionType = action.type;\n                    }\n                } else if (action.type == ACTION_INSERT) {\n                    actionType = action.type;\n                }\n            }\n            action = action.next;\n        } while (action != null);\n        return actionType;\n"},
{"name":"src/org/hsqldb/util/DatabaseManager.java/L-1120","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-1907"],"snippet":"{\n                b.append(' ');\n            }\n        }\n        b.append(NL);\n        for (int i = 0; i < width; i++) {\n            for (int l = 0; l < size[i]; l++) {\n                b.append('-');\n            }\n            b.append(' ');\n        }\n        b.append(NL);\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-1907","size":1,"imports":["src/org/hsqldb/util/DatabaseManager.java/L-1120"],"snippet":"{\n                b.append(' ');\n            }\n        }\n        b.append(NL);\n        for (int i = 0; i < width; i++) {\n            for (int l = 0; l < size[i]; l++) {\n                b.append('-');\n            }\n            b.append(' ');\n        }\n        b.append(NL);\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-1021","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-1051","src/org/hsqldb/ExpressionColumn.java/L-1038"],"snippet":"{\n                        if (matchIndex < 0) {\n                            matchIndex = i;\n                        } else if (session.database.sqlEnforceRefs) {\n                            String message = getColumnName();\n                            throw Error.error(ErrorCode.X_42580, message);\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-1051","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-1021","src/org/hsqldb/ExpressionColumn.java/L-1038"],"snippet":"{\n                            if (matchIndex < 0) {\n                                matchIndex = i;\n                            } else if (session.database.sqlEnforceRefs) {\n                                String message = getColumnName();\n                                throw Error.error(ErrorCode.X_42580, message);\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-1038","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-1021","src/org/hsqldb/ExpressionColumn.java/L-1051"],"snippet":"{\n                            if (matchIndex < 0) {\n                                matchIndex = i;\n                            } else if (session.database.sqlEnforceRefs) {\n                                String message = getColumnName();\n                                throw Error.error(ErrorCode.X_42580, message);\n"},
{"name":"src/org/hsqldb/RangeVariableResolver.java/L-189","size":1,"imports":["src/org/hsqldb/RangeVariableResolver.java/L-177"],"snippet":"{\n                    int index = rangeVarSet.getIndex(range);\n                    if (index > 0) {\n                        rangeVariables[index].isLeftJoin      = false;\n                        rangeVariables[index - 1].isRightJoin = false;\n"},
{"name":"src/org/hsqldb/RangeVariableResolver.java/L-177","size":1,"imports":["src/org/hsqldb/RangeVariableResolver.java/L-189"],"snippet":"{\n                    int index = rangeVarSet.getIndex(range);\n                    if (index > 0) {\n                        rangeVariables[index].isLeftJoin      = false;\n                        rangeVariables[index - 1].isRightJoin = false;\n"},
{"name":"src/org/hsqldb/test/JDBCBench.java/L-1057","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-1041"],"snippet":"try {\n                        Conn.rollback();\n                    } catch (SQLException E1) {}\n                }\n            }\n            return 0;\n    class MemoryWatcherThread extends Thread {\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n        public MemoryWatcherThread() {\n            this.reset();\n            keep_running = true;\n        }\n        public void reset() {\n            System.gc();\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n            min = max = (currentAlloc - currentFree);\n        }\n        public void end() {\n            keep_running = false;\n        }\n        public void run() {\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n                if (used < min) {\n                    min = used;\n                }\n                if (used > max) {\n                    max = used;\n                }\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-1041","size":1,"imports":["src/org/hsqldb/test/JDBCBench.java/L-1057"],"snippet":"try {\n                    Conn.rollback();\n                } catch (SQLException E1) {}\n            }\n            return 0;\n    class MemoryWatcherThread extends Thread {\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n        public MemoryWatcherThread() {\n            this.reset();\n            keep_running = true;\n        }\n        public void reset() {\n            System.gc();\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n            min = max = (currentAlloc - currentFree);\n        }\n        public void end() {\n            keep_running = false;\n        }\n        public void run() {\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n                if (used < min) {\n                    min = used;\n                }\n                if (used > max) {\n                    max = used;\n                }\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/lib/DoubleIntIndex.java/L-516","size":1,"imports":["src/org/hsqldb/lib/ArraySort.java/L-67"],"snippet":"if (compare < 0) {\n                high = mid;\n            } else if (compare > 0) {\n                low = mid + 1;\n            } else {\n                high  = mid;\n                found = mid;\n"},
{"name":"src/org/hsqldb/lib/ArraySort.java/L-67","size":1,"imports":["src/org/hsqldb/lib/DoubleIntIndex.java/L-516"],"snippet":"if (compare < 0) {\n                high = mid;\n            } else if (compare > 0) {\n                low = mid + 1;\n            } else {\n                high  = mid;\n                found = mid;\n"},
{"name":"src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-488","size":1,"imports":["src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-449"],"snippet":"{\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n        int[] table = new int[pattern.length];\n        int   i     = 2;\n        int   j     = 0;\n        table[0] = -1;\n        table[1] = 0;\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n                i++;\n                j = 0;\n            }\n        }\n        return table;\n"},
{"name":"src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-449","size":1,"imports":["src/org/hsqldb/lib/KMPSearchAlgorithm.java/L-488"],"snippet":"{\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n        final int[] table = new int[pattern.length];\n        int         i     = 2;\n        int         j     = 0;\n        table[0] = -1;\n        table[1] = 0;\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n                i++;\n                j = 0;\n            }\n        }\n        return table;\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java/L-68","size":1,"imports":["src/org/hsqldb/sample/SqlFileEmbedder.java/L-68"],"snippet":"{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"},
{"name":"src/org/hsqldb/sample/SqlFileEmbedder.java/L-68","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java/L-68"],"snippet":"{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-1006","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-954"],"snippet":"historize();\n                        Statement statement = processSQL();\n                        ResultSet rs = null;\n                        if (statement != null) {\n                            try {\n                                rs = statement.getResultSet();\n                            } catch (SQLException se) {\n                                try {\n                                    if (statement != null) statement.close();\n                                } catch (SQLException nse) {\n                                } finally {\n                                    statement = null;\n                                }\n                                throw se;  \/\/ rethrow\n                            }\n                            displaySqlResults(\n                                    statement, rs, null, null, true);\n                        }\n                        continue;\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-954","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-1006"],"snippet":"historize();\n                            Statement statement = processSQL();\n                            ResultSet rs = null;\n                            if (statement != null) {\n                                try {\n                                    rs = statement.getResultSet();\n                                } catch (SQLException se) {\n                                    try {\n                                        if (statement != null)\n                                            statement.close();\n                                    } catch (SQLException nse) {\n                                    } finally {\n                                        statement = null;\n                                    }\n                                    throw se;  \/\/ rethrow\n                                }\n                                displaySqlResults(\n                                        statement, rs, null, null, true);\n                            }\n                        }\n                        continue;\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-260","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-246"],"snippet":"{\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static int find(short[] array, int value) {\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                return i;\n            }\n        }\n        return -1;\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-246","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-260"],"snippet":"{\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static int find(int[] array, int value) {\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                return i;\n            }\n        }\n        return -1;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCArrayBasic.java/L-539","size":1,"imports":["src/org/hsqldb/jdbc/JDBCArray.java/L-585"],"snippet":"RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n            navigator.add(rowData);\n        }\n        Result result = Result.newDataResult(meta);\n        result.setNavigator(navigator);\n        return result;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCArray.java/L-585","size":1,"imports":["src/org/hsqldb/jdbc/JDBCArrayBasic.java/L-539"],"snippet":"RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n            navigator.add(rowData);\n        }\n        Result result = Result.newDataResult(meta);\n        result.setNavigator(navigator);\n        return result;\n"},
{"name":"integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-191","size":1,"imports":["integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-211"],"snippet":"getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"},
{"name":"integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-211","size":1,"imports":["integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-191"],"snippet":"getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n        }\n        public String getAddColumnString() {\n                return \"add column\";\n        }\n        public boolean supportsIdentityColumns() {\n                return true;\n        }\n        public String getIdentityColumnString() {\n                return \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n        }\n        public String getIdentitySelectString() {\n                return \"call identity()\";\n        }\n        public String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n        }\n        public String getForUpdateString() {\n                return \"\";\n        }\n        public boolean supportsUnique() {\n                return false;\n        }\n        public boolean supportsLimit() {\n                return true;\n        }\n        public String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n                        return new StringBuffer( sql.length() + 10 )\n                                        .append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n                                        .toString();\n                }\n        }\n        public boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n        }\n        public boolean supportsIfExistsAfterTableName() {\n                return true;\n        }\n        public boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n        }\n        public boolean supportsSequences() {\n                return true;\n        }\n        public boolean supportsPooledSequences() {\n                return true;\n        }\n        protected String getCreateSequenceString(String sequenceName) {\n                return \"create sequence \" + sequenceName;\n        }\n        protected String getDropSequenceString(String sequenceName) {\n                return \"drop sequence \" + sequenceName;\n        }\n        public String getSelectSequenceNextValString(String sequenceName) {\n                return \"next value for \" + sequenceName;\n        }\n        public String getSequenceNextValString(String sequenceName) {\n                return \"call next value for \" + sequenceName;\n        }\n        public String getQuerySequencesString() {\n                return \"select sequence_name from information_schema.system_sequences\";\n        }\n        public ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n        }\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation \", \" table:\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n                }\n        };\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"},
{"name":"src/org/hsqldb/SetFunction.java/L-184","size":1,"imports":["src/org/hsqldb/SetFunction.java/L-164"],"snippet":"if (Math.abs(currentLong)\n                                >= DTIType.nanoScaleFactors[0]) {\n                            addLong(currentLong \/ DTIType.nanoScaleFactors[0]);\n                            currentLong %= DTIType.nanoScaleFactors[0];\n"},
{"name":"src/org/hsqldb/SetFunction.java/L-164","size":1,"imports":["src/org/hsqldb/SetFunction.java/L-184"],"snippet":"if (Math.abs(currentLong)\n                                    >= DTIType.nanoScaleFactors[0]) {\n                                addLong(currentLong\n                                        \/ DTIType.nanoScaleFactors[0]);\n                                currentLong %= DTIType.nanoScaleFactors[0];\n"},
{"name":"src/org/hsqldb/Table.java/L-2840","size":1,"imports":["src/org/hsqldb/Table.java/L-2798"],"snippet":"if (id == null) {\n                id = (Number) identitySequence.getValueObject();\n                data[identityColumn] = id;\n            } else {\n                identitySequence.userUpdate(id.longValue());\n"},
{"name":"src/org/hsqldb/Table.java/L-2798","size":1,"imports":["src/org/hsqldb/Table.java/L-2840"],"snippet":"if (id == null) {\n                    id = (Number) identitySequence.getValueObject();\n                    data[identityColumn] = id;\n                } else {\n                    identitySequence.userUpdate(id.longValue());\n"},
{"name":"src/org/hsqldb/StatementSchema.java/L-1537","size":1,"imports":["src/org/hsqldb/StatementSchema.java/L-1508"],"snippet":"if (name.schema == null) {\n            name.schema = schemaName == null\n                          ? session.getCurrentSchemaHsqlName()\n                          : schemaName;\n        } else {\n            name.schema = session.getSchemaHsqlName(name.schema.name);\n            if (name.schema == null) {\n                throw Error.error(ErrorCode.X_42505);\n            }\n            if (isSchemaDefinition && schemaName != name.schema) {\n                throw Error.error(ErrorCode.X_42505);\n"},
{"name":"src/org/hsqldb/StatementSchema.java/L-1508","size":1,"imports":["src/org/hsqldb/StatementSchema.java/L-1537"],"snippet":"if (name.schema == null) {\n            name.schema = schemaName == null\n                          ? session.getCurrentSchemaHsqlName()\n                          : schemaName;\n        } else {\n            name.schema = session.getSchemaHsqlName(name.schema.name);\n            if (name.schema == null) {\n                throw Error.error(ErrorCode.X_42505);\n            }\n            if (isSchemaDefinition && schemaName != name.schema) {\n                throw Error.error(ErrorCode.X_42505);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCClobFile.java/L-963","size":1,"imports":["src/org/hsqldb/jdbc/JDBCBlobFile.java/L-770"],"snippet":"{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    protected void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    protected void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"},
{"name":"src/org/hsqldb/jdbc/JDBCBlobFile.java/L-770","size":1,"imports":["src/org/hsqldb/jdbc/JDBCClobFile.java/L-963"],"snippet":"{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    private void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    private void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"},
{"name":"src/org/hsqldb/scriptio/ScriptWriterEncode.java/L-102","size":1,"imports":["src/org/hsqldb/scriptio/ScriptWriterBase.java/L-269"],"snippet":"{\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"},
{"name":"src/org/hsqldb/scriptio/ScriptWriterBase.java/L-269","size":1,"imports":["src/org/hsqldb/scriptio/ScriptWriterEncode.java/L-102"],"snippet":"{\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"},
{"name":"src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-1920","size":1,"imports":["src/org/hsqldb/jdbc/JDBCStatement.java/L-1093"],"snippet":"{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCStatement.java/L-1093","size":1,"imports":["src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-1920"],"snippet":"{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-577","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-351"],"snippet":"rowActionMap.put(object.getPos(), row.rowAction);\n        }\n    }\n    public void setTransactionInfo(PersistentStore store,\n                                   CachedObject object) {\n        if (object.isMemory()) {\n            return;\n        }\n        Row row = (Row) object;\n        if (row.getTable().tableType == TableBase.CACHED_TABLE) {\n            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());\n            row.rowAction = rowact;\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-351","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-577"],"snippet":"rowActionMap.put(object.getPos(), row.rowAction);\n        }\n    }\n    public void setTransactionInfo(PersistentStore store,\n                                   CachedObject object) {\n        if (object.isMemory()) {\n            return;\n        }\n        Row row = (Row) object;\n        if (row.getTable().tableType == TableBase.CACHED_TABLE) {\n            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());\n            row.rowAction = rowact;\n"},
{"name":"src/org/hsqldb/test/TestUtil.java/L-1050","size":1,"imports":["src/org/hsqldb/test/TestUtil.java/L-1358","src/org/hsqldb/test/TestUtil.java/L-1136"],"snippet":"for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n            sb.append(\"+ \" + lines[i]);\n        }\n        TestUtil.expandStamps(sb);\n        return sb.toString().trim();\n"},
{"name":"src/org/hsqldb/test/TestUtil.java/L-1358","size":1,"imports":["src/org/hsqldb/test/TestUtil.java/L-1050","src/org/hsqldb/test/TestUtil.java/L-1136"],"snippet":"for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n            sb.append(\"+ \" + lines[i]);\n        }\n        TestUtil.expandStamps(sb);\n        return sb.toString().trim();\n"},
{"name":"src/org/hsqldb/test/TestUtil.java/L-1136","size":1,"imports":["src/org/hsqldb/test/TestUtil.java/L-1050","src/org/hsqldb/test/TestUtil.java/L-1358"],"snippet":"for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n            sb.append(\"+ \" + lines[i]);\n        }\n        TestUtil.expandStamps(sb);\n        return sb.toString().trim();\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-332","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-359","src/org/hsqldb/index/NodeAVLDisk.java/L-407","src/org/hsqldb/index/NodeAVLDisk.java/L-382"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-359","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-332","src/org/hsqldb/index/NodeAVLDisk.java/L-407","src/org/hsqldb/index/NodeAVLDisk.java/L-382"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-407","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-332","src/org/hsqldb/index/NodeAVLDisk.java/L-359","src/org/hsqldb/index/NodeAVLDisk.java/L-382"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/index/NodeAVLDisk.java/L-382","size":1,"imports":["src/org/hsqldb/index/NodeAVLDisk.java/L-332","src/org/hsqldb/index/NodeAVLDisk.java/L-359","src/org/hsqldb/index/NodeAVLDisk.java/L-407"],"snippet":"NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"},
{"name":"src/org/hsqldb/rights/Grantee.java/L-973","size":1,"imports":["src/org/hsqldb/rights/Grantee.java/L-938"],"snippet":"if (existing == null) {\n                    existing = add.duplicate();\n                    fullRightsMap.put(key, existing);\n                } else {\n                    existing.add(add);\n                }\n                if (add.grantableRights == null) {\n                    continue;\n                }\n                if (existing.grantableRights == null) {\n                    existing.grantableRights = add.grantableRights.duplicate();\n                } else {\n                    existing.grantableRights.add(add.grantableRights);\n"},
{"name":"src/org/hsqldb/rights/Grantee.java/L-938","size":1,"imports":["src/org/hsqldb/rights/Grantee.java/L-973"],"snippet":"if (existing == null) {\n                existing = add.duplicate();\n                fullRightsMap.put(key, existing);\n            } else {\n                existing.add(add);\n            }\n            if (add.grantableRights == null) {\n                continue;\n            }\n            if (existing.grantableRights == null) {\n                existing.grantableRights = add.grantableRights.duplicate();\n            } else {\n                existing.grantableRights.add(add.grantableRights);\n"},
{"name":"src/org/hsqldb/NumberSequence.java/L-236","size":1,"imports":["src/org/hsqldb/NumberSequence.java/L-191"],"snippet":"            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n"},
{"name":"src/org/hsqldb/NumberSequence.java/L-191","size":1,"imports":["src/org/hsqldb/NumberSequence.java/L-236"],"snippet":"        sb.append(Tokens.T_START).append(' ');\n        sb.append(Tokens.T_WITH).append(' ');\n        sb.append(startValue);\n        if (getIncrement() != 1) {\n            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n            sb.append(Tokens.T_BY).append(' ');\n            sb.append(getIncrement());\n        }\n        if (!hasDefaultMinMax()) {\n            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n            sb.append(getMinValue());\n            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n            sb.append(getMaxValue());\n        }\n        if (isCycle()) {\n            sb.append(' ').append(Tokens.T_CYCLE);\n        }\n        if (name == null) {\n            sb.append(Tokens.T_CLOSEBRACKET);\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-553","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-528"],"snippet":"break;\n            }\n        }\n        return k;\n    }\n    public static int countSameElements(char[] arra, int start, char[] arrb) {\n        int k     = 0;\n        int limit = arra.length - start;\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n        return k;\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-528","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-553"],"snippet":"break;\n                }\n            }\n        }\n        return k;\n    }\n    public static int countSameElements(byte[] arra, int start, byte[] arrb) {\n        int k     = 0;\n        int limit = arra.length - start;\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n        return k;\n"},
{"name":"src/org/hsqldb/util/TransferDb.java/L-330","size":1,"imports":["src/org/hsqldb/util/TransferDb.java/L-298"],"snippet":"catch (SQLException e) {\n            result = null;\n        }\n        try {\n            if (result != null) {\n                while (result.next()) {\n                    ret.addElement(result.getString(1));\n                }\n                result.close();\n            }\n        } catch (SQLException e) {\n            throw new DataAccessPointException(e.toString());\n        }\n        return (ret);\n"},
{"name":"src/org/hsqldb/util/TransferDb.java/L-298","size":1,"imports":["src/org/hsqldb/util/TransferDb.java/L-330"],"snippet":"catch (SQLException e) {\n            result = null;\n        }\n        try {\n            if (result != null) {\n                while (result.next()) {\n                    ret.addElement(result.getString(1));\n                }\n                result.close();\n            }\n        } catch (SQLException e) {\n            throw new DataAccessPointException(e.toString());\n        }\n        return (ret);\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-975","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-816"],"snippet":"int count = ntrans;\n            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-816","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-975"],"snippet":"int count = ntrans;\n            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n"},
{"name":"src/org/hsqldb/server/ServerConnection.java/L-1360","size":1,"imports":["src/org/hsqldb/server/ServerConnection.java/L-844"],"snippet":"{\n                            if (rowData[i] == null) {\n                                server.printWithThread(\"R\" + rowNum + \"C\"\n                                    + (i+1) + \" => [null]\");\n                                outPacket.writeInt(-1);\n                            } else {\n                                dataString =\n                                    pgTypes[i].valueString(rowData[i]);\n                                outPacket.writeSized(dataString);\n                                if (server.isTrace()) {\n                                    server.printWithThread(\n                                        \"R\" + rowNum + \"C\" + (i + 1) + \" => (\"\n                                        + rowData[i].getClass().getName()\n                                        + \") [\" + dataString + ']');\n                                }\n                            }\n                        }\n                        outPacket.xmit('D', dataOutput);\n"},
{"name":"src/org/hsqldb/server/ServerConnection.java/L-844","size":1,"imports":["src/org/hsqldb/server/ServerConnection.java/L-1360"],"snippet":"{\n                                if (rowData[i] == null) {\n                                    server.printWithThread(\"R\" + rowNum + \"C\"\n                                        + (i+1) + \" => [null]\");\n                                    outPacket.writeInt(-1);\n                                } else {\n                                    dataString =\n                                        pgTypes[i].valueString(rowData[i]);\n                                    outPacket.writeSized(dataString);\n                                    if (server.isTrace()) {\n                                        server.printWithThread(\n                                            \"R\" + rowNum + \"C\" + (i + 1)\n                                            + \" => (\"\n                                            + rowData[i].getClass().getName()\n                                            + \") [\" + dataString + ']');\n                                    }\n                                }\n                            }\n                            outPacket.xmit('D', dataOutput);\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-613","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-418"],"snippet":"{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-418","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-613"],"snippet":"{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-4508","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-4122"],"snippet":"condlPrint(((j > 0) ? \"  \" : \"\")\n                            + ((j < fieldArray.length - 1 || rightJust[j])\n                               ? StringUtil.toPaddedString(\n                                 fieldArray[j], maxWidth[j], ' ', !rightJust[j])\n                               : fieldArray[j])\n                            , false);\n                }\n                condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n                condlPrintln(\"\", false);\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-4122","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-4508"],"snippet":"condlPrint(((j > 0) ? \"  \" : \"\")\n                                    + ((j < fieldArray.length - 1\n                                        || rightJust[j])\n                                       ? StringUtil.toPaddedString(\n                                         fieldArray[j], maxWidth[j],\n                                         ' ', !rightJust[j])\n                                       : fieldArray[j])\n                                    , false);\n                        }\n                        condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n                        condlPrintln(\"\", false);\n"},
{"name":"src/org/hsqldb/test/TestUpdatableResultSets.java/L-246","size":1,"imports":["src/org/hsqldb/test/TestUpdatableResultSets.java/L-259","src/org/hsqldb/test/TestUpdatableResultSets.java/L-277","src/org/hsqldb/test/TestUpdatableResultSets.java/L-268"],"snippet":"while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"},
{"name":"src/org/hsqldb/test/TestUpdatableResultSets.java/L-259","size":1,"imports":["src/org/hsqldb/test/TestUpdatableResultSets.java/L-246","src/org/hsqldb/test/TestUpdatableResultSets.java/L-277","src/org/hsqldb/test/TestUpdatableResultSets.java/L-268"],"snippet":"while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"},
{"name":"src/org/hsqldb/test/TestUpdatableResultSets.java/L-277","size":1,"imports":["src/org/hsqldb/test/TestUpdatableResultSets.java/L-246","src/org/hsqldb/test/TestUpdatableResultSets.java/L-259","src/org/hsqldb/test/TestUpdatableResultSets.java/L-268"],"snippet":"while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"},
{"name":"src/org/hsqldb/test/TestUpdatableResultSets.java/L-268","size":1,"imports":["src/org/hsqldb/test/TestUpdatableResultSets.java/L-246","src/org/hsqldb/test/TestUpdatableResultSets.java/L-259","src/org/hsqldb/test/TestUpdatableResultSets.java/L-277"],"snippet":"while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCResultSet.java/L-1924","size":1,"imports":["src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-4266"],"snippet":"if (o == null) {\n            return null;\n        }\n        if (o instanceof ClobDataID) {\n            return ((ClobDataID) o).getCharacterStream(session);\n        } else if (o instanceof Clob) {\n            return ((Clob) o).getCharacterStream();\n        } else if (o instanceof String) {\n            return new StringReader((String) o);\n        }\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"},
{"name":"src/org/hsqldb/jdbc/JDBCCallableStatement.java/L-4266","size":1,"imports":["src/org/hsqldb/jdbc/JDBCResultSet.java/L-1924"],"snippet":"if (o == null) {\n            return null;\n        }\n        if (o instanceof ClobDataID) {\n            return ((ClobDataID) o).getCharacterStream(session);\n        } else if (o instanceof Clob) {\n            return ((Clob) o).getCharacterStream();\n        } else if (o instanceof String) {\n            return new StringReader((String) o);\n        }\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"},
{"name":"src/org/hsqldb/server/Server.java/L-948","size":1,"imports":["src/org/hsqldb/server/Server.java/L-903"],"snippet":"try {\n            setProperties(p);\n        } catch (Exception e) {\n            throw Error.error(e, ErrorCode.GENERAL_ERROR,\n                              ErrorCode.M_Message_Pair,\n                              new String[]{ \"Failed to set properties\" });\n"},
{"name":"src/org/hsqldb/server/Server.java/L-903","size":1,"imports":["src/org/hsqldb/server/Server.java/L-948"],"snippet":"try {\n            setProperties(p);\n        } catch (Exception e) {\n            throw Error.error(e, ErrorCode.GENERAL_ERROR,\n                              ErrorCode.M_Message_Pair,\n                              new String[]{ \"Failed to set properties\" });\n"},
{"name":"src/org/hsqldb/lib/StringUtil.java/L-222","size":1,"imports":["src/org/hsqldb/lib/StringUtil.java/L-274","src/org/hsqldb/lib/StringUtil.java/L-256"],"snippet":"for (int i = 0; i < len; i++) {\n            sb.append(quote);\n            sb.append(s[i]);\n            sb.append(quote);\n            if (i + 1 < len) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n"},
{"name":"src/org/hsqldb/lib/StringUtil.java/L-274","size":1,"imports":["src/org/hsqldb/lib/StringUtil.java/L-222","src/org/hsqldb/lib/StringUtil.java/L-256"],"snippet":"for (int i = 0; i < len; i++) {\n            sb.append(quote);\n            sb.append(s[i]);\n            sb.append(quote);\n            if (i + 1 < len) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n"},
{"name":"src/org/hsqldb/lib/StringUtil.java/L-256","size":1,"imports":["src/org/hsqldb/lib/StringUtil.java/L-222","src/org/hsqldb/lib/StringUtil.java/L-274"],"snippet":"for (int i = 0; i < len; i++) {\n            sb.append(quote);\n            sb.append(s[i]);\n            sb.append(quote);\n            if (i + 1 < len) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-471","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-445"],"snippet":"            try {\n                InputStream fis =\n                    getClass().getResourceAsStream(resourceFileName);\n                fis    = getClass().getResourceAsStream(resourceFileName);\n                reader = new InputStreamReader(fis, \"ISO-8859-1\");\n                for (int i = 0; i < 100; i++) {\n                    reader.read();\n                }\n            } catch (Exception e) {}\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-445","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-471"],"snippet":"try {\n                InputStream fis =\n                    getClass().getResourceAsStream(resourceFileName);\n                fis    = getClass().getResourceAsStream(resourceFileName);\n                reader = new InputStreamReader(fis, \"ISO-8859-1\");\n                for (int i = 0; i < 100; i++) {\n                    reader.read();\n                }\n            } catch (Exception e) {}\n"},
{"name":"src/org/hsqldb/util/ConnectionDialogSwing.java/L-359","size":1,"imports":["src/org/hsqldb/util/ConnectionDialog.java/L-159"],"snippet":"if (setting != null) {\n                mName.setText(setting.getName());\n                mDriver.setText(setting.getDriver());\n                mURL.setText(setting.getUrl());\n                mUser.setText(setting.getUser());\n                mPassword.setText(setting.getPassword());\n"},
{"name":"src/org/hsqldb/util/ConnectionDialog.java/L-159","size":1,"imports":["src/org/hsqldb/util/ConnectionDialogSwing.java/L-359"],"snippet":"if (setting != null) {\n                    mName.setText(setting.getName());\n                    mDriver.setText(setting.getDriver());\n                    mURL.setText(setting.getUrl());\n                    mUser.setText(setting.getUser());\n                    mPassword.setText(setting.getPassword());\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-764","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-852","src/org/hsqldb/test/TestCacheSize.java/L-810"],"snippet":"ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Update \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-852","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-764","src/org/hsqldb/test/TestCacheSize.java/L-810"],"snippet":"ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Update \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-810","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-764","src/org/hsqldb/test/TestCacheSize.java/L-852"],"snippet":"ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Update \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-945","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-892"],"snippet":"ps.setInt(1, random);\n                count += ps.executeUpdate();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"delete \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"},
{"name":"src/org/hsqldb/test/TestCacheSize.java/L-892","size":1,"imports":["src/org/hsqldb/test/TestCacheSize.java/L-945"],"snippet":"                ps.setInt(1, random);\n                count += ps.executeUpdate();\n                if ((i + 1) % 10000 == 0) {\n                    Statement st = cConnection.createStatement();\n                    st.execute(\"CHECKPOINT DEFRAG\");\n                    st.close();\n                }\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"delete \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-4489","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-4096"],"snippet":"if (!htmlMode) {\n                for (int i = 0; i < headerArray.length; i++)\n                    condlPrint(((i > 0) ? \"  \" : \"\")\n                            + SqlFile.divider(maxWidth[i]), false);\n                condlPrintln(\"\", false);\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-4096","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-4489"],"snippet":"if (!htmlMode) {\n                            for (int i = 0; i < headerArray.length; i++)\n                                condlPrint(((i > 0) ? \"  \"\n                                                    : \"\") + SqlFile.divider(\n                                                        maxWidth[i]), false);\n                            condlPrintln(\"\", false);\n"},
{"name":"src/org/hsqldb/server/Server.java/L-1882","size":1,"imports":["src/org/hsqldb/server/Server.java/L-1830"],"snippet":"printError(\"Database [index=\" + i + \", db=\" + dbType[i]\n                           + dbPath[i] + \", alias=\" + dbAlias[i]\n                           + \"] did not open: \" + e.toString());\n                setServerError(e);\n"},
{"name":"src/org/hsqldb/server/Server.java/L-1830","size":1,"imports":["src/org/hsqldb/server/Server.java/L-1882"],"snippet":"printError(\"Database [index=\" + i + \", db=\" + dbType[i]\n                       + dbPath[i] + \", alias=\" + dbAlias[i]\n                       + \"] did not open: \" + e.toString());\n            setServerError(e);\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLDiskData.java/L-181","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVL.java/L-171"],"snippet":"{\n        int position = key.getPosition();\n        if (position >= accessorList.length) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");\n        }\n        return accessorList[position];\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVL.java/L-171","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLDiskData.java/L-181"],"snippet":"{\n        int position = key.getPosition();\n        if (position >= accessorList.length) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");\n        }\n        return accessorList[position];\n"},
{"name":"src/org/hsqldb/jdbc/JDBCParameterMetaData.java/L-366","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-754","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-949","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-1708","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2573","src/org/hsqldb/jdbc/JDBCResultSetMetaData.java/L-953","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2728"],"snippet":"{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-754","size":1,"imports":["src/org/hsqldb/jdbc/JDBCParameterMetaData.java/L-366","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-949","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-1708","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2573","src/org/hsqldb/jdbc/JDBCResultSetMetaData.java/L-953","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2728"],"snippet":"{\n                    if (type.isIntervalType()) {\n                        type = ((IntervalType) type).getCharacterType();\n                    } else if (type.isDateTimeTypeWithZone()) {\n                        type = ((DateTimeType) type)\n                            .getDateTimeTypeWithoutZone();\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-949","size":1,"imports":["src/org/hsqldb/jdbc/JDBCParameterMetaData.java/L-366","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-754","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-1708","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2573","src/org/hsqldb/jdbc/JDBCResultSetMetaData.java/L-953","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2728"],"snippet":"{\n                    if (type.isIntervalType()) {\n                        type = ((IntervalType) type).getCharacterType();\n                    } else if (type.isDateTimeTypeWithZone()) {\n                        type = ((DateTimeType) type)\n                            .getDateTimeTypeWithoutZone();\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-1708","size":1,"imports":["src/org/hsqldb/jdbc/JDBCParameterMetaData.java/L-366","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-754","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-949","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2573","src/org/hsqldb/jdbc/JDBCResultSetMetaData.java/L-953","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2728"],"snippet":"{\n                        if (type.isIntervalType()) {\n                            type = ((IntervalType) type).getCharacterType();\n                        } else if (type.isDateTimeTypeWithZone()) {\n                            type = ((DateTimeType) type)\n                                .getDateTimeTypeWithoutZone();\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2573","size":1,"imports":["src/org/hsqldb/jdbc/JDBCParameterMetaData.java/L-366","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-754","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-949","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-1708","src/org/hsqldb/jdbc/JDBCResultSetMetaData.java/L-953","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2728"],"snippet":"{\n                if (type.isIntervalType()) {\n                    type = ((IntervalType) type).getCharacterType();\n                } else if (type.isDateTimeTypeWithZone()) {\n                    type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"},
{"name":"src/org/hsqldb/jdbc/JDBCResultSetMetaData.java/L-953","size":1,"imports":["src/org/hsqldb/jdbc/JDBCParameterMetaData.java/L-366","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-754","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-949","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-1708","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2573","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2728"],"snippet":"{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2728","size":1,"imports":["src/org/hsqldb/jdbc/JDBCParameterMetaData.java/L-366","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-754","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-949","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-1708","src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-2573","src/org/hsqldb/jdbc/JDBCResultSetMetaData.java/L-953"],"snippet":"{\n                if (type.isIntervalType()) {\n                    type = ((IntervalType) type).getCharacterType();\n                } else if (type.isDateTimeTypeWithZone()) {\n                    type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"},
{"name":"src/org/hsqldb/map/ValuePoolHashMap.java/L-249","size":1,"imports":["src/org/hsqldb/map/ValuePoolHashMap.java/L-204"],"snippet":"String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n                accessTable[lookup] = accessCount++;\n                return testValue;\n            }\n        }\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n            return getOrAddString(key);\n"},
{"name":"src/org/hsqldb/map/ValuePoolHashMap.java/L-204","size":1,"imports":["src/org/hsqldb/map/ValuePoolHashMap.java/L-249"],"snippet":"String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n                accessTable[lookup] = accessCount++;\n                return testValue;\n            }\n        }\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n            return getOrAddString(key);\n"},
{"name":"src/org/hsqldb/lib/ArrayUtil.java/L-1674","size":1,"imports":["src/org/hsqldb/persist/RAFile.java/L-490"],"snippet":"{\n        long mask    = 0xffffffffffffffffl << scale;\n        long newSize = value & mask;\n        if (newSize != value) {\n            newSize += 1 << scale;\n        }\n        return newSize;\n"},
{"name":"src/org/hsqldb/persist/RAFile.java/L-490","size":1,"imports":["src/org/hsqldb/lib/ArrayUtil.java/L-1674"],"snippet":"{\n        long mask    = 0xffffffffffffffffl << scale;\n        long newSize = value & mask;\n        if (newSize != value) {\n            newSize += 1 << scale;\n        }\n        return newSize;\n"},
{"name":"integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-191","size":1,"imports":["integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-211"],"snippet":"getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"},
{"name":"integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java/L-211","size":1,"imports":["integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java/L-191"],"snippet":"getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n        }\n        public String getAddColumnString() {\n                return \"add column\";\n        }\n        public boolean supportsIdentityColumns() {\n                return true;\n        }\n        public String getIdentityColumnString() {\n                return \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n        }\n        public String getIdentitySelectString() {\n                return \"call identity()\";\n        }\n        public String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n        }\n        public String getForUpdateString() {\n                return \"\";\n        }\n        public boolean supportsUnique() {\n                return false;\n        }\n        public boolean supportsLimit() {\n                return true;\n        }\n        public String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n                        return new StringBuffer( sql.length() + 10 )\n                                        .append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n                                        .toString();\n                }\n        }\n        public boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n        }\n        public boolean supportsIfExistsAfterTableName() {\n                return true;\n        }\n        public boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n        }\n        public boolean supportsSequences() {\n                return true;\n        }\n        public boolean supportsPooledSequences() {\n                return true;\n        }\n        protected String getCreateSequenceString(String sequenceName) {\n                return \"create sequence \" + sequenceName;\n        }\n        protected String getDropSequenceString(String sequenceName) {\n                return \"drop sequence \" + sequenceName;\n        }\n        public String getSelectSequenceNextValString(String sequenceName) {\n                return \"next value for \" + sequenceName;\n        }\n        public String getSequenceNextValString(String sequenceName) {\n                return \"call next value for \" + sequenceName;\n        }\n        public String getQuerySequencesString() {\n                return \"select sequence_name from information_schema.system_sequences\";\n        }\n        public ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n        }\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation \", \" table:\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n                }\n        };\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-3083","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-2977"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i].dataType == null) {\n                        nodes[i].dataType = Type.SQL_VARCHAR;\n                    } else if (!nodes[i].dataType.isCharacterType()) {\n                        throw Error.error(ErrorCode.X_42561);\n                    }\n                }\n                dataType = Type.SQL_VARCHAR_DEFAULT;\n                break;\n"},
{"name":"src/org/hsqldb/FunctionCustom.java/L-2977","size":1,"imports":["src/org/hsqldb/FunctionCustom.java/L-3083"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i].dataType == null) {\n                        nodes[i].dataType = Type.SQL_VARCHAR;\n                    } else if (!nodes[i].dataType.isCharacterType()) {\n                        throw Error.error(ErrorCode.X_42561);\n                    }\n                }\n                dataType = Type.SQL_VARCHAR_DEFAULT;\n                break;\n"},
{"name":"src/org/hsqldb/types/TimeData.java/L-93","size":1,"imports":["src/org/hsqldb/types/TimestampData.java/L-99"],"snippet":"{\n        long diff = seconds - b.seconds;\n        if (diff == 0) {\n            diff = nanos - b.nanos;\n            if (diff == 0) {\n                return 0;\n            }\n        }\n        return diff > 0 ? 1\n                        : -1;\n"},
{"name":"src/org/hsqldb/types/TimestampData.java/L-99","size":1,"imports":["src/org/hsqldb/types/TimeData.java/L-93"],"snippet":"{\n        long diff = seconds - b.seconds;\n        if (diff == 0) {\n            diff = nanos - b.nanos;\n            if (diff == 0) {\n                return 0;\n            }\n        }\n        return diff > 0 ? 1\n                        : -1;\n"},
{"name":"src/org/hsqldb/types/CharacterType.java/L-439","size":1,"imports":["src/org/hsqldb/types/CharacterType.java/L-418"],"snippet":"if (slen > precision) {\n                    if (getRightTrimSise((String) a, ' ') <= precision) {\n                        return ((String) a).substring(0, (int) precision);\n                    } else {\n                        throw Error.error(ErrorCode.X_22001);\n"},
{"name":"src/org/hsqldb/types/CharacterType.java/L-418","size":1,"imports":["src/org/hsqldb/types/CharacterType.java/L-439"],"snippet":"if (slen > precision) {\n                    if (getRightTrimSise((String) a, ' ') <= precision) {\n                        return ((String) a).substring(0, (int) precision);\n                    } else {\n                        throw Error.error(ErrorCode.X_22001);\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-628","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-591"],"snippet":"HsqlArrayList charsets = null;\n                if (readIfThis(Tokens.FOR)) {\n                    charsets = new HsqlArrayList();\n                    while (true) {\n                        SchemaObject charset =\n                            readSchemaObjectName(SchemaObject.CHARSET);\n                        charsets.add(charset);\n                        if (token.tokenType == Tokens.COMMA) {\n                            read();\n                            continue;\n                        }\n                        break;\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-591","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-628"],"snippet":"HsqlArrayList charsets = null;\n                if (readIfThis(Tokens.FOR)) {\n                    charsets = new HsqlArrayList();\n                    while (true) {\n                        SchemaObject charset =\n                            readSchemaObjectName(SchemaObject.CHARSET);\n                        charsets.add(charset);\n                        if (token.tokenType == Tokens.COMMA) {\n                            read();\n                            continue;\n                        }\n                        break;\n"},
{"name":"src/org/hsqldb/ParserDML.java/L-735","size":1,"imports":["src/org/hsqldb/ParserDML.java/L-692"],"snippet":"{\n                    if (targetTable.colDefaults[columnMap[i]] == null\n                            && targetTable.identityColumn != columnMap[i]) {\n                        throw Error.error(ErrorCode.X_42544);\n"},
{"name":"src/org/hsqldb/ParserDML.java/L-692","size":1,"imports":["src/org/hsqldb/ParserDML.java/L-735"],"snippet":"{\n                        if (targetTable.colDefaults[columnMap[i]] == null\n                                && targetTable.identityColumn\n                                   != columnMap[i]) {\n                            throw Error.error(ErrorCode.X_42544);\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-5232","size":1,"imports":["src/org/hsqldb/ParserDML.java/L-1149"],"snippet":"HsqlArrayList list = new HsqlArrayList();\n        readThis(Tokens.OPENBRACKET);\n        if (token.tokenType == Tokens.CLOSEBRACKET) {\n            read();\n        } else {\n            while (true) {\n                Expression e = XreadValueExpression();\n                list.add(e);\n                if (token.tokenType == Tokens.COMMA) {\n                    read();\n                } else {\n                    readThis(Tokens.CLOSEBRACKET);\n                    break;\n"},
{"name":"src/org/hsqldb/ParserDML.java/L-1149","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-5232"],"snippet":"HsqlArrayList list = new HsqlArrayList();\n                readThis(Tokens.OPENBRACKET);\n                if (token.tokenType == Tokens.CLOSEBRACKET) {\n                    read();\n                } else {\n                    while (true) {\n                        Expression e = XreadValueExpression();\n                        list.add(e);\n                        if (token.tokenType == Tokens.COMMA) {\n                            read();\n                        } else {\n                            readThis(Tokens.CLOSEBRACKET);\n                            break;\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java/L-68","size":1,"imports":["src/org/hsqldb/sample/SqlFileEmbedder.java/L-68"],"snippet":"{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"},
{"name":"src/org/hsqldb/sample/SqlFileEmbedder.java/L-68","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java/L-68"],"snippet":"{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"},
{"name":"src/org/hsqldb/types/ClobType.java/L-159","size":1,"imports":["src/org/hsqldb/types/CharacterType.java/L-502"],"snippet":"{\n            ClobData clob = session.createClob(((String) a).length());\n            clob.setString(session, 0, (String) a);\n            return clob;\n"},
{"name":"src/org/hsqldb/types/CharacterType.java/L-502","size":1,"imports":["src/org/hsqldb/types/ClobType.java/L-159"],"snippet":"{\n                        ClobData clob =\n                            session.createClob(((String) a).length());\n                        clob.setString(session, 0, (String) a);\n                        return clob;\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-759","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-832","src/org/hsqldb/ParserDDL.java/L-797"],"snippet":"if (token.tokenType == Tokens.RESTRICT) {\n                            read();\n                        } else if (token.tokenType == Tokens.CASCADE) {\n                            read();\n                            cascade = true;\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-832","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-759","src/org/hsqldb/ParserDDL.java/L-797"],"snippet":"if (token.tokenType == Tokens.RESTRICT) {\n            read();\n        } else if (token.tokenType == Tokens.CASCADE) {\n            read();\n            cascade = true;\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-797","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-759","src/org/hsqldb/ParserDDL.java/L-832"],"snippet":"if (token.tokenType == Tokens.RESTRICT) {\n            read();\n        } else if (token.tokenType == Tokens.CASCADE) {\n            read();\n            cascade = true;\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-2332","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-2745","src/org/hsqldb/cmdline/SqlFile.java/L-2373"],"snippet":"shared.userVars.put(mathMatcher.group(1), Long.toString(\n                            Calculator.reassignValue(mathMatcher.group(1),\n                            shared.userVars, mathMatcher.group(2),\n                            (mathMatcher.groupCount() < 3)\n                            ? null : mathMatcher.group(3))));\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-2745","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-2332","src/org/hsqldb/cmdline/SqlFile.java/L-2373"],"snippet":"shared.userVars.put(mathMatcher.group(1), Long.toString(\n                    Calculator.reassignValue(mathMatcher.group(1),\n                    shared.userVars, mathMatcher.group(2),\n                    (mathMatcher.groupCount() < 3)\n                    ? null : mathMatcher.group(3))));\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-2373","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-2332","src/org/hsqldb/cmdline/SqlFile.java/L-2745"],"snippet":"shared.userVars.put(\n                                    mathMatcher.group(1), Long.toString(\n                                    Calculator.reassignValue(\n                                    mathMatcher.group(1),\n                                    shared.userVars, mathMatcher.group(2),\n                                    (mathMatcher.groupCount() < 3)\n                                    ? null : mathMatcher.group(3))));\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-1207","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-1178"],"snippet":"{\n            if (isObjectKey) {\n                if (objectKeyTable[lookup] != null) {\n                    return lookup;\n                }\n            } else if (isIntKey) {\n                if (intKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n                }\n            } else {\n                if (longKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n"},
{"name":"src/org/hsqldb/map/BaseHashMap.java/L-1178","size":1,"imports":["src/org/hsqldb/map/BaseHashMap.java/L-1207"],"snippet":"{\n            if (isObjectKey) {\n                if (objectKeyTable[lookup] != null) {\n                    return lookup;\n                }\n            } else if (isIntKey) {\n                if (intKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n                }\n            } else {\n                if (longKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n"},
{"name":"src/org/hsqldb/server/HsqlSocketFactorySecure.java/L-156","size":1,"imports":["src/org/hsqldb/server/HsqlSocketFactorySecure.java/L-126"],"snippet":"if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }\n        return ss;\n"},
{"name":"src/org/hsqldb/server/HsqlSocketFactorySecure.java/L-126","size":1,"imports":["src/org/hsqldb/server/HsqlSocketFactorySecure.java/L-156"],"snippet":"if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }\n        return ss;\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1747","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1760","src/org/hsqldb/FunctionSQL.java/L-1784","src/org/hsqldb/FunctionSQL.java/L-1772"],"snippet":"if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1760","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1747","src/org/hsqldb/FunctionSQL.java/L-1784","src/org/hsqldb/FunctionSQL.java/L-1772"],"snippet":"if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1784","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1747","src/org/hsqldb/FunctionSQL.java/L-1760","src/org/hsqldb/FunctionSQL.java/L-1772"],"snippet":"if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"},
{"name":"src/org/hsqldb/FunctionSQL.java/L-1772","size":1,"imports":["src/org/hsqldb/FunctionSQL.java/L-1747","src/org/hsqldb/FunctionSQL.java/L-1760","src/org/hsqldb/FunctionSQL.java/L-1784"],"snippet":"if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-667","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-437"],"snippet":"synchronized (committedTransactionTimestamps) {\n                if (committedTransactionTimestamps.isEmpty()) {\n                    break;\n                }\n                commitTimestamp = committedTransactionTimestamps.getFirst();\n                if (commitTimestamp < timestamp) {\n                    committedTransactionTimestamps.removeFirst();\n                    actions = (Object[]) committedTransactions.removeFirst();\n                } else {\n                    break;\n                }\n            }\n            mergeTransaction(actions, 0, actions.length, commitTimestamp);\n            finaliseRows(session, actions, 0, actions.length);\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-437","size":1,"imports":["src/org/hsqldb/TransactionManagerMVCC.java/L-667"],"snippet":"synchronized (committedTransactionTimestamps) {\n                if (committedTransactionTimestamps.isEmpty()) {\n                    break;\n                }\n                commitTimestamp = committedTransactionTimestamps.getFirst();\n                if (commitTimestamp < timestamp) {\n                    committedTransactionTimestamps.removeFirst();\n                    actions = (Object[]) committedTransactions.removeFirst();\n                } else {\n                    break;\n                }\n            }\n            mergeTransaction(actions, 0, actions.length, commitTimestamp);\n            finaliseRows(session, actions, 0, actions.length);\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-759","size":1,"imports":["src/org/hsqldb/test/TestOdbcTypes.java/L-724"],"snippet":"assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong\",\n            expectedBytes.length, ba.length);\n        for (int i = 0; i < ba.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong\", expectedBytes[i], ba[i]);\n"},
{"name":"src/org/hsqldb/test/TestOdbcTypes.java/L-724","size":1,"imports":["src/org/hsqldb/test/TestOdbcTypes.java/L-759"],"snippet":"assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) { junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong\",\n            expectedBytes.length, ba.length);\n        for (int i = 0; i < ba.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong\", expectedBytes[i], ba[i]);\n"},
{"name":"src/org/hsqldb/navigator/RowSetNavigatorData.java/L-641","size":1,"imports":["src/org/hsqldb/navigator/RowSetNavigatorClient.java/L-262"],"snippet":"{\n        if (size == table.length) {\n            int        newSize  = size == 0 ? 4\n            Object[][] newTable = new Object[newSize][];\n            System.arraycopy(table, 0, newTable, 0, size);\n            table = newTable;\n"},
{"name":"src/org/hsqldb/navigator/RowSetNavigatorClient.java/L-262","size":1,"imports":["src/org/hsqldb/navigator/RowSetNavigatorData.java/L-641"],"snippet":"{\n        if (size == table.length) {\n            int        newSize  = size == 0 ? 4\n            Object[][] newTable = new Object[newSize][];\n            System.arraycopy(table, 0, newTable, 0, size);\n            table = newTable;\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-1514","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-756"],"snippet":"int delay = 0;\n                if (token.tokenType == Tokens.TRUE) {\n                    delay = database.getProperties().getDefaultWriteDelay();\n                    read();\n                } else if (token.tokenType == Tokens.FALSE) {\n                    delay = 0;\n                    read();\n                } else {\n                    delay = this.readInteger();\n                    if (delay < 0) {\n                        delay = 0;\n                    }\n                    if (token.tokenType == Tokens.MILLIS) {\n                        read();\n                    } else {\n"},
{"name":"src/org/hsqldb/ParserCommand.java/L-756","size":1,"imports":["src/org/hsqldb/ParserCommand.java/L-1514"],"snippet":"int delay = 0;\n                if (token.tokenType == Tokens.TRUE) {\n                    delay = database.getProperties().getDefaultWriteDelay();\n                    read();\n                } else if (token.tokenType == Tokens.FALSE) {\n                    delay = 0;\n                    read();\n                } else {\n                    delay = this.readInteger();\n                    if (delay < 0) {\n                        delay = 0;\n                    }\n                    if (token.tokenType == Tokens.MILLIS) {\n                        read();\n                    } else {\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-133","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-256"],"snippet":"{\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT :\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }\n    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n"},
{"name":"src/org/hsqldb/persist/RowStoreAVLHybrid.java/L-256","size":1,"imports":["src/org/hsqldb/persist/RowStoreAVLHybridExtended.java/L-133"],"snippet":"{\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT :\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }\n    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n"},
{"name":"doc/verbatim/src/org/hsqldb/test/TestBase.java/L-87","size":1,"imports":["src/org/hsqldb/test/TestBase.java/L-87"],"snippet":"{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"},
{"name":"src/org/hsqldb/test/TestBase.java/L-87","size":1,"imports":["doc/verbatim/src/org/hsqldb/test/TestBase.java/L-87"],"snippet":"{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2688","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3441","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3785","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4394","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7933","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5968"],"snippet":"{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3441","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2688","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3785","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4394","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7933","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5968"],"snippet":"{\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] = ValuePool.getLong(type.precision\n                row[character_set_catalog] = database.getCatalogName().name;\n                row[character_set_schema] =\n                    ((CharacterType) type).getCharacterSet().getSchemaName()\n                        .name;\n                row[character_set_name] =\n                    ((CharacterType) type).getCharacterSet().getName().name;\n                row[collation_catalog] = database.getCatalogName().name;\n                row[collation_schema] =\n                    ((CharacterType) type).getCollation().getSchemaName().name;\n                row[collation_name] =\n                    ((CharacterType) type).getCollation().getName().name;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3785","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2688","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3441","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4394","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7933","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5968"],"snippet":"{\n            row[character_maximum_length] = ValuePool.getLong(type.precision);\n            row[character_octet_length] = ValuePool.getLong(type.precision\n            row[character_set_catalog] = database.getCatalogName().name;\n            row[character_set_schema] =\n                ((CharacterType) type).getCharacterSet().getSchemaName().name;\n            row[character_set_name] =\n                ((CharacterType) type).getCharacterSet().getName().name;\n            row[collation_catalog] = database.getCatalogName().name;\n            row[collation_schema] =\n                ((CharacterType) type).getCollation().getSchemaName().name;\n            row[collation_name] =\n                ((CharacterType) type).getCollation().getName().name;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4394","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2688","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3441","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3785","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7933","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5968"],"snippet":"{\n                        row[character_maximum_length] =\n                            ValuePool.getLong(type.precision);\n                        row[character_octet_length] =\n                        row[character_set_catalog] =\n                            database.getCatalogName().name;\n                        row[character_set_schema] =\n                            ((CharacterType) type).getCharacterSet()\n                                .getSchemaName().name;\n                        row[character_set_name] =\n                            ((CharacterType) type).getCharacterSet().getName()\n                                .name;\n                        row[collation_catalog] =\n                            database.getCatalogName().name;\n                        row[collation_schema] =\n                            ((CharacterType) type).getCollation()\n                                .getSchemaName().name;\n                        row[collation_name] =\n                            ((CharacterType) type).getCollation().getName()\n                                .name;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7933","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2688","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3441","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3785","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4394","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5968"],"snippet":"{\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] = ValuePool.getLong(type.precision\n                row[character_set_catalog] = database.getCatalogName().name;\n                row[character_set_schema] =\n                    ((CharacterType) type).getCharacterSet().getSchemaName()\n                        .name;\n                row[character_set_name] =\n                    ((CharacterType) type).getCharacterSet().getName().name;\n                row[collation_catalog] = database.getCatalogName().name;\n                row[collation_schema] =\n                    ((CharacterType) type).getCollation().getSchemaName().name;\n                row[collation_name] =\n                    ((CharacterType) type).getCollation().getName().name;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5968","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2688","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3441","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3785","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-4394","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7933"],"snippet":"{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-3363","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-3337"],"snippet":"return e;\n    }\n    Expression XreadIntervalValueExpression() {\n        Expression e = XreadDateTimeIntervalTerm();\n        while (true) {\n            int type;\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n            read();\n            Expression a = e;\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n        return e;\n"},
{"name":"src/org/hsqldb/ParserDQL.java/L-3337","size":1,"imports":["src/org/hsqldb/ParserDQL.java/L-3363"],"snippet":"return e;\n    }\n    Expression XreadDatetimeValueExpression() {\n        Expression e = XreadDateTimeIntervalTerm();\n        while (true) {\n            int type;\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n            read();\n            Expression a = e;\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n        return e;\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1611","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1599"],"snippet":"if (set.map.size() != 0) {\n                        values = new Object[set.map.size()];\n                        set.map.valuesToArray(values);\n                        objects =\n                            new WrapperIterator(objects,\n                                                new WrapperIterator(values));\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1599","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1611"],"snippet":"if (set.map.size() != 0) {\n                    values = new Object[set.map.size()];\n                    set.map.valuesToArray(values);\n                    objects = new WrapperIterator(objects,\n                                                  new WrapperIterator(values));\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-3241","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-3136"],"snippet":"t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n            return t;\n        }\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n            row = t.getEmptyRowData();\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n            t.insertSys(session, store, row);\n        }\n        return t;\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-3136","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationMain.java/L-3241"],"snippet":"t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n            return t;\n        }\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n            row = t.getEmptyRowData();\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n            t.insertSys(session, store, row);\n        }\n        return t;\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1116","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1068"],"snippet":"Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"},
{"name":"src/org/hsqldb/SchemaManager.java/L-1068","size":1,"imports":["src/org/hsqldb/SchemaManager.java/L-1116"],"snippet":"Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"},
{"name":"src/org/hsqldb/test/TestLibSpeed.java/L-218","size":1,"imports":["src/org/hsqldb/test/TestLibSpeed.java/L-180"],"snippet":"sw.zero();\n            for (int j = 0; j < count; j++) {\n                for (int i = 0; i < sNumeric.length; i++) {\n                    int r = randomgen.nextInt(sNumeric.length);\n                    doubleIntLookup.findFirstEqualKeyIndex(r);\n                    dummy += r;\n                }\n            }\n            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());\n            sw.zero();\n"},
{"name":"src/org/hsqldb/test/TestLibSpeed.java/L-180","size":1,"imports":["src/org/hsqldb/test/TestLibSpeed.java/L-218"],"snippet":"sw.zero();\n            for (int j = 0; j < count; j++) {\n                for (int i = 0; i < sNumeric.length; i++) {\n                    int r = randomgen.nextInt(sNumeric.length);\n                    doubleIntLookup.findFirstEqualKeyIndex(r);\n                    dummy += r;\n                }\n            }\n            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());\n            sw.zero();\n"},
{"name":"src/org/hsqldb/test/JDBCBench.java/L-714","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-622"],"snippet":"E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-622","size":1,"imports":["src/org/hsqldb/test/JDBCBench.java/L-714"],"snippet":"E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"},
{"name":"src/org/hsqldb/lib/FileUtil.java/L-353","size":1,"imports":["src/org/hsqldb/persist/RAFileInJar.java/L-224","src/org/hsqldb/persist/LobStoreInJar.java/L-123"],"snippet":"InputStream fis = null;\n            try {\n                fis = getClass().getResourceAsStream(fileName);\n                if (fis == null) {\n                    ClassLoader cl =\n                        Thread.currentThread().getContextClassLoader();\n                    if (cl != null) {\n                        fis = cl.getResourceAsStream(fileName);\n                    }\n                }\n            } catch (Throwable t) {\n            } finally {\n                if (fis == null) {\n                    throw new FileNotFoundException(fileName);\n"},
{"name":"src/org/hsqldb/persist/RAFileInJar.java/L-224","size":1,"imports":["src/org/hsqldb/lib/FileUtil.java/L-353","src/org/hsqldb/persist/LobStoreInJar.java/L-123"],"snippet":"InputStream fis = null;\n        try {\n            fis = getClass().getResourceAsStream(fileName);\n            if (fis == null) {\n                ClassLoader cl =\n                    Thread.currentThread().getContextClassLoader();\n                if (cl != null) {\n                    fis = cl.getResourceAsStream(fileName);\n                }\n            }\n        } catch (Throwable t) {\n        } finally {\n            if (fis == null) {\n                throw new FileNotFoundException(fileName);\n"},
{"name":"src/org/hsqldb/persist/LobStoreInJar.java/L-123","size":1,"imports":["src/org/hsqldb/lib/FileUtil.java/L-353","src/org/hsqldb/persist/RAFileInJar.java/L-224"],"snippet":"InputStream fis = null;\n        try {\n            fis = getClass().getResourceAsStream(fileName);\n            if (fis == null) {\n                ClassLoader cl =\n                    Thread.currentThread().getContextClassLoader();\n                if (cl != null) {\n                    fis = cl.getResourceAsStream(fileName);\n                }\n            }\n        } catch (Throwable t) {\n        } finally {\n            if (fis == null) {\n                throw new FileNotFoundException(fileName);\n"},
{"name":"src/org/hsqldb/ExpressionColumn.java/L-929","size":1,"imports":["src/org/hsqldb/Expression.java/L-1130"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);\n"},
{"name":"src/org/hsqldb/Expression.java/L-1130","size":1,"imports":["src/org/hsqldb/ExpressionColumn.java/L-929"],"snippet":"for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-4205","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-2825"],"snippet":"if (token.tokenType == Tokens.MAXVALUE) {\n                                sequence.setDefaultMaxValue();\n                            } else if (token.tokenType == Tokens.MINVALUE) {\n                                sequence.setDefaultMinValue();\n                            } else if (token.tokenType == Tokens.CYCLE) {\n                                sequence.setCycle(false);\n                            } else {\n                                throw unexpectedToken();\n"},
{"name":"src/org/hsqldb/ParserDDL.java/L-2825","size":1,"imports":["src/org/hsqldb/ParserDDL.java/L-4205"],"snippet":"if (token.tokenType == Tokens.MAXVALUE) {\n                        sequence.setDefaultMaxValue();\n                    } else if (token.tokenType == Tokens.MINVALUE) {\n                        sequence.setDefaultMinValue();\n                    } else if (token.tokenType == Tokens.CYCLE) {\n                        sequence.setCycle(false);\n                    } else {\n                        throw unexpectedToken();\n"},
{"name":"src/org/hsqldb/ExpressionLogical.java/L-933","size":1,"imports":["src/org/hsqldb/ExpressionLogical.java/L-912"],"snippet":"{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[LEFT].dataType.canConvertFrom(\n                            nodes[RIGHT].dataType)) {\n                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,\n                                nodes[RIGHT], nodes[LEFT].dataType);\n"},
{"name":"src/org/hsqldb/ExpressionLogical.java/L-912","size":1,"imports":["src/org/hsqldb/ExpressionLogical.java/L-933"],"snippet":"{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[LEFT].dataType.canConvertFrom(\n                            nodes[RIGHT].dataType)) {\n                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,\n                                nodes[RIGHT], nodes[LEFT].dataType);\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-759","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-682"],"snippet":"ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"},
{"name":"src/org/hsqldb/test/TestLobs.java/L-682","size":1,"imports":["src/org/hsqldb/test/TestLobs.java/L-759"],"snippet":"ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"},
{"name":"src/org/hsqldb/util/ConnectionDialogCommon.java/L-315","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-172"],"snippet":"{\n                Class c =\n                    Class.forName(\"sun.security.action.GetPropertyAction\");\n                Constructor constructor = c.getConstructor(new Class[]{\n                    String.class });\n                java.security.PrivilegedAction a =\n                    (java.security.PrivilegedAction) constructor.newInstance(\n                        new Object[]{ \"user.home\" });\n                homedir =\n                    (String) java.security.AccessController.doPrivileged(a);\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-172","size":1,"imports":["src/org/hsqldb/util/ConnectionDialogCommon.java/L-315"],"snippet":"{\n            Class c = Class.forName(\"sun.security.action.GetPropertyAction\");\n            Constructor constructor = c.getConstructor(new Class[]{\n                String.class });\n            java.security.PrivilegedAction a =\n                (java.security.PrivilegedAction) constructor.newInstance(\n                    new Object[]{ \"user.home\" });\n            homedir = (String) java.security.AccessController.doPrivileged(a);\n"},
{"name":"src/org/hsqldb/StatementExpression.java/L-94","size":1,"imports":["src/org/hsqldb/StatementSet.java/L-128"],"snippet":"{\n        OrderedHashSet subQueries = null;\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n        subQueries.toArray(subQueryArray);\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n        return subQueryArray;\n"},
{"name":"src/org/hsqldb/StatementSet.java/L-128","size":1,"imports":["src/org/hsqldb/StatementExpression.java/L-94"],"snippet":"{\n        OrderedHashSet subQueries = null;\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n        subQueries.toArray(subQueryArray);\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n        return subQueryArray;\n"},
{"name":"src/org/hsqldb/Session.java/L-1520","size":1,"imports":["src/org/hsqldb/Session.java/L-1460"],"snippet":"updateCounts[count++] = in.getUpdateCount();\n            } else if (in.isData()) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.CALL_RESPONSE) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.ERROR) {\n                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);\n                error        = in;\n                break;\n            } else {\n                throw Error.runtimeError(ErrorCode.U_S0500, \"Session\");\n"},
{"name":"src/org/hsqldb/Session.java/L-1460","size":1,"imports":["src/org/hsqldb/Session.java/L-1520"],"snippet":"updateCounts[count++] = in.getUpdateCount();\n            } else if (in.isData()) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.CALL_RESPONSE) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.ERROR) {\n                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);\n                error        = in;\n                break;\n            } else {\n                throw Error.runtimeError(ErrorCode.U_S0500, \"Session\");\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-1920","size":1,"imports":["src/org/hsqldb/jdbc/JDBCStatement.java/L-1093"],"snippet":"{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"},
{"name":"src/org/hsqldb/jdbc/JDBCStatement.java/L-1093","size":1,"imports":["src/org/hsqldb/jdbc/JDBCPreparedStatement.java/L-1920"],"snippet":"{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-6162","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-6150"],"snippet":"if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new NumberFormatException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"},
{"name":"src/org/hsqldb/cmdline/SqlFile.java/L-6150","size":1,"imports":["src/org/hsqldb/cmdline/SqlFile.java/L-6162"],"snippet":"if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new NumberFormatException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/test/JDBCBench.java/L-714","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-622"],"snippet":"E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-622","size":1,"imports":["src/org/hsqldb/test/JDBCBench.java/L-714"],"snippet":"E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"},
{"name":"src/org/hsqldb/util/DatabaseManager.java/L-244","size":1,"imports":["src/org/hsqldb/util/DatabaseManagerSwing.java/L-466"],"snippet":"System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n        bMustExit = true;\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg   = arg[i].toLowerCase();\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n            i++;\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n                return;\n            } else {\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n"},
{"name":"src/org/hsqldb/util/DatabaseManagerSwing.java/L-466","size":1,"imports":["src/org/hsqldb/util/DatabaseManager.java/L-244"],"snippet":"System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n        bMustExit = true;\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg = arg[i].toLowerCase();\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n            i++;\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n                return;\n            } else {\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n"},
{"name":"src/org/hsqldb/ExpressionOp.java/L-726","size":1,"imports":["src/org/hsqldb/ExpressionOp.java/L-648"],"snippet":"boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            wasEscape = true;\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n                            continue;\n                        }\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            break;\n                        }\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n                        newArray[j++] = array[i];\n"},
{"name":"src/org/hsqldb/ExpressionOp.java/L-648","size":1,"imports":["src/org/hsqldb/ExpressionOp.java/L-726"],"snippet":"boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            wasEscape = true;\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n                            continue;\n                        }\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            break;\n                        }\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n                        newArray[j++] = array[i];\n"},
{"name":"doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/sample/TriggerSample.java/L-166","size":1,"imports":["doc/verbatim/src/org/hsqldb/sample/TriggerSample.java/L-166"],"snippet":"{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"},
{"name":"src/org/hsqldb/jdbc/JDBCClobFile.java/L-635","size":1,"imports":["src/org/hsqldb/jdbc/JDBCBlobFile.java/L-508"],"snippet":"if (randomAccessFile != null) {\n                try {\n                    randomAccessFile.close();\n                } catch (Exception ex) {}\n            }\n        }\n    }\n    public synchronized void free() throws SQLException {\n        if (m_closed) {\n            return;\n        }\n        m_closed = true;\n        final List streams = new ArrayList();\n        streams.addAll(m_streams);\n        m_streams = null;\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            }\n        }\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n"},
{"name":"src/org/hsqldb/jdbc/JDBCBlobFile.java/L-508","size":1,"imports":["src/org/hsqldb/jdbc/JDBCClobFile.java/L-635"],"snippet":"if (randomAccessFile != null) {\n                try {\n                    randomAccessFile.close();\n                } catch (Exception ex) {}\n            }\n        }\n    }\n    public synchronized void free() throws SQLException {\n        if (m_closed) {\n            return;\n        }\n        m_closed = true;\n        final List streams = new ArrayList();\n        streams.addAll(m_streams);\n        m_streams = null;\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            }\n        }\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n"},
{"name":"src/org/hsqldb/server/Servlet.java/L-149","size":1,"imports":["doc/verbatim/src/org/hsqldb/server/Servlet.java/L-149"],"snippet":"{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"},
{"name":"doc/verbatim/src/org/hsqldb/server/Servlet.java/L-149","size":1,"imports":["src/org/hsqldb/server/Servlet.java/L-149"],"snippet":"{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"},
{"name":"src/org/hsqldb/index/IndexAVLMemory.java/L-214","size":1,"imports":["src/org/hsqldb/index/IndexAVL.java/L-903"],"snippet":"compare = compareRowForInsertOrDelete(session, row,\n                                                          currentRow,\n                                                          compareRowId, 0);\n                }\n                if (compare == 0 && session != null && !compareRowId\n                        && session.database.txManager.isMVRows()) {\n                    if (!isEqualReadable(session, store, n)) {\n                        compareRowId = true;\n                        compare = compareRowForInsertOrDelete(session, row,\n                                                              currentRow,\n                                                              compareRowId,\n                                                              colIndex.length);\n"},
{"name":"src/org/hsqldb/index/IndexAVL.java/L-903","size":1,"imports":["src/org/hsqldb/index/IndexAVLMemory.java/L-214"],"snippet":"compare = compareRowForInsertOrDelete(session, row,\n                                                      currentRow,\n                                                      compareRowId, 0);\n                if (compare == 0 && session != null && !compareRowId\n                        && session.database.txManager.isMVRows()) {\n                    if (!isEqualReadable(session, store, n)) {\n                        compareRowId = true;\n                        compare = compareRowForInsertOrDelete(session, row,\n                                                              currentRow,\n                                                              compareRowId,\n                                                              colIndex.length);\n"},
{"name":"src/org/hsqldb/server/Servlet.java/L-149","size":1,"imports":["doc/verbatim/src/org/hsqldb/server/Servlet.java/L-149"],"snippet":"{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"},
{"name":"doc/verbatim/src/org/hsqldb/server/Servlet.java/L-149","size":1,"imports":["src/org/hsqldb/server/Servlet.java/L-149"],"snippet":"{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"},
{"name":"src/org/hsqldb/lib/HsqlDeque.java/L-309","size":1,"imports":["src/org/hsqldb/lib/LongDeque.java/L-301"],"snippet":"{\n        if (i < 0 || i >= elementCount) {\n            throw new IndexOutOfBoundsException();\n        }\n        int index = firstindex + i;\n        if (index >= list.length) {\n            index -= list.length;\n        }\n        return index;\n"},
{"name":"src/org/hsqldb/lib/LongDeque.java/L-301","size":1,"imports":["src/org/hsqldb/lib/HsqlDeque.java/L-309"],"snippet":"{\n        if (i < 0 || i >= elementCount) {\n            throw new IndexOutOfBoundsException();\n        }\n        int index = firstindex + i;\n        if (index >= list.length) {\n            index -= list.length;\n        }\n        return index;\n"},
{"name":"src/org/hsqldb/test/JDBCBench.java/L-189","size":1,"imports":["src/org/hsqldb/test/TestBench.java/L-205"],"snippet":"java.util.Date start = new java.util.Date();\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 \/ 1000D;\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n            MemoryWatcher = new MemoryWatcherThread();\n            MemoryWatcher.start();\n"},
{"name":"src/org/hsqldb/test/TestBench.java/L-205","size":1,"imports":["src/org/hsqldb/test/JDBCBench.java/L-189"],"snippet":"java.util.Date start = new java.util.Date();\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 \/ 1000D;\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n            MemoryWatcher = new MemoryWatcherThread();\n            MemoryWatcher.start();\n"},
{"name":"src/org/hsqldb/TransactionManagerMV2PL.java/L-184","size":1,"imports":["src/org/hsqldb/TransactionManager2PL.java/L-134","src/org/hsqldb/TransactionManagerMVCC.java/L-246"],"snippet":"{\n            writeLock.unlock();\n        }\n    }\n    public void rollbackSavepoint(Session session, int index) {\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n        rollbackPartial(session, start, timestamp);\n"},
{"name":"src/org/hsqldb/TransactionManager2PL.java/L-134","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-184","src/org/hsqldb/TransactionManagerMVCC.java/L-246"],"snippet":"{\n            writeLock.unlock();\n        }\n    }\n    public void rollbackSavepoint(Session session, int index) {\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n        rollbackPartial(session, start, timestamp);\n"},
{"name":"src/org/hsqldb/TransactionManagerMVCC.java/L-246","size":1,"imports":["src/org/hsqldb/TransactionManagerMV2PL.java/L-184","src/org/hsqldb/TransactionManager2PL.java/L-134"],"snippet":"{\n            writeLock.unlock();\n        }\n    }\n    public void rollbackSavepoint(Session session, int index) {\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n        rollbackPartial(session, start, timestamp);\n"},
{"name":"src/org/hsqldb/rights/Grantee.java/L-596","size":1,"imports":["src/org/hsqldb/rights/Grantee.java/L-577"],"snippet":"{\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n    }\n    public void checkTrigger(SchemaObject object, boolean[] checkList) {\n        if (object instanceof Table) {\n            Table table = (Table) object;\n            if (isFullyAccessibleByRole(table.getName())) {\n                return;\n            }\n            Right right = (Right) fullRightsMap.get(table.getName());\n            if (right != null && right.canReference(table, checkList)) {\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n"},
{"name":"src/org/hsqldb/rights/Grantee.java/L-577","size":1,"imports":["src/org/hsqldb/rights/Grantee.java/L-596"],"snippet":"{\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n    }\n    public void checkReferences(SchemaObject object, boolean[] checkList) {\n        if (object instanceof Table) {\n            Table table = (Table) object;\n            if (isFullyAccessibleByRole(table.getName())) {\n                return;\n            }\n            Right right = (Right) fullRightsMap.get(table.getName());\n            if (right != null && right.canReference(table, checkList)) {\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n"},
{"name":"src/org/hsqldb/lib/tar/DbBackup.java/L-147","size":1,"imports":["src/org/hsqldb/lib/tar/TarReader.java/L-102"],"snippet":"String[] patternStrings = null;\n                if (sa.length > firstPatInd) {\n                    patternStrings = new String[sa.length - firstPatInd];\n                    for (int i = firstPatInd; i < sa.length; i++) {\n                        patternStrings[i - firstPatInd] = sa[i];\n"},
{"name":"src/org/hsqldb/lib/tar/TarReader.java/L-102","size":1,"imports":["src/org/hsqldb/lib/tar/DbBackup.java/L-147"],"snippet":"String[] patternStrings = null;\n        if (sa.length > firstPatInd) {\n            patternStrings = new String[sa.length - firstPatInd];\n            for (int i = firstPatInd; i < sa.length; i++) {\n                patternStrings[i - firstPatInd] = sa[i];\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2687","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3440","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7932","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5967"],"snippet":"                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3440","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2687","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7932","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5967"],"snippet":"            if (type.isCharacterType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] = ValuePool.getLong(type.precision\n                row[character_set_catalog] = database.getCatalogName().name;\n                row[character_set_schema] =\n                    ((CharacterType) type).getCharacterSet().getSchemaName()\n                        .name;\n                row[character_set_name] =\n                    ((CharacterType) type).getCharacterSet().getName().name;\n                row[collation_catalog] = database.getCatalogName().name;\n                row[collation_schema] =\n                    ((CharacterType) type).getCollation().getSchemaName().name;\n                row[collation_name] =\n                    ((CharacterType) type).getCollation().getName().name;\n            } else if (type.isNumberType()) {\n                row[numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n                row[declared_numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n                if (type.isExactNumberType()) {\n                    row[numeric_scale] = row[declared_numeric_scale] =\n                        ValuePool.getLong(type.scale);\n                }\n                row[numeric_precision_radix] =\n                    ValuePool.getLong(type.getPrecisionRadix());\n            } else if (type.isBooleanType()) {\n            } else if (type.isDateTimeType()) {\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isIntervalType()) {\n                row[data_type] = \"INTERVAL\";\n                row[interval_type] =\n                    ((IntervalType) type).getQualifier(type.typeCode);\n                row[interval_precision] = ValuePool.getLong(type.precision);\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isBinaryType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isBitType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isArrayType()) {\n                row[maximum_cardinality] =\n                    ValuePool.getLong(type.arrayLimitCardinality());\n                row[data_type] = \"ARRAY\";\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7932","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2687","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3440","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5967"],"snippet":"            if (type.isCharacterType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] = ValuePool.getLong(type.precision\n                row[character_set_catalog] = database.getCatalogName().name;\n                row[character_set_schema] =\n                    ((CharacterType) type).getCharacterSet().getSchemaName()\n                        .name;\n                row[character_set_name] =\n                    ((CharacterType) type).getCharacterSet().getName().name;\n                row[collation_catalog] = database.getCatalogName().name;\n                row[collation_schema] =\n                    ((CharacterType) type).getCollation().getSchemaName().name;\n                row[collation_name] =\n                    ((CharacterType) type).getCollation().getName().name;\n            } else if (type.isNumberType()) {\n                row[numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n                row[declared_numeric_precision] = ValuePool.getLong(\n                    ((NumberType) type).getNumericPrecisionInRadix());\n                if (type.isExactNumberType()) {\n                    row[numeric_scale] = row[declared_numeric_scale] =\n                        ValuePool.getLong(type.scale);\n                }\n                row[numeric_precision_radix] =\n                    ValuePool.getLong(type.getPrecisionRadix());\n            } else if (type.isBooleanType()) {}\n            else if (type.isDateTimeType()) {\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isIntervalType()) {\n                row[data_type] = \"INTERVAL\";\n                row[interval_type] =\n                    ((IntervalType) type).getQualifier(type.typeCode);\n                row[interval_precision] = ValuePool.getLong(type.precision);\n                row[datetime_precision] = ValuePool.getLong(type.scale);\n            } else if (type.isBinaryType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isBitType()) {\n                row[character_maximum_length] =\n                    ValuePool.getLong(type.precision);\n                row[character_octet_length] =\n                    ValuePool.getLong(type.precision);\n            } else if (type.isArrayType()) {\n                row[maximum_cardinality] =\n                    ValuePool.getLong(type.arrayLimitCardinality());\n                row[data_type] = \"ARRAY\";\n"},
{"name":"src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-5967","size":1,"imports":["src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-2687","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-3440","src/org/hsqldb/dbinfo/DatabaseInformationFull.java/L-7932"],"snippet":"                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n"},
{"name":"src/org/hsqldb/lib/ClosableCharArrayWriter.java/L-239","size":1,"imports":["src/org/hsqldb/lib/ClosableByteArrayOutputStream.java/L-203"],"snippet":"out.write(buf, 0, count);\n        }\n    }\n    public synchronized int capacity() throws IOException {\n        checkFreed();\n        return buf.length;\n    }\n    public synchronized void reset() throws IOException {\n        checkClosed();\n        count = 0;\n    }\n    public synchronized void trimToSize() throws IOException {\n        checkFreed();\n        if (buf.length > count) {\n            buf = copyOf(buf, count);\n        }\n    }\n    public synchronized char[] toCharArray() throws IOException {\n        checkFreed();\n        return copyOf(buf, count);\n    }\n    public synchronized int size() throws IOException {\n        return count;\n    }\n    public synchronized void setSize(int newSize) {\n        if (newSize < 0) {\n            throw new ArrayIndexOutOfBoundsException(newSize);\n        } else if (newSize > buf.length) {\n            buf = copyOf(buf, Math.max(buf.length << 1, newSize));\n        }\n        count = newSize;\n"},
{"name":"src/org/hsqldb/lib/ClosableByteArrayOutputStream.java/L-203","size":1,"imports":["src/org/hsqldb/lib/ClosableCharArrayWriter.java/L-239"],"snippet":"out.write(buf, 0, count);\n    }\n    public synchronized int capacity() throws IOException {\n        checkFreed();\n        return buf.length;\n    }\n    public synchronized void reset() throws IOException {\n        checkClosed();\n        count = 0;\n    }\n    public synchronized void trimToSize() throws IOException {\n        checkFreed();\n        if (buf.length > count) {\n            buf = copyOf(buf, count);\n        }\n    }\n    public synchronized byte[] toByteArray() throws IOException {\n        checkFreed();\n        return copyOf(buf, count);\n    }\n    public synchronized int size() throws IOException {\n        return count;\n    }\n    public synchronized void setSize(int newSize) {\n        if (newSize < 0) {\n            throw new ArrayIndexOutOfBoundsException(newSize);\n        } else if (newSize > buf.length) {\n            buf = copyOf(buf, Math.max(buf.length << 1, newSize));\n        }\n        count = newSize;\n"}

	]