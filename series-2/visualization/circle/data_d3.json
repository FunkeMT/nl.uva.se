[
		{"name":"src/smallsql/database/SQLParser.java/L-1332","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1239"],"snippet":"if(token2 != null && token2.value == SQLTokenizer.POINT){\n                                    expr.setNameAfterTableAlias( nextIdentifier() );\n                                }else{\n                                    previousToken();\n                                }\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1239","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1332"],"snippet":"if(token2 != null && token2.value == SQLTokenizer.POINT){\n                            expr.setNameAfterTableAlias( nextIdentifier() );\n                        }else{\n                            previousToken();\n                        }\n"},
{"name":"src/smallsql/junit/TestTokenizer.java/L-147","size":1,"imports":["src/smallsql/junit/TestTokenizer.java/L-87"],"snippet":"catch (SQLException e) {\n\t\t\tout.println(\"REGULAR: \" + e.getMessage() + '\\n');\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTokenizer.java/L-87","size":1,"imports":["src/smallsql/junit/TestTokenizer.java/L-147"],"snippet":"catch (SQLException e) {\n\t\t\tout.println(\"REGULAR: \" + e.getMessage() + '\\n');\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","size":1,"imports":["src/smallsql/database/ExpressionFunctionAbs.java/L-104","src/smallsql/database/ExpressionFunctionFloor.java/L-46"],"snippet":"final String getString() throws Exception{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n"},
{"name":"src/smallsql/database/ExpressionFunctionAbs.java/L-104","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","src/smallsql/database/ExpressionFunctionFloor.java/L-46"],"snippet":"String getString() throws Exception{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n"},
{"name":"src/smallsql/database/ExpressionFunctionFloor.java/L-46","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","src/smallsql/database/ExpressionFunctionAbs.java/L-104"],"snippet":"String getString() throws Exception{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-811","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-187"],"snippet":"while(rs.next()){\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-187","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-811"],"snippet":"while(rs.next()){\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-62","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnString.java/L-66"],"snippet":"final float getFloat() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Float.parseFloat(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnString.java/L-66","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-62"],"snippet":"final float getFloat() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Float.parseFloat(getString().trim());\n\t}\n"},
{"name":"src/smallsql/junit/TestOperatoren.java/L-113","size":1,"imports":["src/smallsql/junit/TestJoins.java/L-119"],"snippet":"PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");\n"},
{"name":"src/smallsql/junit/TestJoins.java/L-119","size":1,"imports":["src/smallsql/junit/TestOperatoren.java/L-113"],"snippet":"PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-59","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-160","src/smallsql/junit/TestThreads.java/L-106"],"snippet":"        for(int i = 0; i < threadList.size(); i++){\n            Thread thread = (Thread)threadList.get(i);\n            thread.join(5000);\n        }\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-160","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-59","src/smallsql/junit/TestThreads.java/L-106"],"snippet":"            for(int i = 0; i < threadList.size(); i++){\n                Thread thread = (Thread)threadList.get(i);\n                thread.join(5000);\n            }\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-106","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-59","src/smallsql/junit/TestThreads.java/L-160"],"snippet":"            for(int i = 0; i < threadList.size(); i++){\n                Thread thread = (Thread)threadList.get(i);\n                thread.join(5000);\n            }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-125","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-150","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-184","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-237","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-358","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-394","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\" + e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-443","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-498","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-553","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-600","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-676","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-635","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }\n"},
{"name":"src/smallsql/database/ExpressionFunctionInsert.java/L-77","size":1,"imports":["src/smallsql/database/ExpressionFunctionInsert.java/L-62"],"snippet":"if(length < 0) \n            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));\n"},
{"name":"src/smallsql/database/ExpressionFunctionInsert.java/L-62","size":1,"imports":["src/smallsql/database/ExpressionFunctionInsert.java/L-77"],"snippet":"if(length < 0) \n            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-180","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-121"],"snippet":"if (count != rowCount)\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\n            else System.out.println( \"  Test time: \" + time + \" ms\");\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-121","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-180"],"snippet":"if (count != rowCount)\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\n            else System.out.println( \"  Test time: \" + time + \" ms\");\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-120","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-89"],"snippet":"if(status.nodeValue != null){\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\n\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-89","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-120"],"snippet":"if(status.nodeValue != null){\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\n\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/LongList.java/L-60","size":1,"imports":["src/smallsql/database/DataSources.java/L-48","src/smallsql/database/Expressions.java/L-64"],"snippet":"{\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/DataSources.java/L-48","size":1,"imports":["src/smallsql/database/LongList.java/L-60","src/smallsql/database/Expressions.java/L-64"],"snippet":"{\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/Expressions.java/L-64","size":1,"imports":["src/smallsql/database/LongList.java/L-60","src/smallsql/database/DataSources.java/L-48"],"snippet":"{\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-110","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-115","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-120"],"snippet":"DateTime.Details details1 = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-115","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-110","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-120"],"snippet":"DateTime.Details details1 = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-120","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-110","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-115"],"snippet":"DateTime.Details details1 = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-115","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-144"],"snippet":"nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-144","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-115"],"snippet":"nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\n"},
{"name":"src/smallsql/database/Table.java/L-388","size":1,"imports":["src/smallsql/database/Table.java/L-370"],"snippet":"if(serializeConnections.size() > 0){\n                        Iterator values = locks.values().iterator();\n                        while(values.hasNext()){\n                            TableStorePage lock = (TableStorePage)values.next();\n                            if(lock.con != con) return null;\n                        }\n                    }\n"},
{"name":"src/smallsql/database/Table.java/L-370","size":1,"imports":["src/smallsql/database/Table.java/L-388"],"snippet":"if(serializeConnections.size() > 0){\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\n\t\t\t\t\t\t\twhile(values.hasNext()){\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1863","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1875","src/smallsql/database/SQLParser.java/L-1869"],"snippet":"if(token.value == SQLTokenizer.OUTER)\n                \t\ttoken = nextToken(MISSING_JOIN);\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1875","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1863","src/smallsql/database/SQLParser.java/L-1869"],"snippet":"if(token.value == SQLTokenizer.OUTER)\n\t\t\t\t\t\ttoken = nextToken(MISSING_JOIN);\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1869","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1863","src/smallsql/database/SQLParser.java/L-1875"],"snippet":"if(token.value == SQLTokenizer.OUTER)\n                \t\ttoken = nextToken(MISSING_JOIN);\n"},
{"name":"src/smallsql/database/Database.java/L-395","size":1,"imports":["src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-505","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n"},
{"name":"src/smallsql/database/Database.java/L-438","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-505","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n"},
{"name":"src/smallsql/database/Database.java/L-474","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-505","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n"},
{"name":"src/smallsql/database/Database.java/L-505","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n"},
{"name":"src/smallsql/database/Database.java/L-542","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-505"],"snippet":"Object[][] result = new Object[rows.size()][];\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-110","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-678"],"snippet":"String[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-678","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-110"],"snippet":"String[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};\n"},
{"name":"src/smallsql/database/CommandSelect.java/L-436","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-478","src/smallsql/database/Command.java/L-138","src/smallsql/database/CommandSelect.java/L-494"],"snippet":"catch(Throwable e){\n\t\t\tcon.rollback(savepoint);\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}\n"},
{"name":"src/smallsql/database/CommandSelect.java/L-478","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-436","src/smallsql/database/Command.java/L-138","src/smallsql/database/CommandSelect.java/L-494"],"snippet":"catch(Throwable e){\n\t\t\tcon.rollback(savepoint);\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}\n"},
{"name":"src/smallsql/database/Command.java/L-138","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-436","src/smallsql/database/CommandSelect.java/L-478","src/smallsql/database/CommandSelect.java/L-494"],"snippet":"catch(Throwable e){\n            con.rollback(savepoint);\n            throw SmallSQLException.createFromException(e);\n        }\n"},
{"name":"src/smallsql/database/CommandSelect.java/L-494","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-436","src/smallsql/database/CommandSelect.java/L-478","src/smallsql/database/Command.java/L-138"],"snippet":"catch(Throwable e){\n\t\t\tcon.rollback(savepoint);\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-255","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-241"],"snippet":"for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\n                    msgBuf.append(itr.next());\n                    if (itr.hasNext()) msgBuf.append(',');\n                }\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-241","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-255"],"snippet":"for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\n\t\t\t\t\tmsgBuf.append(itr.next());\n\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-80","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnString.java/L-84"],"snippet":"final MutableNumeric getNumeric() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn new MutableNumeric(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnString.java/L-84","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-80"],"snippet":"final MutableNumeric getNumeric() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn new MutableNumeric(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-474","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-503","src/smallsql/database/MutableNumeric.java/L-550","src/smallsql/database/MutableNumeric.java/L-526"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-503","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-474","src/smallsql/database/MutableNumeric.java/L-550","src/smallsql/database/MutableNumeric.java/L-526"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-550","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-474","src/smallsql/database/MutableNumeric.java/L-503","src/smallsql/database/MutableNumeric.java/L-526"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-526","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-474","src/smallsql/database/MutableNumeric.java/L-503","src/smallsql/database/MutableNumeric.java/L-550"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-101","size":1,"imports":["src/smallsql/database/Utils.java/L-476"],"snippet":"private final static char[] digits = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n"},
{"name":"src/smallsql/database/Utils.java/L-476","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-101"],"snippet":"final static char[] digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n"},
{"name":"src/smallsql/database/GroupResult.java/L-111","size":1,"imports":["src/smallsql/database/GroupResult.java/L-89"],"snippet":"{\n\t\t\tint idx = internalExpressions.indexOf(expr);\n\t\t\tif(idx >= 0) return idx;\n\t\t\tinternalExpressions.add(expr);\n\t\t\treturn internalExpressions.size()-1;\n\t\t}\n"},
{"name":"src/smallsql/database/GroupResult.java/L-89","size":1,"imports":["src/smallsql/database/GroupResult.java/L-111"],"snippet":"{\n\t\t\tint idx = internalExpressions.indexOf(expr);\n\t\t\tif(idx >= 0) return idx;\n\t\t\tinternalExpressions.add(expr);\n\t\t\treturn internalExpressions.size()-1;\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-182","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-753"],"snippet":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-753","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-182"],"snippet":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-50"],"snippet":"if(places > 0){\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}else{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-50"],"snippet":"if(places > 0){\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}else{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionSubstring.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionReplace.java/L-49"],"snippet":"final boolean isNull() throws Exception {\n\t\treturn param1.isNull() || param2.isNull() || param3.isNull();\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReplace.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionSubstring.java/L-49"],"snippet":"final boolean isNull() throws Exception {\n\t\treturn param1.isNull() || param2.isNull() || param3.isNull();\n\t}\n"},
{"name":"src/smallsql/database/SQLTokenizer.java/L-173","size":1,"imports":["src/smallsql/database/SQLTokenizer.java/L-112"],"snippet":"if(!wasWhiteSpace){\n                                   tokens.add( new SQLToken( value, tokenStart, i) );\n                                   value = 0;\n                                }\n"},
{"name":"src/smallsql/database/SQLTokenizer.java/L-112","size":1,"imports":["src/smallsql/database/SQLTokenizer.java/L-173"],"snippet":"if(!wasWhiteSpace){\n\t                                tokens.add( new SQLToken( value, tokenStart, i) );\n\t                                value = 0;\n\t                            }\n"},
{"name":"src/smallsql/junit/TestAlterTable2.java/L-47","size":1,"imports":["src/smallsql/junit/TestAlterTable2.java/L-77"],"snippet":"assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\n"},
{"name":"src/smallsql/junit/TestAlterTable2.java/L-77","size":1,"imports":["src/smallsql/junit/TestAlterTable2.java/L-47"],"snippet":"assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-239","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-211"],"snippet":"while(oldValue != null && rs.next()){\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tif(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\toldValue = newValue;\n\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-211","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-239"],"snippet":"while(oldValue != null && rs.next()){\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tif(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\toldValue = newValue;\n\t\t}\n"},
{"name":"src/smallsql/database/SQLParser.java/L-849","size":1,"imports":["src/smallsql/database/SQLParser.java/L-839"],"snippet":"try{\n\t\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );\n\t\t\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );\n\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/SQLParser.java/L-839","size":1,"imports":["src/smallsql/database/SQLParser.java/L-849"],"snippet":"try{\n\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );\n\t\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );\n\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/Index.java/L-330","size":1,"imports":["src/smallsql/database/Index.java/L-350"],"snippet":"char digit = (char)(key >> (i<<4));\n"},
{"name":"src/smallsql/database/Index.java/L-350","size":1,"imports":["src/smallsql/database/Index.java/L-330"],"snippet":"char digit = (char)(key >> (i<<4));\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-69","size":1,"imports":[],"snippet":"try{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n"},
{"name":"src/smallsql/database/ExpressionFunctionSubstring.java/L-81","size":1,"imports":["src/smallsql/database/ExpressionFunctionSubstring.java/L-60"],"snippet":"if(length < 0) \n\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));\n"},
{"name":"src/smallsql/database/ExpressionFunctionSubstring.java/L-60","size":1,"imports":["src/smallsql/database/ExpressionFunctionSubstring.java/L-81"],"snippet":"if(length < 0) \n\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-296","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-951"],"snippet":"String[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-951","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-296"],"snippet":"String[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-93","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-664"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-664","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-93"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-74","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnString.java/L-78"],"snippet":"final long getMoney() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Money.parseMoney(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnString.java/L-78","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-74"],"snippet":"final long getMoney() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Money.parseMoney(getString().trim());\n\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-431","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-346"],"snippet":"while(rs.next()){\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-346","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-431"],"snippet":"while(rs.next()){\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-224","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-271"],"snippet":"int octet = (int)(value >> shift) & 0xFFFF;\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-271","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-224"],"snippet":"int octet = (int)(value >> shift) & 0xFFFF;\n"},
{"name":"src/smallsql/database/Index.java/L-130","size":1,"imports":["src/smallsql/database/Index.java/L-103"],"snippet":"if(i + 1 == count)\n                return page.getValue();\n            else\n                page = (IndexNode)page.getValue();\n"},
{"name":"src/smallsql/database/Index.java/L-103","size":1,"imports":["src/smallsql/database/Index.java/L-130"],"snippet":"if(i + 1 == count)\n                return page.getValue();\n            else\n                page = (IndexNode)page.getValue();\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-104","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-84"],"snippet":"{\n\t\t\t\trecreateTestTab(stat);\n\t\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\n\t\t\t\tfail();\n\t\t\t}\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-84","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-104"],"snippet":"{\n\t\t\trecreateTestTab(stat);\n\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\n\t\t\tfail();\n\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-134","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-162"],"snippet":"assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-162","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-134"],"snippet":"assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\n"},
{"name":"src/smallsql/database/Utils.java/L-317","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-188"],"snippet":"static boolean string2boolean( String val){\n        try{\n            return Double.parseDouble( val ) != 0;\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\n    }\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-188","size":1,"imports":["src/smallsql/database/Utils.java/L-317"],"snippet":"    private boolean string2boolean( String val){\n        try{\n            return Double.parseDouble( val ) != 0;\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\n    }\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-82","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-92"],"snippet":"StorePage storePage = new StorePage( null, -1, file, offset);\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-92","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-82"],"snippet":"StorePage storePage = new StorePage( null, -1, file, offset);\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-131","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-144"],"snippet":"for(; k>= 0; k--) if(tmp[k] != 0) break;\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-144","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-131"],"snippet":"for(; k>= 0; k--) if(tmp[k] != 0) break;\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-67","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-99","src/smallsql/junit/TestScrollable.java/L-173","src/smallsql/junit/TestScrollable.java/L-135"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException( \"01000\", 0, ex );\n        }\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-99","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-67","src/smallsql/junit/TestScrollable.java/L-173","src/smallsql/junit/TestScrollable.java/L-135"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException( \"01000\", 0, ex);\n        }\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-173","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-67","src/smallsql/junit/TestScrollable.java/L-99","src/smallsql/junit/TestScrollable.java/L-135"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException(\"01000\", 0, ex);\n        }\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-135","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-67","src/smallsql/junit/TestScrollable.java/L-99","src/smallsql/junit/TestScrollable.java/L-173"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException(\"01000\", 0, ex);\n        }\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-363","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-377","src/smallsql/database/StoreImpl.java/L-398"],"snippet":"page[ offset++ ] = (byte)(value >> 8);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-377","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-363","src/smallsql/database/StoreImpl.java/L-398"],"snippet":"page[ offset++ ] = (byte)(value >> 8);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-398","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-363","src/smallsql/database/StoreImpl.java/L-377"],"snippet":"page[ offset++ ] = (byte)(value >> 8);\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-55","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-55"],"snippet":"{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-55","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-55"],"snippet":"{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-67","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-83"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-83","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-67"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-657","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-620"],"snippet":"for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-620","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-657"],"snippet":"for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-127","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-152","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-186","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-239","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-299","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-360","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-396","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-445","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-500","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-555","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-602","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-678","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-678","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-637"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-637","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-127","src/smallsql/junit/BenchTest.java/L-152","src/smallsql/junit/BenchTest.java/L-186","src/smallsql/junit/BenchTest.java/L-239","src/smallsql/junit/BenchTest.java/L-299","src/smallsql/junit/BenchTest.java/L-360","src/smallsql/junit/BenchTest.java/L-396","src/smallsql/junit/BenchTest.java/L-445","src/smallsql/junit/BenchTest.java/L-500","src/smallsql/junit/BenchTest.java/L-555","src/smallsql/junit/BenchTest.java/L-602","src/smallsql/junit/BenchTest.java/L-678"],"snippet":"{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n"},
{"name":"src/smallsql/database/Money.java/L-67","size":1,"imports":["src/smallsql/database/Money.java/L-61"],"snippet":"{\n        Money money = new Money();\n        money.value = value;\n        return money;\n    }\n"},
{"name":"src/smallsql/database/Money.java/L-61","size":1,"imports":["src/smallsql/database/Money.java/L-67"],"snippet":"{\n        Money money = new Money();\n        money.value = value;\n        return money;\n    }\n"},
{"name":"src/smallsql/database/IndexNode.java/L-243","size":1,"imports":["src/smallsql/database/IndexNode.java/L-249"],"snippet":"value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);\n"},
{"name":"src/smallsql/database/IndexNode.java/L-249","size":1,"imports":["src/smallsql/database/IndexNode.java/L-243"],"snippet":"value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-412","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-519"],"snippet":"PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-519","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-412"],"snippet":"PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\n"},
{"name":"src/smallsql/database/DateTime.java/L-740","size":1,"imports":["src/smallsql/database/DateTime.java/L-675"],"snippet":"if(t<0){\n\t\t\t\tt += 86400000;\n\t\t\t\td--;\n\t\t\t}\n"},
{"name":"src/smallsql/database/DateTime.java/L-675","size":1,"imports":["src/smallsql/database/DateTime.java/L-740"],"snippet":"if(t<0){\n            t += 86400000;\n            d--;\n        }\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","size":1,"imports":["src/smallsql/database/ExpressionFunctionAbs.java/L-104","src/smallsql/database/ExpressionFunctionFloor.java/L-46"],"snippet":"{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n"},
{"name":"src/smallsql/database/ExpressionFunctionAbs.java/L-104","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","src/smallsql/database/ExpressionFunctionFloor.java/L-46"],"snippet":"{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n"},
{"name":"src/smallsql/database/ExpressionFunctionFloor.java/L-46","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","src/smallsql/database/ExpressionFunctionAbs.java/L-104"],"snippet":"{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n"},
{"name":"src/smallsql/database/StorePageMap.java/L-99","size":1,"imports":["src/smallsql/database/StorePageMap.java/L-127","src/smallsql/database/StorePageMap.java/L-198"],"snippet":"int i = (int)(key % table.length);\n"},
{"name":"src/smallsql/database/StorePageMap.java/L-127","size":1,"imports":["src/smallsql/database/StorePageMap.java/L-99","src/smallsql/database/StorePageMap.java/L-198"],"snippet":"int i = (int)(key % table.length);\n"},
{"name":"src/smallsql/database/StorePageMap.java/L-198","size":1,"imports":["src/smallsql/database/StorePageMap.java/L-99","src/smallsql/database/StorePageMap.java/L-127"],"snippet":"int i = (int)(key % table.length);\n"},
{"name":"src/smallsql/database/IndexDescriptions.java/L-62","size":1,"imports":["src/smallsql/database/Columns.java/L-58","src/smallsql/database/ForeignKeys.java/L-56","src/smallsql/database/Strings.java/L-56"],"snippet":"{\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/Columns.java/L-58","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-62","src/smallsql/database/ForeignKeys.java/L-56","src/smallsql/database/Strings.java/L-56"],"snippet":"{\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/ForeignKeys.java/L-56","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-62","src/smallsql/database/Columns.java/L-58","src/smallsql/database/Strings.java/L-56"],"snippet":"{\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/Strings.java/L-56","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-62","src/smallsql/database/Columns.java/L-58","src/smallsql/database/ForeignKeys.java/L-56"],"snippet":"{\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-50"],"snippet":"{\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-50"],"snippet":"{\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-63","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-71","src/smallsql/database/MemoryStream.java/L-83"],"snippet":"puffer[ offset++ ] = (byte)(value >> 8);\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-71","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-63","src/smallsql/database/MemoryStream.java/L-83"],"snippet":"puffer[ offset++ ] = (byte)(value >> 8);\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-83","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-63","src/smallsql/database/MemoryStream.java/L-71"],"snippet":"puffer[ offset++ ] = (byte)(value >> 8);\n"},
{"name":"src/smallsql/database/IndexNode.java/L-349","size":1,"imports":["src/smallsql/database/IndexNode.java/L-368"],"snippet":"int mid = start + (end - start)\/2;\n"},
{"name":"src/smallsql/database/IndexNode.java/L-368","size":1,"imports":["src/smallsql/database/IndexNode.java/L-349"],"snippet":"int mid = start + (end - start)\/2;\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-103","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-671"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-671","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-103"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnString.java/L-54"],"snippet":"final int getInt() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Integer.parseInt(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnString.java/L-54","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-50"],"snippet":"final int getInt() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Integer.parseInt(getString().trim());\n\t}\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-618","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-655"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-655","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-618"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n"},
{"name":"src/smallsql/database/SSStatement.java/L-271","size":1,"imports":["src/smallsql/database/SSPreparedStatement.java/L-249"],"snippet":"if(failed == null){\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\n                    failed.initCause(ex);\n                }\n"},
{"name":"src/smallsql/database/SSPreparedStatement.java/L-249","size":1,"imports":["src/smallsql/database/SSStatement.java/L-271"],"snippet":"if(failed == null){\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\n\t\t\t\t\tfailed.initCause(ex);\n\t\t\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-354","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-204"],"snippet":"ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-204","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-354"],"snippet":"ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-597","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-592"],"snippet":"{\n\t\t\toldValue = rs.getBoolean(\"b\");\n\t\t\tassertFalse(rs.wasNull());\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-592","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-597"],"snippet":"{\n\t\t\toldValue = rs.getBoolean(\"b\");\n\t\t\tassertFalse(rs.wasNull());\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-56","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnString.java/L-60"],"snippet":"final long getLong() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Long.parseLong(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnString.java/L-60","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-56"],"snippet":"final long getLong() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Long.parseLong(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/SmallSQLException.java/L-145","size":1,"imports":["src/smallsql/database/SmallSQLException.java/L-182"],"snippet":"String message = translateMsg(messageCode, new Object[] { param0 });\n"},
{"name":"src/smallsql/database/SmallSQLException.java/L-182","size":1,"imports":["src/smallsql/database/SmallSQLException.java/L-145"],"snippet":"String message = translateMsg(messageCode, new Object[] { param0 });\n"},
{"name":"src/smallsql/database/Table.java/L-379","size":1,"imports":["src/smallsql/database/Table.java/L-397"],"snippet":"TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\n"},
{"name":"src/smallsql/database/Table.java/L-397","size":1,"imports":["src/smallsql/database/Table.java/L-379"],"snippet":"TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-323","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-362"],"snippet":"int shift = (3-listEnum.stack) << 4;\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-362","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-323"],"snippet":"int shift = (3-listEnum.stack) << 4;\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-44","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnString.java/L-48"],"snippet":"final boolean getBoolean() throws Exception {\n\t\tif(isNull()) return false;\n\t\treturn Utils.string2boolean(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnString.java/L-48","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-44"],"snippet":"final boolean getBoolean() throws Exception {\n\t\tif(isNull()) return false;\n\t\treturn Utils.string2boolean(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-68","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnString.java/L-72"],"snippet":"final double getDouble() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Double.parseDouble(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnString.java/L-72","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java/L-68"],"snippet":"final double getDouble() throws Exception {\n\t\tif(isNull()) return 0;\n\t\treturn Double.parseDouble(getString().trim());\n\t}\n"},
{"name":"src/smallsql/database/Utils.java/L-205","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-102"],"snippet":"static String bytes2hex( byte[] bytes ){\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\n        for(int i=0; i<bytes.length; i++){\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\n        }\n        return buf.toString();\n    }\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-102","size":1,"imports":["src/smallsql/database/Utils.java/L-205"],"snippet":"private static String bytes2hex( byte[] bytes ){\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\n\t\tfor(int i=0; i<bytes.length; i++){\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\n\t\t}\n\t\treturn buf.toString();\n\t}\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-633","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-674"],"snippet":"java.io.File file = new java.io.File(tableName+\".bin\");\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-674","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-633"],"snippet":"java.io.File file = new java.io.File(tableName+\".bin\");\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-60","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-161","src/smallsql/junit/TestThreads.java/L-107"],"snippet":"{\n            Thread thread = (Thread)threadList.get(i);\n            thread.join(5000);\n        }\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-161","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-60","src/smallsql/junit/TestThreads.java/L-107"],"snippet":"{\n                Thread thread = (Thread)threadList.get(i);\n                thread.join(5000);\n            }\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-107","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-60","src/smallsql/junit/TestThreads.java/L-161"],"snippet":"{\n                Thread thread = (Thread)threadList.get(i);\n                thread.join(5000);\n            }\n"},
{"name":"src/smallsql/database/SQLParser.java/L-675","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1105"],"snippet":"int length = last.offset + last.length - offset;\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1105","size":1,"imports":["src/smallsql/database/SQLParser.java/L-675"],"snippet":"int length = last.offset + last.length - offset;\n"},
{"name":"src/smallsql/database/Table.java/L-358","size":1,"imports":["src/smallsql/database/Table.java/L-388","src/smallsql/database/Table.java/L-370"],"snippet":"{\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\n\t\t\t\t\t\t\twhile(values.hasNext()){\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/Table.java/L-388","size":1,"imports":["src/smallsql/database/Table.java/L-358","src/smallsql/database/Table.java/L-370"],"snippet":"{\n                        Iterator values = locks.values().iterator();\n                        while(values.hasNext()){\n                            TableStorePage lock = (TableStorePage)values.next();\n                            if(lock.con != con) return null;\n                        }\n                    }\n"},
{"name":"src/smallsql/database/Table.java/L-370","size":1,"imports":["src/smallsql/database/Table.java/L-358","src/smallsql/database/Table.java/L-388"],"snippet":"{\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\n\t\t\t\t\t\t\twhile(values.hasNext()){\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-93","size":1,"imports":["src/smallsql/database/View.java/L-56"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);\n"},
{"name":"src/smallsql/database/View.java/L-56","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-93"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-296","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-291"],"snippet":"\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-291","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-296"],"snippet":"\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-624","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-661"],"snippet":"java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-661","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-624"],"snippet":"java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n"},
{"name":"src/smallsql/database/SSCallableStatement.java/L-135","size":1,"imports":["src/smallsql/database/SSCallableStatement.java/L-117"],"snippet":"{\n        try{\n            Expression expr = getValue(i);\n            wasNull = expr.isNull();\n            return expr.getLong();\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n"},
{"name":"src/smallsql/database/SSCallableStatement.java/L-117","size":1,"imports":["src/smallsql/database/SSCallableStatement.java/L-135"],"snippet":"{\n        try{\n            Expression expr = getValue(i);\n            wasNull = expr.isNull();\n            return expr.getLong();\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n"},
{"name":"src/smallsql/database/Utils.java/L-163","size":1,"imports":["src/smallsql/database/Utils.java/L-154"],"snippet":"for(int i=0; i<length; i++){\n            result = (result << 8) | (bytes[i] & 0xFF);\n        }\n"},
{"name":"src/smallsql/database/Utils.java/L-154","size":1,"imports":["src/smallsql/database/Utils.java/L-163"],"snippet":"for(int i=0; i<length; i++){\n            result = (result << 8) | (bytes[i] & 0xFF);\n        }\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnInt.java/L-81","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-154"],"snippet":"Object getObject() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn Utils.getInteger(getInt());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-154","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnInt.java/L-81"],"snippet":"Object getObject() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn Utils.getInteger(getInt());\n\t}\n"},
{"name":"src/smallsql/junit/TestJoins.java/L-212","size":1,"imports":["src/smallsql/junit/TestOperatoren.java/L-275"],"snippet":"private static class TestValue{\n        String dataType;\n        Object small;\n        Object large;\n    }\n"},
{"name":"src/smallsql/junit/TestOperatoren.java/L-275","size":1,"imports":["src/smallsql/junit/TestJoins.java/L-212"],"snippet":"private static class TestValue{\n        String dataType;\n        Object small;\n        Object large;\n    }\n"},
{"name":"src/smallsql/database/Table.java/L-360","size":1,"imports":["src/smallsql/database/Table.java/L-390","src/smallsql/database/Table.java/L-372"],"snippet":"{\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/Table.java/L-390","size":1,"imports":["src/smallsql/database/Table.java/L-360","src/smallsql/database/Table.java/L-372"],"snippet":"{\n                            TableStorePage lock = (TableStorePage)values.next();\n                            if(lock.con != con) return null;\n                        }\n"},
{"name":"src/smallsql/database/Table.java/L-372","size":1,"imports":["src/smallsql/database/Table.java/L-360","src/smallsql/database/Table.java/L-390"],"snippet":"{\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/junit/TestOperatoren.java/L-95","size":1,"imports":["src/smallsql/junit/TestDataTypes.java/L-68","src/smallsql/junit/TestMoneyRounding.java/L-53","src/smallsql/junit/TestFunctions.java/L-374"],"snippet":"public void tearDown(){\n        try{\n            Connection con = AllTests.getConnection();\n            Statement st = con.createStatement();\n            st.execute(\"drop table \" + table);\n            st.close();\n        }catch(Throwable e){\n        }\n    }\n"},
{"name":"src/smallsql/junit/TestDataTypes.java/L-68","size":1,"imports":["src/smallsql/junit/TestOperatoren.java/L-95","src/smallsql/junit/TestMoneyRounding.java/L-53","src/smallsql/junit/TestFunctions.java/L-374"],"snippet":"public void tearDown(){\n        try{\n            Connection con = AllTests.getConnection();\n            Statement st = con.createStatement();\n            st.execute(\"drop table \" + table);\n            st.close();\n        }catch(Throwable e){\n        }\n    }\n"},
{"name":"src/smallsql/junit/TestMoneyRounding.java/L-53","size":1,"imports":["src/smallsql/junit/TestOperatoren.java/L-95","src/smallsql/junit/TestDataTypes.java/L-68","src/smallsql/junit/TestFunctions.java/L-374"],"snippet":"public void tearDown(){\n        try{\n            Connection con = AllTests.getConnection();\n            Statement st = con.createStatement();\n            st.execute(\"drop table \" + table);\n            st.close();\n        }catch(Throwable e){\n        }\n    }\n"},
{"name":"src/smallsql/junit/TestFunctions.java/L-374","size":1,"imports":["src/smallsql/junit/TestOperatoren.java/L-95","src/smallsql/junit/TestDataTypes.java/L-68","src/smallsql/junit/TestMoneyRounding.java/L-53"],"snippet":"public void tearDown(){\n        try{\n            Connection con = AllTests.getConnection();\n            Statement st = con.createStatement();\n            st.execute(\"drop table \" + table);\n            st.close();\n        }catch(Throwable e){\n        }\n    }\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-255","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-241"],"snippet":"{\n                    msgBuf.append(itr.next());\n                    if (itr.hasNext()) msgBuf.append(',');\n                }\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-241","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-255"],"snippet":"{\n\t\t\t\t\tmsgBuf.append(itr.next());\n\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');\n\t\t\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-397","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-223"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-223","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-397"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t}\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-70","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-82"],"snippet":"puffer[ offset++ ] = (byte)(value >> 16);\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-82","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-70"],"snippet":"puffer[ offset++ ] = (byte)(value >> 16);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-1145","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-1263"],"snippet":"throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-1263","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-1145"],"snippet":"throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-213","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-455","src/smallsql/junit/TestOrderBy.java/L-241"],"snippet":"if(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-455","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-213","src/smallsql/junit/TestOrderBy.java/L-241"],"snippet":"if(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-241","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-213","src/smallsql/junit/TestOrderBy.java/L-455"],"snippet":"if(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-263","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-778","src/smallsql/database/SSDatabaseMetaData.java/L-789"],"snippet":"String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-778","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-263","src/smallsql/database/SSDatabaseMetaData.java/L-789"],"snippet":"String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-789","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-263","src/smallsql/database/SSDatabaseMetaData.java/L-778"],"snippet":"String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-488","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-435"],"snippet":"if (updateCount != 1){\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\n                    return;\n                }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-435","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-488"],"snippet":"if (updateCount != 1){\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\n                    return;\n                }\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-210","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-831"],"snippet":"String[] colNames = {\"TYPE_NAME\", \"DATA_TYPE\", \"PRECISION\", \"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \"CREATE_PARAMS\", \"NULLABLE\", \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-831","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-210"],"snippet":"String[] colNames = {\t\t\"TYPE_NAME\", \t\t\t\t\"DATA_TYPE\", \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"PRECISION\", \t\"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \t\t\"CREATE_PARAMS\", \"NULLABLE\", \t \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};\n"},
{"name":"src/smallsql/database/LongList.java/L-61","size":1,"imports":["src/smallsql/database/Expressions.java/L-65","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/DataSources.java/L-49","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n"},
{"name":"src/smallsql/database/Expressions.java/L-65","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/DataSources.java/L-49","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n"},
{"name":"src/smallsql/database/LongLongList.java/L-56","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/Expressions.java/L-65","src/smallsql/database/DataSources.java/L-49","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n"},
{"name":"src/smallsql/database/DataSources.java/L-49","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/Expressions.java/L-65","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n"},
{"name":"src/smallsql/database/LongLongList.java/L-62","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/Expressions.java/L-65","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/DataSources.java/L-49"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n"},
{"name":"src/smallsql/database/Utils.java/L-163","size":1,"imports":["src/smallsql/database/Utils.java/L-154"],"snippet":"{\n            result = (result << 8) | (bytes[i] & 0xFF);\n        }\n"},
{"name":"src/smallsql/database/Utils.java/L-154","size":1,"imports":["src/smallsql/database/Utils.java/L-163"],"snippet":"{\n            result = (result << 8) | (bytes[i] & 0xFF);\n        }\n"},
{"name":"src/smallsql/database/Index.java/L-407","size":1,"imports":["src/smallsql/database/Index.java/L-382"],"snippet":"\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\n\t\t\t\t\t\t\t  : (key[i]);\n"},
{"name":"src/smallsql/database/Index.java/L-382","size":1,"imports":["src/smallsql/database/Index.java/L-407"],"snippet":"\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\n\t\t\t\t\t\t\t  : (key[i]);\n"},
{"name":"src/smallsql/database/IndexDescriptions.java/L-71","size":1,"imports":["src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n"},
{"name":"src/smallsql/database/Columns.java/L-96","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length){\n            resize(size << 1);\n        }\n"},
{"name":"src/smallsql/database/LongList.java/L-68","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n"},
{"name":"src/smallsql/database/Strings.java/L-64","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n"},
{"name":"src/smallsql/database/Expressions.java/L-72","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n"},
{"name":"src/smallsql/database/ForeignKeys.java/L-64","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n"},
{"name":"src/smallsql/database/Expressions.java/L-79","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n"},
{"name":"src/smallsql/database/TableResult.java/L-180","size":1,"imports":["src/smallsql/database/TableResult.java/L-186"],"snippet":"store = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);\n"},
{"name":"src/smallsql/database/TableResult.java/L-186","size":1,"imports":["src/smallsql/database/TableResult.java/L-180"],"snippet":"store = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);\n"},
{"name":"src/smallsql/database/SSResultSet.java/L-372","size":1,"imports":["src/smallsql/database/SSResultSet.java/L-413"],"snippet":"if(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);\n"},
{"name":"src/smallsql/database/SSResultSet.java/L-413","size":1,"imports":["src/smallsql/database/SSResultSet.java/L-372"],"snippet":"if(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1932","size":1,"imports":["src/smallsql/database/SQLParser.java/L-352"],"snippet":"try{\n            int maxRows = Integer.parseInt(token.getName(sql));\n            selCmd.setMaxRows(maxRows);\n        }catch(NumberFormatException e){\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\n        }\n"},
{"name":"src/smallsql/database/SQLParser.java/L-352","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1932"],"snippet":"try{\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\n\t\t\t\t\t}catch(NumberFormatException e){\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\n\t\t\t\t\t}\n"},
{"name":"src/smallsql/junit/TestJoins.java/L-204","size":1,"imports":["src/smallsql/junit/TestOperatoren.java/L-267"],"snippet":"private static TestValue a(String dataType, Object small, Object large){\n        TestValue value = new TestValue();\n        value.dataType  = dataType;\n        value.small     = small;\n        value.large     = large;\n        return value;\n    }\n"},
{"name":"src/smallsql/junit/TestOperatoren.java/L-267","size":1,"imports":["src/smallsql/junit/TestJoins.java/L-204"],"snippet":"private static TestValue a(String dataType, Object small, Object large){\n        TestValue value = new TestValue();\n        value.dataType  = dataType;\n        value.small     = small;\n        value.large     = large;\n        return value;\n    }\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-337","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-382"],"snippet":"listEnum.offsetStack[listEnum.stack] = offset+pointerSize;\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-382","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-337"],"snippet":"listEnum.offsetStack[listEnum.stack] = offset+pointerSize;\n"},
{"name":"src/smallsql/junit/TestAlterTable2.java/L-20","size":1,"imports":["src/smallsql/junit/TestAlterTable.java/L-39"],"snippet":"public void tearDown(){\n        try {\n            dropTable( AllTests.getConnection(), table );\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n        }\n    }\n"},
{"name":"src/smallsql/junit/TestAlterTable.java/L-39","size":1,"imports":["src/smallsql/junit/TestAlterTable2.java/L-20"],"snippet":"public void tearDown(){\n        try {\n            dropTable( AllTests.getConnection(), table );\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n        }\n    }\n"},
{"name":"src/smallsql/database/CommandInsert.java/L-166","size":1,"imports":["src/smallsql/database/CommandInsert.java/L-156"],"snippet":"{\n                            keyColumnNames.add(column.getName());\n                            keys.add(valueExpress.getObject());\n                            break;\n                        }\n"},
{"name":"src/smallsql/database/CommandInsert.java/L-156","size":1,"imports":["src/smallsql/database/CommandInsert.java/L-166"],"snippet":"{\n                            keyColumnNames.add(column.getName());\n                            keys.add(valueExpress.getObject());\n                            break;\n                        }\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnInt.java/L-75","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-148"],"snippet":"final MutableNumeric getNumeric() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn new MutableNumeric(getInt());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-148","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnInt.java/L-75"],"snippet":"MutableNumeric getNumeric() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn new MutableNumeric(getInt());\n\t}\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-234","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-821"],"snippet":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-821","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-234"],"snippet":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-315","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-323"],"snippet":"String message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-323","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-315"],"snippet":"String message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-376","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-397"],"snippet":"page[ offset++ ] = (byte)(value >> 16);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-397","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-376"],"snippet":"page[ offset++ ] = (byte)(value >> 16);\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-69","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-81"],"snippet":"puffer[ offset++ ] = (byte)(value >> 24);\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-81","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-69"],"snippet":"puffer[ offset++ ] = (byte)(value >> 24);\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-811","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-187"],"snippet":"{\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-187","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-811"],"snippet":"{\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n\t\t\tcount++;\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionConvert.java/L-153","size":1,"imports":["src/smallsql/database/ExpressionFunctionConvert.java/L-142"],"snippet":"{\n\t\t\t\t\tbyte[] buffer = new byte[length];\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\n\t\t\t\t\treturn buffer;\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionConvert.java/L-142","size":1,"imports":["src/smallsql/database/ExpressionFunctionConvert.java/L-153"],"snippet":"{\n\t\t\t\t\tbyte[] buffer = new byte[length];\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\n\t\t\t\t\treturn buffer;\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionLCase.java/L-52","size":1,"imports":["src/smallsql/database/ExpressionFunctionUCase.java/L-52"],"snippet":"final byte[] getBytes() throws Exception{\n        if(isNull()) return null;\n        return getString().getBytes();\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionUCase.java/L-52","size":1,"imports":["src/smallsql/database/ExpressionFunctionLCase.java/L-52"],"snippet":"final byte[] getBytes() throws Exception{\n        if(isNull()) return null;\n        return getString().getBytes();\n\t}\n"},
{"name":"src/smallsql/database/SQLTokenizer.java/L-173","size":1,"imports":["src/smallsql/database/SQLTokenizer.java/L-112"],"snippet":"{\n                                   tokens.add( new SQLToken( value, tokenStart, i) );\n                                   value = 0;\n                                }\n"},
{"name":"src/smallsql/database/SQLTokenizer.java/L-112","size":1,"imports":["src/smallsql/database/SQLTokenizer.java/L-173"],"snippet":"{\n\t                                tokens.add( new SQLToken( value, tokenStart, i) );\n\t                                value = 0;\n\t                            }\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-701","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-732","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-763","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestStatement.java/L-309","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-68","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-113","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-156","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-193","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-252","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-53","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-86","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-118","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-154","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-192","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-275","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-112","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-169","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-222","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-256","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-377","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-726","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-292"],"snippet":"{\n            Statement st = con.createStatement();\n            st.execute(\"DELETE FROM \" + tableName);\n            st.close();\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-292","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-726"],"snippet":"{\n                Statement st = con.createStatement();\n                st.execute(\"DELETE FROM \" + tableName);\n                st.close();\n            }\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1935","size":1,"imports":["src/smallsql/database/SQLParser.java/L-355"],"snippet":"catch(NumberFormatException e){\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\n        }\n"},
{"name":"src/smallsql/database/SQLParser.java/L-355","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1935"],"snippet":"catch(NumberFormatException e){\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\n\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-62","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-62"],"snippet":"if(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-62","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-62"],"snippet":"if(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunction.java/L-118","size":1,"imports":["src/smallsql/database/ExpressionFunction.java/L-106"],"snippet":"Object[] params = {\n    \t\t\tSQLTokenizer.getKeyWord(dataType),\n    \t\t\tSQLTokenizer.getKeyWord(getFunction())\n    \t};\n"},
{"name":"src/smallsql/database/ExpressionFunction.java/L-106","size":1,"imports":["src/smallsql/database/ExpressionFunction.java/L-118"],"snippet":"Object[] params = {\n\t\t\t\tSQLTokenizer.getKeyWord(dataType),\n\t\t\t\tSQLTokenizer.getKeyWord(getFunction())\n\t\t};\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-120","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-89"],"snippet":"{\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\n\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-89","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-120"],"snippet":"{\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\n\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionConvert.java/L-144","size":1,"imports":["src/smallsql/database/ExpressionFunctionConvert.java/L-155"],"snippet":"System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\n"},
{"name":"src/smallsql/database/ExpressionFunctionConvert.java/L-155","size":1,"imports":["src/smallsql/database/ExpressionFunctionConvert.java/L-144"],"snippet":"System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-375","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-396"],"snippet":"page[ offset++ ] = (byte)(value >> 24);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-396","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-375"],"snippet":"page[ offset++ ] = (byte)(value >> 24);\n"},
{"name":"src/smallsql/junit/TestOther.java/L-93","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-337"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-337","size":1,"imports":["src/smallsql/junit/TestOther.java/L-93"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-56","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-56"],"snippet":"for(int i=0; i>places; i--){\n\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-56","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-56"],"snippet":"for(int i=0; i>places; i--){\n\t\t\t}\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-322","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-208"],"snippet":"                if (count == 0){\n                    createTestDataWithClassicInsert( con );\n                    rs.next();\n                    count = rs.getInt(1);\n                }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-208","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-322"],"snippet":"                if (count == 0){\n                    createTestDataWithClassicInsert( con );\n                    rs.next();\n                    count = rs.getInt(1);\n                }\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-565","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-598"],"snippet":"StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-598","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-565"],"snippet":"StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-121","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-90"],"snippet":"{\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-90","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-121"],"snippet":"{\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-378","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-333"],"snippet":"if(listEnum.stack>=3){\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-333","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-378"],"snippet":"if(listEnum.stack>=3){\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnInt.java/L-87","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-160"],"snippet":"final String getString() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn String.valueOf(getInt());\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-160","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnInt.java/L-87"],"snippet":"String getString() throws Exception {\n\t\tif(isNull()) return null;\n\t\treturn String.valueOf(getInt());\n\t}\n"},
{"name":"src/smallsql/database/TableView.java/L-106","size":1,"imports":["src/smallsql/database/IndexDescription.java/L-187"],"snippet":"if(raFile != null)\n\t\t\t\ttry{\n\t\t\t\t\traFile.close();\n\t\t\t\t}catch(Exception e2){\n\t\t\t\t\tDriverManager.println(e2.toString());\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/IndexDescription.java/L-187","size":1,"imports":["src/smallsql/database/TableView.java/L-106"],"snippet":"if(raFile != null)\n                try{\n                    raFile.close();\n                }catch(Exception e2){\n                    DriverManager.println(e2.toString());\n                }\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-235","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-167"],"snippet":"if(num.scale < scale){\n\t\t\tnum.setScale(scale);\n\t\t}else\n\t\tif(num.scale > scale){\n\t\t\tsetScale(num.scale);\n\t\t}\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-167","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-235"],"snippet":"if(num.scale < scale){\n\t\t\tnum.setScale(scale);\n\t\t}else\n\t\tif(num.scale > scale){\n\t\t\tsetScale(num.scale);\n\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionMonth.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionHour.java/L-50","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-50","src/smallsql/database/ExpressionFunctionMinute.java/L-50","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-50","src/smallsql/database/ExpressionFunctionYear.java/L-50"],"snippet":"DateTime.Details details = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionHour.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-50","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-50","src/smallsql/database/ExpressionFunctionMinute.java/L-50","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-50","src/smallsql/database/ExpressionFunctionYear.java/L-50"],"snippet":"DateTime.Details details = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionDayOfYear.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-50","src/smallsql/database/ExpressionFunctionHour.java/L-50","src/smallsql/database/ExpressionFunctionMinute.java/L-50","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-50","src/smallsql/database/ExpressionFunctionYear.java/L-50"],"snippet":"DateTime.Details details = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionMinute.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-50","src/smallsql/database/ExpressionFunctionHour.java/L-50","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-50","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-50","src/smallsql/database/ExpressionFunctionYear.java/L-50"],"snippet":"DateTime.Details details = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-50","src/smallsql/database/ExpressionFunctionHour.java/L-50","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-50","src/smallsql/database/ExpressionFunctionMinute.java/L-50","src/smallsql/database/ExpressionFunctionYear.java/L-50"],"snippet":"DateTime.Details details = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionYear.java/L-50","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-50","src/smallsql/database/ExpressionFunctionHour.java/L-50","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-50","src/smallsql/database/ExpressionFunctionMinute.java/L-50","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-50"],"snippet":"DateTime.Details details = new DateTime.Details(param1.getLong());\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-110","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-90"],"snippet":"catch(SQLException e) {\n\t\t\t\tassertMessage(e, \"La tabella\/vista '\" + TABLE_NAME + \"' è già esistente.\");\n\t\t\t}\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-90","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-110"],"snippet":"catch (SQLException e) {\n\t\t\tassertMessage(e, \"La tabella\/vista '\" + TABLE_NAME + \"' è già esistente.\");\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-441","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-419"],"snippet":"{\n            dropTable(con1, \"transactions\");\n\t\t\tcon1.setAutoCommit(true);\n\t\t\tcon2.close();\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-419","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-441"],"snippet":"{\n\t\t    dropTable(con1, \"transactions\");\n\t\t\tcon1.setAutoCommit(true);\n\t\t\tcon2.close();\n\t\t}\n"},
{"name":"src/smallsql/database/TableView.java/L-105","size":1,"imports":["src/smallsql/database/IndexDescription.java/L-186"],"snippet":"catch(Throwable e){\n\t\t\tif(raFile != null)\n\t\t\t\ttry{\n\t\t\t\t\traFile.close();\n\t\t\t\t}catch(Exception e2){\n\t\t\t\t\tDriverManager.println(e2.toString());\n\t\t\t\t}\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}\n"},
{"name":"src/smallsql/database/IndexDescription.java/L-186","size":1,"imports":["src/smallsql/database/TableView.java/L-105"],"snippet":"catch(Throwable e){\n            if(raFile != null)\n                try{\n                    raFile.close();\n                }catch(Exception e2){\n                    DriverManager.println(e2.toString());\n                }\n            throw SmallSQLException.createFromException(e);\n        }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-216","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-234"],"snippet":"System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-234","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-216"],"snippet":"System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-98","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-129","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-157","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-188","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-365","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-281","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n"},
{"name":"src/smallsql/database/Utils.java/L-205","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-102"],"snippet":"{\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\n        for(int i=0; i<bytes.length; i++){\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\n        }\n        return buf.toString();\n    }\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-102","size":1,"imports":["src/smallsql/database/Utils.java/L-205"],"snippet":"{\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\n\t\tfor(int i=0; i<bytes.length; i++){\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\n\t\t}\n\t\treturn buf.toString();\n\t}\n"},
{"name":"src/smallsql/database/ExpressionValue.java/L-211","size":1,"imports":["src/smallsql/database/ExpressionValue.java/L-154"],"snippet":"{\n\t\t\t\t\tif(expr.isNull())\n\t\t\t\t\t\tdataType = expr.getDataType();\n\t\t\t\t\telse\n\t\t\t\t\t\tinitValue( expr );\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionValue.java/L-154","size":1,"imports":["src/smallsql/database/ExpressionValue.java/L-211"],"snippet":"{\n\t\t\t\t\tif(expr.isNull())\n\t\t\t\t\t\tdataType = expr.getDataType();\n\t\t\t\t\telse\n\t\t\t\t\t\tinitValue( expr );\n\t\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-51","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-51"],"snippet":"for(int i=0; i<places; i++){\n\t\t\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-51","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-51"],"snippet":"for(int i=0; i<places; i++){\n\t\t\t}\n"}

	]