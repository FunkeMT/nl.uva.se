var results = {"project-name": "test project", "metadata": {"cc": 19.24616155920286, "volume": 16154, "mass": 5365}, "options": {"metadata": ["cc", "volume", "mass"], "types": ["1", "2"]}, "files": [{"filename": "flare.analytics.cluster", "metadata": {"cc": 18.0, "volume": 109, "mass": 67}, "results": {"type-1": [], "type-2": [{"lines": [41, 145], "metadata": {"cc": 22, "volume": 104, "mass": 46}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.DataList", "flare.util.math.IMatrix", "flare.analytics.cluster.MergeEdge", "flare.analytics.cluster.HierarchicalCluster", "flare.vis.data.Data"]}, {"lines": [209, 214], "metadata": {"cc": 32, "volume": 5, "mass": 21}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.analytics.cluster.HierarchicalCluster", "flare.animate.Transitioner", "flare.vis.data.DataList", "flare.analytics.cluster.MergeEdge", "flare.util.math.IMatrix"]}]}}, {"filename": "flare.analytics.graph", "metadata": {"cc": 22.8, "volume": 416, "mass": 99}, "results": {"type-1": [{"lines": [400, 518], "metadata": {"cc": 40, "volume": 118, "mass": 36}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.DataList", "flare.util.Arrays", "flare.vis.data.Data", "flare.util.Property", "flare.vis.operator.Operator"]}, {"lines": [123, 250], "metadata": {"cc": 35, "volume": 127, "mass": 1}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.EdgeSprite", "flare.analytics.graph.ShortestPaths", "flare.vis.data.Data", "flare.util.Property", "flare.vis.operator.Operator"]}, {"lines": [347, 497], "metadata": {"cc": 26, "volume": 150, "mass": 49}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.EdgeSprite", "flare.vis.data.Data", "flare.util.Property", "flare.vis.operator.Operator"]}], "type-2": [{"lines": [174, 195], "metadata": {"cc": 13, "volume": 21, "mass": 13}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.DataList", "flare.util.Arrays", "flare.vis.data.Data", "flare.util.Property", "flare.vis.operator.Operator"]}]}}, {"filename": "flare.analytics.optimization", "metadata": {"cc": 0.0, "volume": 0, "mass": 0}, "results": {"type-1": [], "type-2": []}}, {"filename": "flare.animate", "metadata": {"cc": 26.294117647058822, "volume": 1377, "mass": 377}, "results": {"type-1": [{"lines": [43, 170], "metadata": {"cc": 11, "volume": 127, "mass": 46}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transition"]}, {"lines": [156, 177], "metadata": {"cc": 24, "volume": 21, "mass": 31}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.Maths", "flare.animate.Transition", "flare.util.Arrays", "flare.animate.Sequence", "flare.animate.Transitioner"]}, {"lines": [390, 438], "metadata": {"cc": 47, "volume": 48, "mass": 7}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Scheduler"]}, {"lines": [145, 255], "metadata": {"cc": 12, "volume": 110, "mass": 20}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Easing", "flare.animate.Transition", "flare.util.Arrays"]}, {"lines": [113, 230], "metadata": {"cc": 44, "volume": 117, "mass": 10}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transition"]}, {"lines": [41, 173], "metadata": {"cc": 10, "volume": 132, "mass": 19}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.ISchedulable", "flare.animate.Pause", "flare.animate.Transition"]}, {"lines": [8, 26], "metadata": {"cc": 48, "volume": 18, "mass": 43}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.animate.Easing", "flare.util.Maths", "flare.animate.Transition", "flare.util.Arrays"]}, {"lines": [159, 307], "metadata": {"cc": 19, "volume": 148, "mass": 0}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.animate.Transitioner", "flare.animate.TransitionEvent", "flare.animate.Scheduler", "flare.animate.Pause", "flare.animate.Parallel", "flare.animate.Easing", "flare.animate.Sequence", "flare.animate.ISchedulable", "flare.util.Maths", "flare.animate.Tween"]}, {"lines": [490, 613], "metadata": {"cc": 36, "volume": 123, "mass": 47}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.util.IValueProxy", "flare.animate.Parallel", "flare.animate.Easing", "flare.animate.Sequence", "flare.animate.Transition", "flare.animate.Tween", "flare.util.Property"]}, {"lines": [321, 375], "metadata": {"cc": 20, "volume": 54, "mass": 14}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transition"]}, {"lines": [39, 114], "metadata": {"cc": 23, "volume": 75, "mass": 42}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transitioner", "flare.animate.Transition", "flare.animate.interpolate.Interpolator", "flare.util.Property"]}], "type-2": [{"lines": [195, 246], "metadata": {"cc": 23, "volume": 51, "mass": 39}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.animate.Transition"]}, {"lines": [38, 150], "metadata": {"cc": 28, "volume": 112, "mass": 1}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.util.Maths", "flare.animate.Transition", "flare.util.Arrays", "flare.animate.Sequence", "flare.animate.Transitioner"]}, {"lines": [354, 455], "metadata": {"cc": 39, "volume": 101, "mass": 2}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.animate.Scheduler"]}, {"lines": [107, 160], "metadata": {"cc": 47, "volume": 53, "mass": 21}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.Easing", "flare.animate.Transition", "flare.util.Arrays"]}, {"lines": [407, 494], "metadata": {"cc": 16, "volume": 87, "mass": 35}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transition"]}]}}, {"filename": "flare.animate.interpolate", "metadata": {"cc": 26.5, "volume": 327, "mass": 71}, "results": {"type-1": [{"lines": [395, 520], "metadata": {"cc": 40, "volume": 125, "mass": 0}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.util.Arrays", "flare.animate.interpolate.Interpolator"]}, {"lines": [387, 504], "metadata": {"cc": 48, "volume": 117, "mass": 36}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.interpolate.Interpolator"]}], "type-2": [{"lines": [210, 295], "metadata": {"cc": 18, "volume": 85, "mass": 35}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.util.Arrays", "flare.animate.interpolate.Interpolator"]}]}}, {"filename": "flare.data.converters", "metadata": {"cc": 13.2, "volume": 367, "mass": 148}, "results": {"type-1": [{"lines": [425, 575], "metadata": {"cc": 10, "volume": 150, "mass": 43}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.data.converters.IDataConverter", "flare.data.converters.GraphMLConverter", "flare.data.converters.JSONConverter", "flare.data.converters.DelimitedTextConverter"]}, {"lines": [21, 105], "metadata": {"cc": 5, "volume": 84, "mass": 36}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.data.DataSet", "flare.data.DataUtil", "flare.data.DataTable", "flare.data.converters.IDataConverter", "flare.data.DataSchema", "flare.data.DataField"]}, {"lines": [343, 462], "metadata": {"cc": 46, "volume": 119, "mass": 40}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.data.DataSet", "flare.data.DataUtil", "flare.data.DataTable", "flare.data.converters.IDataConverter", "flare.data.DataSchema", "flare.data.DataField"]}], "type-2": [{"lines": [68, 82], "metadata": {"cc": 5, "volume": 14, "mass": 29}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.data.converters.IDataConverter", "flare.data.converters.GraphMLConverter", "flare.data.converters.JSONConverter", "flare.data.converters.DelimitedTextConverter"]}]}}, {"filename": "flare.data", "metadata": {"cc": 18.0, "volume": 559, "mass": 233}, "results": {"type-1": [{"lines": [58, 92], "metadata": {"cc": 23, "volume": 34, "mass": 46}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.data.DataUtil"]}, {"lines": [190, 245], "metadata": {"cc": 12, "volume": 55, "mass": 9}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.data.DataField", "flare.util.Arrays"]}, {"lines": [210, 314], "metadata": {"cc": 19, "volume": 104, "mass": 11}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.data.DataTable"]}, {"lines": [245, 302], "metadata": {"cc": 6, "volume": 57, "mass": 39}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.data.converters.IDataConverter", "flare.data.converters.Converters", "flare.data.DataSchema"]}, {"lines": [122, 122], "metadata": {"cc": 10, "volume": 0, "mass": 36}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.data.DataSchema"]}], "type-2": [{"lines": [500, 576], "metadata": {"cc": 16, "volume": 76, "mass": 17}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.data.DataUtil"]}, {"lines": [250, 318], "metadata": {"cc": 25, "volume": 68, "mass": 23}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.data.DataField", "flare.util.Arrays"]}, {"lines": [459, 606], "metadata": {"cc": 24, "volume": 147, "mass": 32}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.data.DataTable"]}, {"lines": [476, 494], "metadata": {"cc": 45, "volume": 18, "mass": 20}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.data.converters.IDataConverter", "flare.data.converters.Converters", "flare.data.DataSchema"]}]}}, {"filename": "flare.display", "metadata": {"cc": 20.5, "volume": 738, "mass": 150}, "results": {"type-1": [{"lines": [479, 515], "metadata": {"cc": 22, "volume": 36, "mass": 25}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": []}, {"lines": [258, 403], "metadata": {"cc": 40, "volume": 145, "mass": 6}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.display.DirtySprite"]}, {"lines": [423, 522], "metadata": {"cc": 19, "volume": 99, "mass": 2}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.Colors", "flare.display.DirtySprite"]}, {"lines": [45, 161], "metadata": {"cc": 2, "volume": 116, "mass": 28}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.display.DirtySprite"]}], "type-2": [{"lines": [430, 500], "metadata": {"cc": 14, "volume": 70, "mass": 17}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": []}, {"lines": [219, 342], "metadata": {"cc": 17, "volume": 123, "mass": 44}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.display.DirtySprite"]}, {"lines": [29, 178], "metadata": {"cc": 50, "volume": 149, "mass": 28}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.Colors", "flare.display.DirtySprite"]}]}}, {"filename": "flare.flex", "metadata": {"cc": 17.333333333333332, "volume": 188, "mass": 75}, "results": {"type-1": [{"lines": [361, 479], "metadata": {"cc": 23, "volume": 118, "mass": 47}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.display.DirtySprite", "flare.data.DataSet", "flare.vis.Visualization", "flare.vis.axis.CartesianAxes", "flare.vis.axis.Axes", "flare.vis.data.Data"]}], "type-2": [{"lines": [485, 555], "metadata": {"cc": 29, "volume": 70, "mass": 28}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.display.DirtySprite", "flare.data.DataSet", "flare.vis.Visualization", "flare.vis.axis.CartesianAxes", "flare.vis.axis.Axes", "flare.vis.data.Data"]}]}}, {"filename": "flare.physics", "metadata": {"cc": 23.363636363636363, "volume": 608, "mass": 220}, "results": {"type-1": [{"lines": [437, 517], "metadata": {"cc": 14, "volume": 80, "mass": 9}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.physics.Simulation", "flare.physics.Particle", "flare.physics.IForce"]}, {"lines": [156, 190], "metadata": {"cc": 45, "volume": 34, "mass": 14}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.physics.Simulation", "flare.physics.Particle", "flare.physics.IForce"]}, {"lines": [7, 23], "metadata": {"cc": 34, "volume": 16, "mass": 14}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.physics.Simulation"]}], "type-2": [{"lines": [108, 236], "metadata": {"cc": 38, "volume": 128, "mass": 2}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.physics.Simulation", "flare.physics.Particle", "flare.physics.IForce"]}, {"lines": [126, 256], "metadata": {"cc": 28, "volume": 130, "mass": 42}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.physics.Simulation", "flare.physics.Particle", "flare.physics.IForce"]}, {"lines": [81, 96], "metadata": {"cc": 7, "volume": 15, "mass": 9}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.physics.Simulation"]}, {"lines": [441, 453], "metadata": {"cc": 46, "volume": 12, "mass": 44}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.physics.Simulation", "flare.physics.Particle", "flare.physics.IForce"]}, {"lines": [61, 124], "metadata": {"cc": 29, "volume": 63, "mass": 38}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": []}, {"lines": [192, 200], "metadata": {"cc": 4, "volume": 8, "mass": 24}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.physics.Particle", "flare.physics.NBodyForce", "flare.physics.DragForce", "flare.physics.GravityForce", "flare.physics.Spring", "flare.physics.SpringForce", "flare.physics.IForce"]}, {"lines": [175, 297], "metadata": {"cc": 12, "volume": 122, "mass": 24}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.physics.Particle"]}]}}, {"filename": "flare.query", "metadata": {"cc": 20.923076923076923, "volume": 857, "mass": 360}, "results": {"type-1": [{"lines": [38, 116], "metadata": {"cc": 38, "volume": 78, "mass": 43}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Expression"]}, {"lines": [350, 405], "metadata": {"cc": 37, "volume": 55, "mass": 45}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.CompositeExpression", "flare.query.Expression"]}, {"lines": [151, 256], "metadata": {"cc": 46, "volume": 105, "mass": 40}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.BinaryExpression", "flare.query.Expression"]}, {"lines": [189, 287], "metadata": {"cc": 30, "volume": 98, "mass": 40}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Expression", "flare.query.AggregateExpression"]}], "type-2": [{"lines": [363, 443], "metadata": {"cc": 16, "volume": 80, "mass": 46}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.Expression"]}, {"lines": [300, 425], "metadata": {"cc": 4, "volume": 125, "mass": 2}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.CompositeExpression", "flare.query.Expression"]}, {"lines": [56, 112], "metadata": {"cc": 27, "volume": 56, "mass": 26}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.BinaryExpression", "flare.query.Expression"]}, {"lines": [40, 114], "metadata": {"cc": 17, "volume": 74, "mass": 23}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Expression", "flare.query.AggregateExpression"]}, {"lines": [165, 228], "metadata": {"cc": 4, "volume": 63, "mass": 21}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Expression"]}, {"lines": [243, 286], "metadata": {"cc": 30, "volume": 43, "mass": 10}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Not", "flare.query.BinaryExpression", "flare.query.Expression", "flare.query.Or"]}, {"lines": [77, 85], "metadata": {"cc": 15, "volume": 8, "mass": 24}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.Expression", "flare.query.If"]}, {"lines": [315, 387], "metadata": {"cc": 8, "volume": 72, "mass": 40}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Expression", "flare.query.AggregateExpression"]}]}}, {"filename": "flare.query.methods", "metadata": {"cc": 25.46808510638298, "volume": 3561, "mass": 1271}, "results": {"type-1": [{"lines": [252, 363], "metadata": {"cc": 47, "volume": 111, "mass": 50}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [61, 106], "metadata": {"cc": 23, "volume": 45, "mass": 37}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.And", "flare.query.methods.or"]}, {"lines": [287, 375], "metadata": {"cc": 17, "volume": 88, "mass": 7}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Average", "flare.query.methods.or"]}, {"lines": [373, 477], "metadata": {"cc": 19, "volume": 104, "mass": 48}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Count", "flare.query.methods.or"]}, {"lines": [154, 235], "metadata": {"cc": 48, "volume": 81, "mass": 29}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.Distinct", "flare.query.methods.or"]}, {"lines": [430, 567], "metadata": {"cc": 31, "volume": 137, "mass": 29}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [340, 431], "metadata": {"cc": 30, "volume": 91, "mass": 29}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Comparison", "flare.query.methods.or"]}, {"lines": [62, 212], "metadata": {"cc": 8, "volume": 150, "mass": 4}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.methods.or", "flare.query.Fn"]}, {"lines": [380, 448], "metadata": {"cc": 44, "volume": 68, "mass": 33}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Comparison", "flare.query.methods.or"]}, {"lines": [131, 134], "metadata": {"cc": 16, "volume": 3, "mass": 3}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Comparison", "flare.query.methods.gt", "flare.query.methods.eq", "flare.query.methods.or"]}, {"lines": [450, 591], "metadata": {"cc": 36, "volume": 141, "mass": 39}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.methods.or", "flare.query.If"]}, {"lines": [345, 367], "metadata": {"cc": 34, "volume": 22, "mass": 43}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.IsA", "flare.query.methods.or"]}, {"lines": [335, 369], "metadata": {"cc": 39, "volume": 34, "mass": 16}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Comparison", "flare.query.methods.or"]}, {"lines": [95, 154], "metadata": {"cc": 31, "volume": 59, "mass": 28}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Comparison", "flare.query.methods.lt", "flare.query.methods.eq", "flare.query.methods.or"]}, {"lines": [453, 537], "metadata": {"cc": 25, "volume": 84, "mass": 28}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.Maximum", "flare.query.methods.or"]}, {"lines": [405, 414], "metadata": {"cc": 28, "volume": 9, "mass": 46}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Minimum", "flare.query.methods.or"]}, {"lines": [77, 154], "metadata": {"cc": 34, "volume": 77, "mass": 47}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [322, 464], "metadata": {"cc": 30, "volume": 142, "mass": 38}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.methods.lt", "flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [226, 286], "metadata": {"cc": 41, "volume": 60, "mass": 4}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Comparison", "flare.query.methods.eq", "flare.query.methods.or"]}, {"lines": [263, 266], "metadata": {"cc": 26, "volume": 3, "mass": 48}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.Not", "flare.query.methods.or"]}, {"lines": [479, 485], "metadata": {"cc": 36, "volume": 6, "mass": 3}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Or"]}, {"lines": [292, 385], "metadata": {"cc": 0, "volume": 93, "mass": 32}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.Query", "flare.query.methods.or"]}, {"lines": [203, 353], "metadata": {"cc": 47, "volume": 150, "mass": 7}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.methods.max", "flare.query.Range", "flare.query.methods.or", "flare.query.methods.min"]}], "type-2": [{"lines": [476, 561], "metadata": {"cc": 42, "volume": 85, "mass": 33}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [394, 407], "metadata": {"cc": 43, "volume": 13, "mass": 36}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.And", "flare.query.methods.or"]}, {"lines": [36, 141], "metadata": {"cc": 35, "volume": 105, "mass": 26}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Average", "flare.query.methods.or"]}, {"lines": [197, 223], "metadata": {"cc": 33, "volume": 26, "mass": 17}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Count", "flare.query.methods.or"]}, {"lines": [417, 417], "metadata": {"cc": 22, "volume": 0, "mass": 3}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Distinct", "flare.query.methods.or"]}, {"lines": [106, 213], "metadata": {"cc": 31, "volume": 107, "mass": 14}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [346, 430], "metadata": {"cc": 24, "volume": 84, "mass": 28}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.Comparison", "flare.query.methods.or"]}, {"lines": [377, 508], "metadata": {"cc": 8, "volume": 131, "mass": 4}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.methods.or", "flare.query.Fn"]}, {"lines": [248, 306], "metadata": {"cc": 20, "volume": 58, "mass": 50}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Comparison", "flare.query.methods.or"]}, {"lines": [111, 210], "metadata": {"cc": 30, "volume": 99, "mass": 22}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Comparison", "flare.query.methods.gt", "flare.query.methods.eq", "flare.query.methods.or"]}, {"lines": [173, 179], "metadata": {"cc": 25, "volume": 6, "mass": 38}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.methods.or", "flare.query.If"]}, {"lines": [422, 450], "metadata": {"cc": 17, "volume": 28, "mass": 49}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.IsA", "flare.query.methods.or"]}, {"lines": [383, 463], "metadata": {"cc": 10, "volume": 80, "mass": 12}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.Comparison", "flare.query.methods.or"]}, {"lines": [175, 323], "metadata": {"cc": 12, "volume": 148, "mass": 43}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Comparison", "flare.query.methods.lt", "flare.query.methods.eq", "flare.query.methods.or"]}, {"lines": [380, 436], "metadata": {"cc": 48, "volume": 56, "mass": 48}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Maximum", "flare.query.methods.or"]}, {"lines": [51, 154], "metadata": {"cc": 6, "volume": 103, "mass": 27}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.query.Minimum", "flare.query.methods.or"]}, {"lines": [54, 90], "metadata": {"cc": 4, "volume": 36, "mass": 32}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [314, 461], "metadata": {"cc": 29, "volume": 147, "mass": 19}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.query.methods.lt", "flare.query.methods.or", "flare.query.Arithmetic"]}, {"lines": [91, 208], "metadata": {"cc": 18, "volume": 117, "mass": 41}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Comparison", "flare.query.methods.eq", "flare.query.methods.or"]}, {"lines": [23, 125], "metadata": {"cc": 2, "volume": 102, "mass": 38}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Not", "flare.query.methods.or"]}, {"lines": [450, 589], "metadata": {"cc": 4, "volume": 139, "mass": 10}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Or"]}, {"lines": [75, 141], "metadata": {"cc": 18, "volume": 66, "mass": 2}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.query.Query", "flare.query.methods.or"]}, {"lines": [186, 253], "metadata": {"cc": 26, "volume": 67, "mass": 31}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.query.methods.max", "flare.query.Range", "flare.query.methods.or", "flare.query.methods.min"]}]}}, {"filename": "flare.scale", "metadata": {"cc": 21.545454545454547, "volume": 733, "mass": 189}, "results": {"type-1": [{"lines": [303, 344], "metadata": {"cc": 50, "volume": 41, "mass": 32}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.scale.Scale"]}, {"lines": [421, 440], "metadata": {"cc": 25, "volume": 19, "mass": 41}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.util.Maths", "flare.util.Strings", "flare.scale.Scale", "flare.scale.QuantitativeScale", "flare.scale.ScaleType"]}, {"lines": [461, 581], "metadata": {"cc": 42, "volume": 120, "mass": 27}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.util.Maths", "flare.util.Strings", "flare.scale.Scale", "flare.scale.QuantitativeScale", "flare.scale.ScaleType"]}, {"lines": [371, 486], "metadata": {"cc": 1, "volume": 115, "mass": 18}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.scale.ScaleType", "flare.util.Arrays", "flare.scale.Scale"]}], "type-2": [{"lines": [161, 175], "metadata": {"cc": 2, "volume": 14, "mass": 32}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.scale.Scale"]}, {"lines": [9, 73], "metadata": {"cc": 12, "volume": 64, "mass": 18}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.Maths", "flare.util.Strings", "flare.scale.Scale", "flare.scale.QuantitativeScale", "flare.scale.ScaleType"]}, {"lines": [12, 63], "metadata": {"cc": 26, "volume": 51, "mass": 3}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.Maths", "flare.util.Strings", "flare.scale.Scale", "flare.scale.QuantitativeScale", "flare.scale.ScaleType"]}, {"lines": [30, 134], "metadata": {"cc": 19, "volume": 104, "mass": 9}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.scale.ScaleType", "flare.util.Arrays", "flare.scale.Scale"]}, {"lines": [308, 382], "metadata": {"cc": 17, "volume": 74, "mass": 1}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.Maths", "flare.util.Strings", "flare.scale.Scale", "flare.scale.ScaleType"]}, {"lines": [406, 537], "metadata": {"cc": 43, "volume": 131, "mass": 8}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.util.Maths", "flare.util.Strings", "flare.scale.Scale"]}]}}, {"filename": "flare.util", "metadata": {"cc": 14.0, "volume": 188, "mass": 84}, "results": {"type-1": [{"lines": [208, 261], "metadata": {"cc": 17, "volume": 53, "mass": 24}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.IValueProxy", "flare.util.Property", "flare.util.IEvaluable"]}], "type-2": [{"lines": [67, 93], "metadata": {"cc": 22, "volume": 26, "mass": 22}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.IValueProxy", "flare.util.Property", "flare.util.IEvaluable"]}, {"lines": [211, 320], "metadata": {"cc": 17, "volume": 109, "mass": 38}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.Filter"]}]}}, {"filename": "flare.util.heap", "metadata": {"cc": 24.0, "volume": 349, "mass": 97}, "results": {"type-1": [{"lines": [461, 587], "metadata": {"cc": 42, "volume": 126, "mass": 48}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.heap.HeapNode"]}], "type-2": [{"lines": [404, 481], "metadata": {"cc": 32, "volume": 77, "mass": 14}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.heap.HeapNode"]}, {"lines": [167, 313], "metadata": {"cc": 22, "volume": 146, "mass": 35}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.util.heap.FibonacciHeap"]}]}}, {"filename": "flare.util.math", "metadata": {"cc": 15.75, "volume": 178, "mass": 87}, "results": {"type-1": [], "type-2": [{"lines": [495, 555], "metadata": {"cc": 21, "volume": 60, "mass": 2}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.util.math.IMatrix"]}, {"lines": [332, 423], "metadata": {"cc": 13, "volume": 91, "mass": 41}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": []}, {"lines": [116, 143], "metadata": {"cc": 29, "volume": 27, "mass": 44}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.math.IMatrix"]}]}}, {"filename": "flare.util.palette", "metadata": {"cc": 18.333333333333332, "volume": 208, "mass": 56}, "results": {"type-1": [{"lines": [202, 333], "metadata": {"cc": 6, "volume": 131, "mass": 48}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.util.palette.Palette", "flare.util.Colors"]}, {"lines": [254, 331], "metadata": {"cc": 49, "volume": 77, "mass": 8}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": []}], "type-2": []}}, {"filename": "flare.vis.axis", "metadata": {"cc": 26.857142857142858, "volume": 555, "mass": 115}, "results": {"type-1": [{"lines": [117, 168], "metadata": {"cc": 20, "volume": 51, "mass": 13}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.animate.Transitioner", "flare.vis.Visualization"]}], "type-2": [{"lines": [221, 261], "metadata": {"cc": 38, "volume": 40, "mass": 32}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.Visualization"]}, {"lines": [350, 479], "metadata": {"cc": 36, "volume": 129, "mass": 8}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transitioner", "flare.scale.LinearScale", "flare.util.Arrays", "flare.scale.ScaleType", "flare.util.Strings", "flare.display.TextSprite", "flare.scale.Scale", "flare.util.Stats", "flare.scale.IScaleMap", "flare.vis.axis.AxisLabel", "flare.vis.axis.AxisGridLine"]}, {"lines": [247, 365], "metadata": {"cc": 13, "volume": 118, "mass": 35}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.axis.Axis", "flare.display.LineSprite"]}, {"lines": [245, 347], "metadata": {"cc": 45, "volume": 102, "mass": 8}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.vis.axis.Axis", "flare.display.TextSprite"]}, {"lines": [432, 547], "metadata": {"cc": 36, "volume": 115, "mass": 19}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.animate.Transitioner", "flare.display.RectSprite", "flare.vis.axis.Axis", "flare.display.TextSprite", "flare.vis.axis.Axes", "flare.vis.Visualization", "flare.vis.axis.AxisGridLine"]}]}}, {"filename": "flare.vis.controls", "metadata": {"cc": 23.066666666666666, "volume": 975, "mass": 346}, "results": {"type-1": [{"lines": [152, 258], "metadata": {"cc": 30, "volume": 106, "mass": 28}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.vis.controls.Control", "flare.vis.Visualization", "flare.vis.operator.layout.Layout"]}, {"lines": [328, 425], "metadata": {"cc": 21, "volume": 97, "mass": 9}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.vis.events.SelectionEvent", "flare.vis.controls.Control"]}, {"lines": [26, 42], "metadata": {"cc": 34, "volume": 16, "mass": 32}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.controls.IControl", "flare.util.Filter"]}], "type-2": [{"lines": [410, 528], "metadata": {"cc": 28, "volume": 118, "mass": 49}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.controls.Control", "flare.vis.Visualization", "flare.vis.operator.layout.Layout"]}, {"lines": [191, 286], "metadata": {"cc": 5, "volume": 95, "mass": 5}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.events.SelectionEvent", "flare.vis.controls.Control"]}, {"lines": [4, 64], "metadata": {"cc": 46, "volume": 60, "mass": 28}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.controls.IControl", "flare.util.Filter"]}, {"lines": [397, 407], "metadata": {"cc": 36, "volume": 10, "mass": 34}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.controls.IControl", "flare.util.Arrays", "flare.vis.Visualization", "flare.vis.controls.Control"]}, {"lines": [32, 134], "metadata": {"cc": 23, "volume": 102, "mass": 31}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.controls.Control", "flare.vis.data.DataSprite"]}, {"lines": [290, 373], "metadata": {"cc": 6, "volume": 83, "mass": 3}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.controls.Control", "flare.vis.Visualization"]}, {"lines": [338, 426], "metadata": {"cc": 17, "volume": 88, "mass": 24}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.events.SelectionEvent", "flare.vis.controls.Control"]}, {"lines": [130, 223], "metadata": {"cc": 26, "volume": 93, "mass": 42}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.controls.Control"]}, {"lines": [358, 410], "metadata": {"cc": 9, "volume": 52, "mass": 10}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.util.Displays", "flare.vis.controls.Control"]}, {"lines": [112, 151], "metadata": {"cc": 33, "volume": 39, "mass": 35}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.vis.events.SelectionEvent", "flare.vis.controls.Control"]}, {"lines": [329, 345], "metadata": {"cc": 32, "volume": 16, "mass": 16}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Tween", "flare.display.TextSprite", "flare.vis.controls.Control", "flare.vis.events.TooltipEvent"]}]}}, {"filename": "flare.vis.data", "metadata": {"cc": 26.0, "volume": 940, "mass": 284}, "results": {"type-1": [{"lines": [432, 488], "metadata": {"cc": 37, "volume": 56, "mass": 49}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.data.EdgeSprite", "flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.vis.data.DataSprite", "flare.vis.data.Tree", "flare.vis.events.DataEvent", "flare.data.DataSet", "flare.vis.data.TreeBuilder", "flare.vis.data.DataList", "flare.data.DataSchema", "flare.util.Sort", "flare.data.DataField", "flare.util.Property"]}, {"lines": [208, 337], "metadata": {"cc": 41, "volume": 129, "mass": 48}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.util.math.DenseMatrix", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite", "flare.vis.events.DataEvent", "flare.util.Stats", "flare.util.math.IMatrix", "flare.util.Sort", "flare.util.Filter", "flare.util.Property", "flare.util.IEvaluable", "flare.vis.data.Data"]}, {"lines": [205, 261], "metadata": {"cc": 38, "volume": 56, "mass": 13}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.Colors", "flare.vis.data.Data", "flare.display.DirtySprite", "flare.vis.data.render.IRenderer", "flare.vis.data.render.ShapeRenderer"]}, {"lines": [497, 637], "metadata": {"cc": 0, "volume": 140, "mass": 0}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.vis.data.render.EdgeRenderer", "flare.vis.data.DataSprite", "flare.vis.data.NodeSprite", "flare.vis.data.render.ArrowType", "flare.vis.data.Data"]}, {"lines": [330, 414], "metadata": {"cc": 49, "volume": 84, "mass": 29}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.util.Arrays", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite", "flare.vis.data.Tree", "flare.util.Sort", "flare.util.Filter", "flare.util.IEvaluable", "flare.vis.data.Data"]}, {"lines": [132, 188], "metadata": {"cc": 29, "volume": 56, "mass": 20}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.scale.TimeScale", "flare.scale.ScaleType", "flare.scale.LinearScale", "flare.scale.LogScale", "flare.scale.OrdinalScale", "flare.scale.RootScale", "flare.scale.Scale", "flare.scale.QuantileScale", "flare.util.Stats", "flare.scale.QuantitativeScale", "flare.vis.events.DataEvent", "flare.vis.data.Data"]}, {"lines": [345, 489], "metadata": {"cc": 33, "volume": 144, "mass": 3}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.vis.data.EdgeSprite", "flare.vis.events.DataEvent", "flare.vis.data.NodeSprite", "flare.vis.data.Data"]}], "type-2": [{"lines": [318, 321], "metadata": {"cc": 23, "volume": 3, "mass": 14}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.data.EdgeSprite", "flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.vis.data.DataSprite", "flare.vis.data.Tree", "flare.vis.events.DataEvent", "flare.data.DataSet", "flare.vis.data.TreeBuilder", "flare.vis.data.DataList", "flare.data.DataSchema", "flare.util.Sort", "flare.data.DataField", "flare.util.Property"]}, {"lines": [174, 245], "metadata": {"cc": 17, "volume": 71, "mass": 14}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.util.math.DenseMatrix", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite", "flare.vis.events.DataEvent", "flare.util.Stats", "flare.util.math.IMatrix", "flare.util.Sort", "flare.util.Filter", "flare.util.Property", "flare.util.IEvaluable", "flare.vis.data.Data"]}, {"lines": [479, 556], "metadata": {"cc": 40, "volume": 77, "mass": 48}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.Colors", "flare.vis.data.Data", "flare.display.DirtySprite", "flare.vis.data.render.IRenderer", "flare.vis.data.render.ShapeRenderer"]}, {"lines": [485, 609], "metadata": {"cc": 5, "volume": 124, "mass": 46}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.data.render.EdgeRenderer", "flare.vis.data.DataSprite", "flare.vis.data.NodeSprite", "flare.vis.data.render.ArrowType", "flare.vis.data.Data"]}]}}, {"filename": "flare.vis.data.render", "metadata": {"cc": 22.166666666666668, "volume": 353, "mass": 150}, "results": {"type-1": [{"lines": [445, 511], "metadata": {"cc": 20, "volume": 66, "mass": 47}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": []}], "type-2": [{"lines": [355, 502], "metadata": {"cc": 36, "volume": 147, "mass": 42}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": []}, {"lines": [164, 225], "metadata": {"cc": 5, "volume": 61, "mass": 9}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.vis.data.EdgeSprite", "flare.vis.data.NodeSprite", "flare.vis.data.DataSprite", "flare.vis.data.render.IRenderer", "flare.util.Shapes", "flare.util.Geometry", "flare.vis.data.render.ArrowType"]}, {"lines": [197, 240], "metadata": {"cc": 38, "volume": 43, "mass": 5}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.data.DataSprite"]}, {"lines": [469, 505], "metadata": {"cc": 34, "volume": 36, "mass": 47}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.util.Shapes", "flare.vis.data.render.IRenderer", "flare.vis.data.DataSprite"]}]}}, {"filename": "flare.vis.events", "metadata": {"cc": 30.75, "volume": 212, "mass": 103}, "results": {"type-1": [{"lines": [2, 2], "metadata": {"cc": 42, "volume": 0, "mass": 43}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.vis.data.EdgeSprite", "flare.vis.data.NodeSprite", "flare.vis.data.DataList", "flare.vis.data.DataSprite"]}, {"lines": [374, 472], "metadata": {"cc": 40, "volume": 98, "mass": 30}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.events.DataEvent"]}], "type-2": [{"lines": [354, 468], "metadata": {"cc": 41, "volume": 114, "mass": 30}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.data.EdgeSprite", "flare.vis.data.NodeSprite", "flare.vis.data.DataList", "flare.vis.data.DataSprite"]}]}}, {"filename": "flare.vis.legend", "metadata": {"cc": 0.0, "volume": 0, "mass": 0}, "results": {"type-1": [], "type-2": []}}, {"filename": "flare.vis.operator.distortion", "metadata": {"cc": 18.0, "volume": 34, "mass": 44}, "results": {"type-1": [{"lines": [490, 524], "metadata": {"cc": 36, "volume": 34, "mass": 44}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.operator.distortion.Distortion"]}], "type-2": []}}, {"filename": "flare.vis.operator.encoder", "metadata": {"cc": 6.333333333333333, "volume": 205, "mass": 18}, "results": {"type-1": [{"lines": [106, 162], "metadata": {"cc": 0, "volume": 56, "mass": 18}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.Transitioner", "flare.scale.ScaleType", "flare.vis.operator.encoder.Encoder", "flare.util.palette.Palette", "flare.util.palette.ColorPalette", "flare.vis.data.Data"]}], "type-2": [{"lines": [49, 198], "metadata": {"cc": 19, "volume": 149, "mass": 0}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.scale.ScaleType", "flare.vis.operator.encoder.Encoder", "flare.util.palette.Palette", "flare.util.palette.ColorPalette", "flare.vis.data.Data"]}]}}, {"filename": "flare.vis.operator.filter", "metadata": {"cc": 17.333333333333332, "volume": 403, "mass": 82}, "results": {"type-1": [{"lines": [23, 51], "metadata": {"cc": 23, "volume": 28, "mass": 8}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite", "flare.vis.data.Tree", "flare.vis.operator.Operator", "flare.vis.data.Data"]}, {"lines": [395, 534], "metadata": {"cc": 6, "volume": 139, "mass": 9}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.operator.Operator", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite"]}, {"lines": [197, 219], "metadata": {"cc": 21, "volume": 22, "mass": 43}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.operator.Operator", "flare.animate.Transitioner", "flare.util.Filter", "flare.vis.data.DataSprite", "flare.vis.data.Data"]}], "type-2": [{"lines": [174, 303], "metadata": {"cc": 33, "volume": 129, "mass": 18}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite", "flare.vis.data.Tree", "flare.vis.operator.Operator", "flare.vis.data.Data"]}, {"lines": [91, 176], "metadata": {"cc": 21, "volume": 85, "mass": 4}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.operator.Operator", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite"]}]}}, {"filename": "flare.vis.operator", "metadata": {"cc": 19.666666666666668, "volume": 422, "mass": 135}, "results": {"type-1": [{"lines": [426, 477], "metadata": {"cc": 12, "volume": 51, "mass": 15}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transitioner", "flare.vis.Visualization", "flare.vis.operator.Operator"]}], "type-2": [{"lines": [497, 564], "metadata": {"cc": 10, "volume": 67, "mass": 16}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.Visualization", "flare.vis.operator.Operator"]}, {"lines": [27, 117], "metadata": {"cc": 37, "volume": 90, "mass": 13}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.Transitioner", "flare.vis.operator.IOperator", "flare.util.Property", "flare.util.IEvaluable", "flare.vis.Visualization"]}, {"lines": [347, 494], "metadata": {"cc": 16, "volume": 147, "mass": 49}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.util.Arrays", "flare.vis.operator.IOperator", "flare.vis.Visualization", "flare.vis.operator.Operator"]}, {"lines": [310, 377], "metadata": {"cc": 43, "volume": 67, "mass": 42}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.animate.Transitioner", "flare.util.Arrays", "flare.vis.operator.IOperator", "flare.vis.operator.OperatorList", "flare.animate.FunctionSequence", "flare.vis.operator.Operator"]}]}}, {"filename": "flare.vis.operator.label", "metadata": {"cc": 23.333333333333332, "volume": 100, "mass": 63}, "results": {"type-1": [], "type-2": [{"lines": [278, 300], "metadata": {"cc": 45, "volume": 22, "mass": 25}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transitioner", "flare.vis.data.DataSprite", "flare.display.TextSprite", "flare.vis.operator.Operator", "flare.util.Shapes", "flare.util.Filter", "flare.util.Property", "flare.util.IEvaluable", "flare.vis.data.Data"]}, {"lines": [371, 449], "metadata": {"cc": 25, "volume": 78, "mass": 38}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.vis.operator.label.Labeler", "flare.util.Shapes", "flare.display.TextSprite", "flare.vis.data.DataSprite", "flare.vis.data.Data"]}]}}, {"filename": "flare.vis.operator.layout", "metadata": {"cc": 25.866666666666667, "volume": 1084, "mass": 417}, "results": {"type-1": [{"lines": [358, 431], "metadata": {"cc": 36, "volume": 73, "mass": 12}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.scale.ScaleType", "flare.vis.data.DataSprite", "flare.vis.axis.CartesianAxes", "flare.vis.data.ScaleBinding", "flare.util.Property", "flare.vis.operator.layout.Layout", "flare.vis.data.Data"]}, {"lines": [33, 174], "metadata": {"cc": 25, "volume": 141, "mass": 48}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite", "flare.util.Shapes", "flare.vis.operator.layout.Layout", "flare.vis.operator.Operator"]}, {"lines": [352, 362], "metadata": {"cc": 36, "volume": 10, "mass": 32}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.vis.data.NodeSprite", "flare.vis.data.DataList", "flare.vis.data.ScaleBinding", "flare.util.Property", "flare.vis.operator.layout.Layout", "flare.vis.data.Data"]}, {"lines": [83, 222], "metadata": {"cc": 43, "volume": 139, "mass": 9}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.data.NodeSprite", "flare.vis.data.render.ShapeRenderer", "flare.util.Shapes", "flare.util.Sort", "flare.vis.operator.layout.Layout", "flare.vis.data.Data"]}, {"lines": [453, 598], "metadata": {"cc": 8, "volume": 145, "mass": 32}, "snippit": "\n            \tint lowSLOC = 0;\n\tint moderateSLOC = 0;\n\tint highSLOC = 0;\n\tint veryHighSLOC = 0;", "edges": ["flare.util.Property", "flare.vis.data.NodeSprite", "flare.util.Orientation", "flare.vis.operator.layout.Layout", "flare.vis.data.EdgeSprite"]}, {"lines": [254, 320], "metadata": {"cc": 48, "volume": 66, "mass": 24}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.physics.Simulation", "flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.DataSprite", "flare.physics.Particle", "flare.physics.Spring", "flare.vis.operator.layout.Layout", "flare.vis.data.EdgeSprite", "flare.vis.data.Data"]}, {"lines": [393, 516], "metadata": {"cc": 23, "volume": 123, "mass": 20}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.vis.data.NodeSprite", "flare.util.Orientation", "flare.vis.operator.layout.Layout"]}, {"lines": [213, 253], "metadata": {"cc": 32, "volume": 40, "mass": 45}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.vis.operator.layout.Layout", "flare.vis.data.EdgeSprite"]}, {"lines": [164, 313], "metadata": {"cc": 25, "volume": 149, "mass": 37}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.data.NodeSprite", "flare.vis.data.DataList", "flare.vis.data.DataSprite", "flare.vis.data.EdgeSprite", "flare.vis.Visualization", "flare.vis.axis.CartesianAxes", "flare.vis.axis.Axes", "flare.animate.TransitionEvent", "flare.vis.operator.Operator"]}, {"lines": [264, 343], "metadata": {"cc": 8, "volume": 79, "mass": 47}, "snippit": "\tint volume = gevolume(modulesAndAsts.modules);\n\ttuple[int, int, int, int] unitSize = getUnitSize(modulesAndAsts.methods);\n\ttuple[int, int, int, int] complexity = getComplexity(modulesAndAsts.asts);\n\ttuple[int, int, int, int] interfacing = getInterfacing(modulesAndAsts.asts);\n\ttuple[int dupCodeBlockCount, int analyizedLines, real result] duplication = getDuplicateCodeCount(modulesAndAsts.asts);\n    ", "edges": ["flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.util.Orientation", "flare.vis.operator.layout.Layout"]}, {"lines": [274, 278], "metadata": {"cc": 27, "volume": 4, "mass": 30}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.vis.data.DataList", "flare.vis.data.DataSprite", "flare.util.Shapes", "flare.util.Property", "flare.vis.operator.layout.Layout", "flare.vis.data.Data"]}, {"lines": [242, 265], "metadata": {"cc": 17, "volume": 23, "mass": 22}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.vis.data.NodeSprite", "flare.util.Arrays", "flare.vis.operator.layout.Layout"]}, {"lines": [28, 77], "metadata": {"cc": 19, "volume": 49, "mass": 36}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.vis.operator.layout.Layout", "flare.vis.data.DataSprite", "flare.vis.data.Data"]}, {"lines": [33, 76], "metadata": {"cc": 41, "volume": 43, "mass": 23}, "snippit": "visit(asts){\n\t\tcase \\do(_, _): count += 1;\n\t\tcase \\foreach(_, _, _): count += 1;\n\t\tcase \\for(_, _, _, _): count += 1;\n\t\tcase \\for(_, _, _): count += 1;\n\t\tcase \\case(_): count += 1;\n\t\tcase \\defaultCase(): count += 1;\n\t\tcase \\catch(_, _): count += 1;\n\t\tcase \\while(_, _): count += 1;\n\t\tcase \\if(_, _): count += 1;\n\t\tcase \\if(_, _, _): count += 1;\n\t\tcase \\conditional(_, _, _): count += 1;\n\t\tcase \\infix(_, \"&&\", _): count += 1;\t\t\n\t\tcase \\infix(_, \"||\", _): count += 1;\n\t}", "edges": ["flare.scale.TimeScale", "flare.scale.LinearScale", "flare.util.Arrays", "flare.scale.OrdinalScale", "flare.vis.data.NodeSprite", "flare.scale.Scale", "flare.vis.axis.CartesianAxes", "flare.util.Stats", "flare.util.Orientation", "flare.scale.QuantitativeScale", "flare.util.Maths", "flare.vis.operator.layout.Layout"]}], "type-2": []}}, {"filename": "flare.vis", "metadata": {"cc": 12.0, "volume": 108, "mass": 24}, "results": {"type-1": [{"lines": [408, 439], "metadata": {"cc": 11, "volume": 31, "mass": 4}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.operator.IOperator", "flare.animate.Scheduler", "flare.vis.events.VisualizationEvent", "flare.vis.data.Tree", "flare.vis.events.DataEvent", "flare.vis.axis.Axes", "flare.vis.axis.CartesianAxes", "flare.util.Displays", "flare.vis.operator.OperatorList", "flare.vis.controls.ControlList", "flare.animate.ISchedulable", "flare.vis.data.Data"]}], "type-2": [{"lines": [198, 275], "metadata": {"cc": 25, "volume": 77, "mass": 20}, "snippit": "\t\t\tif (cc >= 1 && cc < 11) {\n\t\t\t\tlowSLOC += methodSLOC;\n\t\t\t} else if (cc >= 11 && cc < 21) {\n\t\t\t\tmoderateSLOC += methodSLOC;\n\t\t\t} else if (cc >= 21 && cc < 51 ) {\n\t\t\t\thighSLOC += methodSLOC;\n\t\t\t} else {\n\t\t\t\tveryHighSLOC += methodSLOC;\n\t\t\t}", "edges": ["flare.animate.Transitioner", "flare.vis.operator.IOperator", "flare.animate.Scheduler", "flare.vis.events.VisualizationEvent", "flare.vis.data.Tree", "flare.vis.events.DataEvent", "flare.vis.axis.Axes", "flare.vis.axis.CartesianAxes", "flare.util.Displays", "flare.vis.operator.OperatorList", "flare.vis.controls.ControlList", "flare.animate.ISchedulable", "flare.vis.data.Data"]}]}}]};
