[
		{"name":"src/smallsql/junit/TestTokenizer.java/L-147","size":1,"imports":["src/smallsql/junit/TestTokenizer.java/L-87"],"snippet":"catch (SQLException e) {\n\t\t\tout.println(\"REGULAR: \" + e.getMessage() + '\\n');\n\t\t}\n\t}\n\tprivate void failureTest(String sql, String failureMessage, String expected) {\n\t\ttry {\n\t\t\tstat.executeQuery(sql);\n\t\t\tfail(failureMessage);\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tString foundMsg = e.getMessage();\n\t\t\tString assertMsg\n"},
{"name":"src/smallsql/junit/TestTokenizer.java/L-87","size":1,"imports":["src/smallsql/junit/TestTokenizer.java/L-147"],"snippet":"catch (SQLException e) {\n\t\t\tout.println(\"REGULAR: \" + e.getMessage() + '\\n');\n\t\t}\n\t}\n\tpublic void testSingleLine() throws SQLException {\n\t\tfinal String SQL_1 = \n\t\t\t\"SELECT 10\/2--mycomment\\n\" + \n\t\t\t\" , -- mycomment    \\r\\n\" +\n\t\t\t\"id, SUM(myint)--my comment  \\n\\n\" +\n\t\t\t\"FROM \" + TABLE_NAME + \" -- my other comment \\\n"},
{"name":"src/smallsql/junit/TestOperatoren.java/L-113","size":1,"imports":["src/smallsql/junit/TestJoins.java/L-119"],"snippet":"PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");\n"},
{"name":"src/smallsql/junit/TestJoins.java/L-119","size":1,"imports":["src/smallsql/junit/TestOperatoren.java/L-113"],"snippet":"PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1332","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1239"],"snippet":"if(token2 != null && token2.value == SQLTokenizer.POINT){\n                                    expr.setNameAfterTableAlias( nextIdentifier() );\n                                }else{\n                                    previousToken();\n                                }\n                                if(isMinus)\n                                    return new ExpressionArithmetic( expr,  ExpressionArithmetic.NEGATIVE );\n                                return expr;\n                            }\n                        }\n            }\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1239","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1332"],"snippet":"if(token2 != null && token2.value == SQLTokenizer.POINT){\n                            expr.setNameAfterTableAlias( nextIdentifier() );\n                        }else{\n                            previousToken();\n                        }\n                        return expr;\n                        }\n                case SQLTokenizer.TRUE:\n                        return new ExpressionValue( Boolean.TRUE, SQLTokenizer.BOOLEAN );\n                case SQLTokenizer.FALSE:\n"},
{"name":"src/smallsql/database/CommandSelect.java/L-436","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-478","src/smallsql/database/Command.java/L-138","src/smallsql/database/CommandSelect.java/L-494"],"snippet":"catch(Throwable e){\n\t\t\tcon.rollback(savepoint);\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}finally{\n\t\t\tif(con.getAutoCommit()) con.commit();\n\t\t}\n\t}\n\tfinal void insertRow(SSConnection con, Expression[] newRowSources) throws SQLException{\n\t\tif(tables.size() > 1)\n\t\t\tthrow SmallSQLException.create(Language.JOIN_INSERT);\n\t\tif(tables.size() \n"},
{"name":"src/smallsql/database/CommandSelect.java/L-478","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-436","src/smallsql/database/Command.java/L-138","src/smallsql/database/CommandSelect.java/L-494"],"snippet":"catch(Throwable e){\n\t\t\tcon.rollback(savepoint);\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}finally{\n\t\t\tif(con.getAutoCommit()) con.commit();\n\t\t}\n\t}\n\tfinal void deleteRow(SSConnection con) throws SQLException{\n\t\tint savepoint = con.getSavepoint();\n\t\ttry{\n\t\t\tif(tables.size() > 1)\n\t\t\t\tthrow SmallSQLException.create(Language.JOIN_DELETE);\n"},
{"name":"src/smallsql/database/Command.java/L-138","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-436","src/smallsql/database/CommandSelect.java/L-478","src/smallsql/database/CommandSelect.java/L-494"],"snippet":"catch(Throwable e){\n            con.rollback(savepoint);\n            throw SmallSQLException.createFromException(e);\n        }finally{\n            if(con.getAutoCommit()) con.commit();\n        }\n    }\n    abstract void executeImpl(SSConnection con, SSStatement st) throws Exception;\n    SSResultSet getQueryResult() throws SQLException{\n        if(rs == null)\n        \tthrow SmallSQLException.create(Language.R\n"},
{"name":"src/smallsql/database/CommandSelect.java/L-494","size":1,"imports":["src/smallsql/database/CommandSelect.java/L-436","src/smallsql/database/CommandSelect.java/L-478","src/smallsql/database/Command.java/L-138"],"snippet":"catch(Throwable e){\n\t\t\tcon.rollback(savepoint);\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}finally{\n\t\t\tif(con.getAutoCommit()) con.commit();\n\t\t}\n\t}\n\tpublic int findColumn(String columnName) throws SQLException {\n\t\tExpressions columns = columnExpressions;\n\t\tfor(i\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-182","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-753"],"snippet":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-753","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-182"],"snippet":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};\n"},
{"name":"src/smallsql/junit/TestAlterTable2.java/L-45","size":1,"imports":["src/smallsql/junit/TestAlterTable2.java/L-75"],"snippet":"st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\n        rs = con.getMetaData().getIndexInfo( null\n"},
{"name":"src/smallsql/junit/TestAlterTable2.java/L-75","size":1,"imports":["src/smallsql/junit/TestAlterTable2.java/L-45"],"snippet":"st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\n        rs = con.getMetaData().getIndexInfo( null\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-618","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-655"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n            byte bytes[] = new byte[1024];\n            for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n            fos.close();\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n            long time = -System.currentTimeMillis(\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-655","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-618"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n            byte bytes[] = new byte[1024];\n            for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n            fos.close();\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n            long time = -System.currentTimeMillis(\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-629","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-670"],"snippet":"pr.close();\n            time += System.currentTimeMillis();\n            System.out.println( \"  Test time: \" + time + \" ms\");\n            fis.close();\n            java.io.File file = new java.io.File(tableName+\".bin\");\n            file.delete();\n        }catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-670","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-629"],"snippet":"pr.close();\n            time += System.currentTimeMillis();\n            System.out.println( \"  Test time: \" + time + \" ms\");\n            fis.close();\n            java.io.File file = new java.io.File(tableName+\".bin\");\n            file.delete();\n        }catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void createTes\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-125","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_DeleteAll(Connection con){\n        System.out.println();\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-150","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_InsertEmptyRow\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-184","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_DeleteRows(Connection con){\n        System.out.println();\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-237","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_InsertRows(Connection con){\n        System.out.println();\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-358","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_UpdateRows(Connection con){\n        System.out.println();\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-394","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\" + e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_UpdateRowsPrepare(Connection con){\n        System.out.println();\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-443","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_UpdateRowsPrepareSP(Connection con){\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-498","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_UpdateRowsPrepareBatch(Connection con){\n        int bat\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-553","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_Scroll_getXXX(Connection con){\n        Syste\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-600","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-676","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_UpdateLargeBinary(Connection con){\n        System.out.println();\n        Syst\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-676","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-635"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void createTestTable(Connection con) throws SQLException{\n            Statement st;\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-635","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-125","src/smallsql/junit/BenchTest.java/L-150","src/smallsql/junit/BenchTest.java/L-184","src/smallsql/junit/BenchTest.java/L-237","src/smallsql/junit/BenchTest.java/L-358","src/smallsql/junit/BenchTest.java/L-394","src/smallsql/junit/BenchTest.java/L-443","src/smallsql/junit/BenchTest.java/L-498","src/smallsql/junit/BenchTest.java/L-553","src/smallsql/junit/BenchTest.java/L-600","src/smallsql/junit/BenchTest.java/L-676"],"snippet":"catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_UpdateLargeBinaryWithSP(Connection con){\n        System.out.\n"},
{"name":"src/smallsql/database/ExpressionFunctionInsert.java/L-77","size":1,"imports":["src/smallsql/database/ExpressionFunctionInsert.java/L-62"],"snippet":"if(length < 0) \n            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));\n        buffer.append(str.substring(start+length));\n\t\treturn buffer.toString()\n"},
{"name":"src/smallsql/database/ExpressionFunctionInsert.java/L-62","size":1,"imports":["src/smallsql/database/ExpressionFunctionInsert.java/L-77"],"snippet":"if(length < 0) \n            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));\n        buffer.write(bytes, start+length, bytes.length-start-length);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-178","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-119"],"snippet":"rs.next();\n            int count = rs.getInt(1);\n            if (count != rowCount)\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\n            else System.out.println( \"  Test time: \" + time + \" ms\");\n            st.close();\n        }catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_DeleteRows(Connection con){\n        System.out.println();\n        System.out.println( \"Test delete rows with deleteRow(): \" + row\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-119","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-178"],"snippet":"rs.next();\n            int count = rs.getInt(1);\n            if (count != rowCount)\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\n            else System.out.println( \"  Test time: \" + time + \" ms\");\n            st.close();\n        }catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n    static void test_DeleteAll(Connection con){\n        System.out.println();\n        System.out.println( \"Test delete all rows: \" + rowCount + \" rows\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLo\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLo\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLo\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-111","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-139"],"snippet":"return -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIndexNode node = status.nodes[idx];\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, st\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-139","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-111"],"snippet":"\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIndexNode node = status.nodes[idx];\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, st\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1862","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1874","src/smallsql/database/SQLParser.java/L-1868"],"snippet":"token = nextToken(MISSING_OUTER_JOIN);\n                \tif(token.value == SQLTokenizer.OUTER)\n                \t\ttoken = nextToken(MISSING_JOIN);\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1874","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1862","src/smallsql/database/SQLParser.java/L-1868"],"snippet":"token = nextToken(MISSING_OUTER_JOIN);\n\t\t\t\t\tif(token.value == SQLTokenizer.OUTER)\n\t\t\t\t\t\ttoken = nextToken(MISSING_JOIN);\n\t\t\t\t\tfromSource = join(\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1868","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1862","src/smallsql/database/SQLParser.java/L-1874"],"snippet":"token = nextToken(MISSING_OUTER_JOIN);\n                \tif(token.value == SQLTokenizer.OUTER)\n                \t\ttoken = nextToken(MISSING_JOIN);\n\t\t\t\t\tfromSo\n"},
{"name":"src/smallsql/database/Database.java/L-395","size":1,"imports":["src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-505","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n\t\trows.toArray(result);\n\t\treturn\n"},
{"name":"src/smallsql/database/Database.java/L-438","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-505","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n\t\trows.toArray(result);\n\t\treturn\n"},
{"name":"src/smallsql/database/Database.java/L-474","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-505","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n\t\trows.toArray(result);\n\t\treturn\n"},
{"name":"src/smallsql/database/Database.java/L-505","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-542"],"snippet":"Object[][] result = new Object[rows.size()][];\n\t\trows.toArray(result);\n\t\treturn\n"},
{"name":"src/smallsql/database/Database.java/L-542","size":1,"imports":["src/smallsql/database/Database.java/L-395","src/smallsql/database/Database.java/L-438","src/smallsql/database/Database.java/L-474","src/smallsql/database/Database.java/L-505"],"snippet":"Object[][] result = new Object[rows.size()][];\n\t\trows.toArray(result);\n\t\treturn\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-110","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-678"],"snippet":"String[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-678","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-110"],"snippet":"String[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-474","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-503","src/smallsql/database/MutableNumeric.java/L-550","src/smallsql/database/MutableNumeric.java/L-526"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-503","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-474","src/smallsql/database/MutableNumeric.java/L-550","src/smallsql/database/MutableNumeric.java/L-526"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-550","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-474","src/smallsql/database/MutableNumeric.java/L-503","src/smallsql/database/MutableNumeric.java/L-526"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-526","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-474","src/smallsql/database/MutableNumeric.java/L-503","src/smallsql/database/MutableNumeric.java/L-550"],"snippet":"                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\n"},
{"name":"src/smallsql/database/GroupResult.java/L-111","size":1,"imports":["src/smallsql/database/GroupResult.java/L-89"],"snippet":"{\n\t\t\tint idx = internalExpressions.indexOf(expr);\n\t\t\tif(idx >= 0) return idx;\n\t\t\tinternalExpressions.add(expr);\n\t\t\treturn internalExpressions.size()-1;\n\t\t}else{\n\t\t\tint idx = internalExpressions.indexOf(expr);\n\t\t\ti\n"},
{"name":"src/smallsql/database/GroupResult.java/L-89","size":1,"imports":["src/smallsql/database/GroupResult.java/L-111"],"snippet":"{\n\t\t\tint idx = internalExpressions.indexOf(expr);\n\t\t\tif(idx >= 0) return idx;\n\t\t\tinternalExpressions.add(expr);\n\t\t\treturn internalExpressions.size()-1;\n\t\t}\n\t}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-119","size":1,"imports":["src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-87","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-92","src/smallsql/database/ExpressionFunctionTimestampAdd.java/L-97","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-109","src/smallsql/database/ExpressionFunctionTimestampDiff.java/L-114"],"snippet":"DateTime.Details details2 = new DateTime.Details(param2.getLong());\n"},
{"name":"src/smallsql/database/SQLParser.java/L-849","size":1,"imports":["src/smallsql/database/SQLParser.java/L-839"],"snippet":"try{\n\t\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );\n\t\t\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcol.setScale(value);\n\t\t\t\t\t\tnextToken( MISSING_PARENTHESIS_R );\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tcol.setPrecision(18); \/\/default Precision for decimal and numeric\n                    previousToken();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tcol.setDataType( dataType );\n\t\treturn col;\n    }\n    private CommandCreateView createVie\n"},
{"name":"src/smallsql/database/SQLParser.java/L-839","size":1,"imports":["src/smallsql/database/SQLParser.java/L-849"],"snippet":"try{\n\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );\n\t\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );\n\t\t\t\t\t}\n\t\t\t\t\tcol.setPrecision(value);\n\t\t\t\t\ttoken = nextToken( MISSING_COMMA_PARENTHESIS );\n\t\t\t\t\tif(token.value == SQLTokenizer.COMMA){\n\t\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );\n\t\t\t\t\t\t}catch(Exception e){\n"},
{"name":"src/smallsql/database/Index.java/L-330","size":1,"imports":["src/smallsql/database/Index.java/L-350"],"snippet":"char digit = (char)(key >> (i<<4));\n"},
{"name":"src/smallsql/database/Index.java/L-350","size":1,"imports":["src/smallsql/database/Index.java/L-330"],"snippet":"char digit = (char)(key >> (i<<4));\n"},
{"name":"src/smallsql/database/ExpressionFunctionTan.java/L-38","size":1,"imports":[],"snippet":"{ return SQLTokenizer.TAN; }\n    final double getDouble() throws Exception{\n\t\tif(isNull()) return 0;\n        return Math.tan( param1.getDouble() );\n    }\n}\n"},
{"name":"src/smallsql/database/ExpressionFunctionSubstring.java/L-80","size":1,"imports":["src/smallsql/database/ExpressionFunctionSubstring.java/L-59"],"snippet":"int length = param3.getInt();\n\t\tif(length < 0) \n\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));\n\t\tlength = Math.min( length, strLen-start );\n\t\treturn str.substring(start,\n"},
{"name":"src/smallsql/database/ExpressionFunctionSubstring.java/L-59","size":1,"imports":["src/smallsql/database/ExpressionFunctionSubstring.java/L-80"],"snippet":"int length = param3.getInt();\n\t\tif(length < 0) \n\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));\n\t\tif(start == 0 && byteLen == length) return bytes;\n\t\tif(byteLen > length \n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-296","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-951"],"snippet":"String[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-951","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-296"],"snippet":"String[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-93","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-664"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-664","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-93"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-423","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-338"],"snippet":"assertTrue( rs.next() );\n\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\tassertNull(oldValue);\n\t\tassertTrue( rs.next() );\n\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\tint count = 1;\n\t\twhile(rs.next()){\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\t\tcount++;\n\t\t}\n\t\tassertEquals( valueCount, count );\n\t}\n\tpublic void testOrderBy_int_desc() throws Exception{\n\t\tinit();\n\t\tConnection con = AllTests.getConnection();\n\t\tStatement st = con.createStatement();\n\t\tResultSet rs;\n\t\tInteger oldValue;\n\t\trs \n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-338","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-423"],"snippet":"assertTrue( rs.next() );\n\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\tassertNull(oldValue);\n\t\tassertTrue( rs.next() );\n\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\tint count = 1;\n\t\twhile(rs.next()){\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\n\t\t\tcount++;\n\t\t}\n\t\tassertEquals( valueCount, count );\n\t}\n\tpublic void test_function() throws Exception{\n\t\tinit();\n\t\tConnection con = AllTests.getConnection();\n\t\tStatement st = con.createStatement();\n\t\tResultSet rs;\n\t\tint oldValue;\n\t\trs = st.execut\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-224","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-271"],"snippet":"int octet = (int)(value >> shift) & 0xFFFF;\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-271","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-224"],"snippet":"int octet = (int)(value >> shift) & 0xFFFF;\n"},
{"name":"src/smallsql/database/Index.java/L-128","size":1,"imports":["src/smallsql/database/Index.java/L-101"],"snippet":"if(page == null)\n                return null;\n            if(i + 1 == count)\n                return page.getValue();\n            else\n                page = (IndexNode)page.getValue();\n        }\n        throw new Error();\n    }\n"},
{"name":"src/smallsql/database/Index.java/L-101","size":1,"imports":["src/smallsql/database/Index.java/L-128"],"snippet":"if(page == null)\n                return null;\n            if(i + 1 == count)\n                return page.getValue();\n            else\n                page = (IndexNode)page.getValue();\n        }\n        throw new Error();\n    }\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-104","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-84"],"snippet":"{\n\t\t\t\trecreateTestTab(stat);\n\t\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\n\t\t\t\tfail();\n\t\t\t}\n\t\t\tcatch(SQLException e) {\n\t\t\t\tassertMessage(e, \"La tabella\/vista '\" + TABLE_NAME + \"' è già esistente.\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);\n\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);\n\t\t\t}\n\t\t\tcatch (SQLException e) {\n\t\t\t\tassertMessage(e, \"Non si può effettuare DROP della tabella\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tstat.execut\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-84","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-104"],"snippet":"{\n\t\t\trecreateTestTab(stat);\n\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\n\t\t\tfail();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tassertMessage(e, \"La tabella\/vista '\" + TABLE_NAME + \"' è già esistente.\");\n\t\t}\n\t\tfinally {\n\t\t\tLocale.setDefault(origLocale);\n\t\t\tconn.close();\n\t\t}\n\t}\n\tpublic void testLocalizedErrors() throws Exception {\n\t\tConnection conn = AllTests.createConnection(\"?locale=it\", null);\n\t\tStatement stat = conn.createStatement();\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-134","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-162"],"snippet":"assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-162","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-134"],"snippet":"assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-82","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-92"],"snippet":"StorePage storePage = new StorePage( null, -1, file, offset);\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-92","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-82"],"snippet":"StorePage storePage = new StorePage( null, -1, file, offset);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-363","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-377","src/smallsql/database/StoreImpl.java/L-398"],"snippet":"page[ offset++ ] = (byte)(value >> 8);\n        page[ offset++ ] = (byt\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-377","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-363","src/smallsql/database/StoreImpl.java/L-398"],"snippet":"page[ offset++ ] = (byte)(value >> 8);\n        page[ offset++ ] = (byt\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-398","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-363","src/smallsql/database/StoreImpl.java/L-377"],"snippet":"page[ offset++ ] = (byte)(value >> 8);\n        page[ offset++ ] = (byt\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-130","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-143"],"snippet":"int k=tmp.length-1;\n                for(; k>= 0; k--) if(tmp[k] != 0) break;\n                k++;\n                byte[] tmp2 = new byte[k];\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-143","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-130"],"snippet":"int k=tmp.length-1;\n\t\t\t\tfor(; k>= 0; k--) if(tmp[k] != 0) break;\n\t\t\t\tk++;\n\t\t\t\tbyte[] tmp2 = new byte[k];\n\t\t\t\tSystem.arraycopy( tmp, 0, tmp2, 0, k);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-67","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-99","src/smallsql/junit/TestScrollable.java/L-173","src/smallsql/junit/TestScrollable.java/L-135"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException( \"01000\", 0, ex );\n        }\n    }\n\tpublic void testNextWithWhere() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\n\t\t\tassertRowCount( 1, \"\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-99","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-67","src/smallsql/junit/TestScrollable.java/L-173","src/smallsql/junit/TestScrollable.java/L-135"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException( \"01000\", 0, ex);\n        }\n    }\n\tpublic void testFirstWithWhere() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\n\t\t\tassertRowCount(\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-173","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-67","src/smallsql/junit/TestScrollable.java/L-99","src/smallsql/junit/TestScrollable.java/L-135"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException(\"01000\", 0, ex);\n        }\n    }\n\tpublic void testAbsoluteRelative() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert1')\");\n\t\t\tcon.createS\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-135","size":1,"imports":["src/smallsql/junit/TestScrollable.java/L-67","src/smallsql/junit/TestScrollable.java/L-99","src/smallsql/junit/TestScrollable.java/L-173"],"snippet":"try{\n            rs.getString(\"v\");\n            fail(\"SQLException 'No current row' should be throw\");\n        }catch(SQLException ex){\n            assertSQLException(\"01000\", 0, ex);\n        }\n    }\n\tpublic void testPreviousWithWhere() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\n\t\t\tassertRowCo\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-67","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-83"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-83","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-67"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-655","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-618"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n            byte bytes[] = new byte[1024];\n            for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n            fos.close();\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n            long time = -System.currentTimeMillis(\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-618","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-655"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n            byte bytes[] = new byte[1024];\n            for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n            fos.close();\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n            long time = -System.currentTimeMillis(\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-126","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-151","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-185","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-238","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-298","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-359","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-395","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\" + e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-444","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-499","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-554","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-601","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-677","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-677","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-636"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-636","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-126","src/smallsql/junit/BenchTest.java/L-151","src/smallsql/junit/BenchTest.java/L-185","src/smallsql/junit/BenchTest.java/L-238","src/smallsql/junit/BenchTest.java/L-298","src/smallsql/junit/BenchTest.java/L-359","src/smallsql/junit/BenchTest.java/L-395","src/smallsql/junit/BenchTest.java/L-444","src/smallsql/junit/BenchTest.java/L-499","src/smallsql/junit/BenchTest.java/L-554","src/smallsql/junit/BenchTest.java/L-601","src/smallsql/junit/BenchTest.java/L-677"],"snippet":"System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"===================================================================\");\n        }\n    }\n"},
{"name":"src/smallsql/database/Money.java/L-67","size":1,"imports":["src/smallsql/database/Money.java/L-61"],"snippet":"{\n        Money money = new Money();\n        money.value = value;\n        return money;\n    }\n    public int intValue() {\n        return (int)(value\n"},
{"name":"src/smallsql/database/Money.java/L-61","size":1,"imports":["src/smallsql/database/Money.java/L-67"],"snippet":"{\n        Money money = new Money();\n        money.value = value;\n        return money;\n    }\n    public static Money createFromUnscaledValue(int val\n"},
{"name":"src/smallsql/database/IndexNode.java/L-243","size":1,"imports":["src/smallsql/database/IndexNode.java/L-249"],"snippet":"value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);\n"},
{"name":"src/smallsql/database/IndexNode.java/L-249","size":1,"imports":["src/smallsql/database/IndexNode.java/L-243"],"snippet":"value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-412","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-519"],"snippet":"PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\n            long time = -System.curren\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-519","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-412"],"snippet":"PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\n            long time = -System.curren\n"},
{"name":"src/smallsql/database/DateTime.java/L-740","size":1,"imports":["src/smallsql/database/DateTime.java/L-675"],"snippet":"if(t<0){\n\t\t\t\tt += 86400000;\n\t\t\t\td--;\n\t\t\t}\t\t\t\t\n\t\t\tmillis = t % 1000;\n\t\t\tt \/= 1000;\n\t\t\tsecond = t % 60;\n\t\t\tt \/= 60;\n\t\t\tminute = t % 60;\n\t\t\tt \/= 60;\n\t\t\thour = t % 24;\n\t\t\tyear = 1\n"},
{"name":"src/smallsql/database/DateTime.java/L-675","size":1,"imports":["src/smallsql/database/DateTime.java/L-740"],"snippet":"if(t<0){\n            t += 86400000;\n            d--;\n        }              \n        int millis = t % 1000;\n        t \/= 1000;\n        synchronized(cal){\n            cal.setTimeZone( timezone );\n            cal.set( 1970, 0, d+1, 0, 0,\n"},
{"name":"src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","size":1,"imports":["src/smallsql/database/ExpressionFunctionAbs.java/L-104","src/smallsql/database/ExpressionFunctionFloor.java/L-46"],"snippet":"{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n\tfinal int getDataType() {\n\t\treturn SQLTokenizer.FLOAT;\n\t}\n}\n"},
{"name":"src/smallsql/database/ExpressionFunctionAbs.java/L-104","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","src/smallsql/database/ExpressionFunctionFloor.java/L-46"],"snippet":"{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n}\n"},
{"name":"src/smallsql/database/ExpressionFunctionFloor.java/L-46","size":1,"imports":["src/smallsql/database/ExpressionFunctionReturnFloat.java/L-76","src/smallsql/database/ExpressionFunctionAbs.java/L-104"],"snippet":"{\n        Object obj = getObject();\n        if(obj == null) return null;\n        return obj.toString();\n    }\n}\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-63","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-71","src/smallsql/database/MemoryStream.java/L-83"],"snippet":"puffer[ offset++ ] = (byte)(value >> 8);\n\t\tpuffer[ offset++ ] = (byte)(val\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-71","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-63","src/smallsql/database/MemoryStream.java/L-83"],"snippet":"puffer[ offset++ ] = (byte)(value >> 8);\n\t\tpuffer[ offset++ ] = (byte)(val\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-83","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-63","src/smallsql/database/MemoryStream.java/L-71"],"snippet":"puffer[ offset++ ] = (byte)(value >> 8);\n\t\tpuffer[ offset++ ] = (byte)(val\n"},
{"name":"src/smallsql/database/StorePageMap.java/L-99","size":1,"imports":["src/smallsql/database/StorePageMap.java/L-127","src/smallsql/database/StorePageMap.java/L-198"],"snippet":"int i = (int)(key % table.length);\n"},
{"name":"src/smallsql/database/StorePageMap.java/L-127","size":1,"imports":["src/smallsql/database/StorePageMap.java/L-99","src/smallsql/database/StorePageMap.java/L-198"],"snippet":"int i = (int)(key % table.length);\n"},
{"name":"src/smallsql/database/StorePageMap.java/L-198","size":1,"imports":["src/smallsql/database/StorePageMap.java/L-99","src/smallsql/database/StorePageMap.java/L-127"],"snippet":"int i = (int)(key % table.length);\n"},
{"name":"src/smallsql/database/IndexDescriptions.java/L-57","size":1,"imports":["src/smallsql/database/Columns.java/L-54","src/smallsql/database/ForeignKeys.java/L-51","src/smallsql/database/Strings.java/L-51"],"snippet":"{\n\t\treturn size;\n\t}\n\tfinal IndexDescription get(int idx){\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n\tfinal void add(IndexDescription descr) throws SQLException{\n\t\tif(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n        if(hasPrimary && descr.isPrimary()){\n            throw\n"},
{"name":"src/smallsql/database/Columns.java/L-54","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-57","src/smallsql/database/ForeignKeys.java/L-51","src/smallsql/database/Strings.java/L-51"],"snippet":"{\n\t\treturn size;\n\t}\n\tfinal Column get(int idx){\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n"},
{"name":"src/smallsql/database/ForeignKeys.java/L-51","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-57","src/smallsql/database/Columns.java/L-54","src/smallsql/database/Strings.java/L-51"],"snippet":"{\n\t\treturn size;\n\t}\n\tfinal ForeignKey get(int idx){\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n\tfinal void add(ForeignKey foreignKey){\n\t\tif(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n\t\tdata[size++] = foreignKey;\n\t}\n\tprivate final \n"},
{"name":"src/smallsql/database/Strings.java/L-51","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-57","src/smallsql/database/Columns.java/L-54","src/smallsql/database/ForeignKeys.java/L-51"],"snippet":"{\n\t\treturn size;\n\t}\n\tfinal String get(int idx){\n\t\tif (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n\tfinal void add(String descr){\n\t\tif(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n\t\tdata[size++] = descr;\n\t}\n\tprivate final void resize(int ne\n"},
{"name":"src/smallsql/database/IndexNode.java/L-349","size":1,"imports":["src/smallsql/database/IndexNode.java/L-368"],"snippet":"int mid = start + (end - start)\/2;\n\t\tchar nodeDigit = nodes[mid].digit;\n\t\tif(nodeDigit == digit) return mid;\n"},
{"name":"src/smallsql/database/IndexNode.java/L-368","size":1,"imports":["src/smallsql/database/IndexNode.java/L-349"],"snippet":"int mid = start + (end - start)\/2;\n\t\tchar nodeDigit = nodes[mid].digit;\n\t\tif(nodeDigit == digit) return mid;\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-103","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-671"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-671","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-103"],"snippet":"String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };\n"},
{"name":"src/smallsql/database/SSStatement.java/L-271","size":1,"imports":["src/smallsql/database/SSPreparedStatement.java/L-249"],"snippet":"if(failed == null){\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\n                    failed.initCause(ex);\n                }\n                failed.setNextException(ex);\n            }\n        }\n        batches.clear();\n        if(failed != null)\n            throw failed;\n        return result;\n    }\n    final public Connection getConnection(){\n        return con;\n    }\n    final public boolean getMoreResults(int current) throws SQLException{\n        switch(current){\n        case CLOSE_ALL_RESULTS:\n"},
{"name":"src/smallsql/database/SSPreparedStatement.java/L-249","size":1,"imports":["src/smallsql/database/SSStatement.java/L-271"],"snippet":"if(failed == null){\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\n\t\t\t\t\tfailed.initCause(ex);\n\t\t\t\t}\n\t\t\t\tfailed.setNextException(ex);\n\t\t\t}\n\t\t}\n    \tbatches.clear();\n    \tif(failed != null)\n    \t\tthrow failed;\n    \treturn result;\n\t}\n    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {\n        checkStatement();\n        throw new\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-349","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-199"],"snippet":"con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-199","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-349"],"snippet":"con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-597","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-592"],"snippet":"{\n\t\t\toldValue = rs.getBoolean(\"b\");\n\t\t\tassertFalse(rs.wasNull());\n\t\t\tcount++;\n\t\t}\n\t\tassertFalse(rs.next());\n\t\tassertEquals( valueCount, count )\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-592","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-597"],"snippet":"{\n\t\t\toldValue = rs.getBoolean(\"b\");\n\t\t\tassertFalse(rs.wasNull());\n\t\t\tcount++;\n\t\t}\n\t\twhile(oldValue && rs.next()){\n\t\t\toldValue = rs.getBoolean(\"\n"},
{"name":"src/smallsql/database/SmallSQLException.java/L-145","size":1,"imports":["src/smallsql/database/SmallSQLException.java/L-182"],"snippet":"String message = translateMsg(messageCode, new Object[] { param0 });\n    \tString sqlState = language.getSqlState(messag\n"},
{"name":"src/smallsql/database/SmallSQLException.java/L-182","size":1,"imports":["src/smallsql/database/SmallSQLException.java/L-145"],"snippet":"String message = translateMsg(messageCode, new Object[] { param0 });\n    \tString sqlState = language.getSqlState(messag\n"},
{"name":"src/smallsql/database/Table.java/L-368","size":1,"imports":["src/smallsql/database/Table.java/L-386"],"snippet":"return null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(serializeConnections.size() > 0){\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\n\t\t\t\t\t\t\twhile(values.hasNext()){\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttabLockConnection = con;\n\t\t\t\t\t\ttabLockCount++;\n\t\t\t\t\t\tTableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\n\t\t\t\t\t\tcon.add(lock);\n\t\t\t\t\t\treturn lock;\n\t\t\t\t\t}\n                case SQLTokenizer.ALTER:{\n                    if(locks.size() > 0 || locksInsert.size() > 0){\n                        return null;\n                    }\n                    if(serializeConnections.size() > 0){\n                        Iterator values = locks.values().iterator();\n                        while(values.hasNext()){\n                            TableStorePage lock = (TableStorePage)values.\n"},
{"name":"src/smallsql/database/Table.java/L-386","size":1,"imports":["src/smallsql/database/Table.java/L-368"],"snippet":"return null;\n                    }\n                    if(serializeConnections.size() > 0){\n                        Iterator values = locks.values().iterator();\n                        while(values.hasNext()){\n                            TableStorePage lock = (TableStorePage)values.next();\n                            if(lock.con != con) return null;\n                        }\n                    }\n                    tabLockConnection = con;\n                    tabLockCount++;\n                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\n                    lock.rollback();\n                    return lock;\n                }\n\t\t\t\tcase SQLTokenizer.INSERT:{\n\t\t\t\t\t\tif(serializeConnections.size() > 1) return null;\n\t\t\t\t\t\tif(serializeConnections.size() == 1 && serializeConnections.get(con) == null) return null;\n\t\t\t\t\t\tTableStorePageInsert lock = new TableStorePageInsert(con, this, LOCK_INSERT);\n\t\t\t\t\t\tlocksInsert.add( lock );\n\t\t\t\t\t\tcon.add(lock);\n\t\t\t\t\t\treturn lock;\n\t\t\t\t\t}\n\t\t\t\tcase SQLTokenizer.SELECT:\n\t\t\t\tcase SQLTokenizer.UPDATE:{\n\t\t\t\t\t\tLong pageKey = new Long(page); \/\/TODO performance\n\t\t\t\t\t\tTableStorePage prevLock = null;\n\t\t\t\t\t\tT\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-323","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-362"],"snippet":"int shift = (3-listEnum.stack) << 4;\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-362","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-323"],"snippet":"int shift = (3-listEnum.stack) << 4;\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-49","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-150","src/smallsql/junit/TestThreads.java/L-96"],"snippet":"catch(Throwable ex){\n                        throwable = ex;\n                    }\n                }\n            });\n            threadList.add(thread);\n            thread.start();\n        }\n        for(int i = 0; i < threadList.size(); i++){\n            Thread thread = (Thread)threadList.get(i);\n            thread.join(5000);\n        }\n        if(throwable != null){\n            throw throwable;\n        }\n    }\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-150","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-49","src/smallsql/junit/TestThreads.java/L-96"],"snippet":"catch(Throwable ex){\n                            throwable = ex;\n                        }\n                    }\n                });\n                threadList.add(thread);\n                thread.start();\n            }\n            for(int i = 0; i < threadList.size(); i++){\n                Thread thread = (Thread)threadList.get(i);\n                thread.join(5000);\n            }\n            if(throwable != null){\n                throw throwable;\n            }\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\n        }finally{\n            dropTable(con, \"ConcurrentWrite\");\n        }\n    }\n}\n"},
{"name":"src/smallsql/junit/TestThreads.java/L-96","size":1,"imports":["src/smallsql/junit/TestThreads.java/L-49","src/smallsql/junit/TestThreads.java/L-150"],"snippet":"catch(Throwable ex){\n                            throwable = ex;\n                        }\n                    }\n                });\n                threadList.add(thread);\n                thread.start();\n            }\n            for(int i = 0; i < threadList.size(); i++){\n                Thread thread = (Thread)threadList.get(i);\n                thread.join(5000);\n            }\n            if(throwable != null){\n                throw throwable;\n            }\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\n        }finally{\n            dropTable(con, \"ConcurrentWrite\");\n        }\n    }\n"},
{"name":"src/smallsql/database/SQLParser.java/L-674","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1104"],"snippet":"SQLToken last = lastToken();\n\t\t\t\t\tint length = last.offset + last.length - \n"},
{"name":"src/smallsql/database/SQLParser.java/L-1104","size":1,"imports":["src/smallsql/database/SQLParser.java/L-674"],"snippet":"SQLToken last = lastToken();\n            int length = last.offset + last.le\n"},
{"name":"src/smallsql/database/FileIndexNode.java/L-93","size":1,"imports":["src/smallsql/database/View.java/L-56"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);\n"},
{"name":"src/smallsql/database/View.java/L-56","size":1,"imports":["src/smallsql/database/FileIndexNode.java/L-93"],"snippet":"StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-296","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-291"],"snippet":"\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-291","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-296"],"snippet":"\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-618","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-655"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n            byte bytes[] = new byte[1024];\n            for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n            fos.close();\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n            long time = -System.currentTimeMillis(\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-655","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-618"],"snippet":"java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\n            byte bytes[] = new byte[1024];\n            for(int i=0; i<rowCount; i++){\n                fos.write(bytes);\n            }\n            fos.close();\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\n            long time = -System.currentTimeMillis(\n"},
{"name":"src/smallsql/database/SSCallableStatement.java/L-131","size":1,"imports":["src/smallsql/database/SSCallableStatement.java/L-113"],"snippet":"catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public double getDouble(int i) throws SQLException {\n        try{\n            Expression expr = getValue(i);\n            wasNull = expr.isNull();\n            return expr.getLong();\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\n        try{\n            MutableNumeric obj = getValue(i).getNumeric();\n            wasNull = obj == null;\n            if(wasNull) return null;\n            return obj.toBigDecimal(scale);\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public byte[] getBytes(int i) throws SQLException {\n        try{\n            byte[] obj = getValue(i).getBytes();\n            wasNull = obj == null;\n            return obj;\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public Date getDate(int i) th\n"},
{"name":"src/smallsql/database/SSCallableStatement.java/L-113","size":1,"imports":["src/smallsql/database/SSCallableStatement.java/L-131"],"snippet":"catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public long getLong(int i) throws SQLException {\n        try{\n            Expression expr = getValue(i);\n            wasNull = expr.isNull();\n            return expr.getLong();\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public float getFloat(int i) throws SQLException {\n        try{\n            Expression expr = getValue(i);\n            wasNull = expr.isNull();\n            return expr.getFloat();\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public double getDouble(int i) throws SQLException {\n        try{\n            Expression expr = getValue(i);\n            wasNull = expr.isNull();\n            return expr.getLong();\n        }catch(Exception e){\n            throw SmallSQLException.createFromException( e );\n        }\n    }\n    public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\n        try{\n            Mutable\n"},
{"name":"src/smallsql/database/Table.java/L-358","size":1,"imports":["src/smallsql/database/Table.java/L-388","src/smallsql/database/Table.java/L-370"],"snippet":"{\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\n\t\t\t\t\t\t\twhile(values.hasNext()){\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\n\t\t\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);\n\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(serializeConnections.size() > 0){\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\n\t\t\t\t\t\t\twhile(values.hasNext()){\n"},
{"name":"src/smallsql/database/Table.java/L-388","size":1,"imports":["src/smallsql/database/Table.java/L-358","src/smallsql/database/Table.java/L-370"],"snippet":"{\n                        Iterator values = locks.values().iterator();\n                        while(values.hasNext()){\n                            TableStorePage lock = (TableStorePage)values.next();\n                            if(lock.con != con) return null;\n                        }\n                    }\n                    tabLockConnection = con;\n                    tabLockCount++;\n                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\n                    lock.rollback();\n                    return lock;\n                }\n\t\t\t\tcase SQLTokenizer.INSERT:{\n\t\t\t\t\t\tif(serializeConnections.size() > 1) return null;\n\t\t\t\t\t\tif(serializeConnections.size() == 1 && serialize\n"},
{"name":"src/smallsql/database/Table.java/L-370","size":1,"imports":["src/smallsql/database/Table.java/L-358","src/smallsql/database/Table.java/L-388"],"snippet":"{\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\n\t\t\t\t\t\t\twhile(values.hasNext()){\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttabLockConnection = con;\n\t\t\t\t\t\ttabLockCount++;\n\t\t\t\t\t\tTableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\n\t\t\t\t\t\tcon.add(lock);\n\t\t\t\t\t\treturn lock;\n\t\t\t\t\t}\n                case SQLTokenizer.ALTER:{\n                    if(locks.size() > 0 || locksInsert.size() > 0){\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-255","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-241"],"snippet":"for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\n                    msgBuf.append(itr.next());\n                    if (itr.hasNext()) msgBuf.append(',');\n                }\n            }\n            StringBuffer buf = new StringBuffer();\n            for (int j = 1; j < engEntriesArr.length; j++) {\n                Str\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-241","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-255"],"snippet":"for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\n\t\t\t\t\tmsgBuf.append(itr.next());\n\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');\n\t\t\t\t}\n\t\t\t}\n            diff = (Set)otherEntriesSet.clone();\n            diff.removeAll(engEntriesSet);\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-396","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-221"],"snippet":"assertFalse( rs.next() );\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t}\n\t}\n\tpublic void testReadUncommited() throws Exception{\n\t\tConnection con1 = AllTests.getConnection();\n\t\tConnection con2 = AllTests.createConnection();\n\t\ttry{\t\t\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );\n\t\t\tcon1.createStatement().execute(\"Create Table transactions \n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-221","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-396"],"snippet":"assertFalse( rs.next() );\n\t\t}finally{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t}\n\t}\n\tpublic void testInsertRow_Last() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttestInsertRow_Last(con, false);\n\t\ttestInsertRow_Last(con, true);\n\t\tcon.setAutoCommit(false);\n\t\ttestInsertRow_Last(con, false);\n\t\tcon.setAutoCommit(true);\n\t\tcon.setAutoCommit(false);\n\t\ttestI\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-69","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-81"],"snippet":"puffer[ offset++ ] = (byte)(value >> 24);\n\t\tpuffer[ offset++ ] = (byte)(value >> 16);\n\t\tpuffer[ offset++ ] = (byte)(value >> 8);\n\t\tpuffer[ offset++ ] = (b\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-81","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-69"],"snippet":"puffer[ offset++ ] = (byte)(value >> 24);\n\t\tpuffer[ offset++ ] = (byte)(value >> 16);\n\t\tpuffer[ offset++ ] = (byte)(value >> 8);\n\t\tpuffer[ offset++ ] = (b\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-1145","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-1263"],"snippet":"throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-1263","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-1145"],"snippet":"throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-213","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-455","src/smallsql/junit/TestOrderBy.java/L-241"],"snippet":"if(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\toldValue = newValue;\n\t\t}\n\t\tassertNull(oldValue);\n\t\tassertFalse( rs.next() );\n\t\tassertEquals( valueCount, count );\n\t}\n\tpublic void testOrderBy_varchar_DescAsc() throws Exception{\n\t\tinit();\n\t\tConnection con = AllTe\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-455","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-213","src/smallsql/junit/TestOrderBy.java/L-241"],"snippet":"if(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\toldValue = newValue;\n\t\t}\n\t\tassertNull(oldValue);\n\t\tassertFalse( rs.next() );\n\t\tassertEquals( valueCount, count );\n\t}\n\tpublic void testOrderBy_double() throws Exception{\n\t\tinit();\n\t\tConnection con = AllTests.getConne\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-241","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-213","src/smallsql/junit/TestOrderBy.java/L-455"],"snippet":"if(newValue != null){\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\toldValue = newValue;\n\t\t}\n\t\tassertNull(oldValue);\n\t\tassertFalse( rs.next() );\n\t\tassertEquals( valueCount, count );\n\t}\n\tpublic void testOrderBy_varchar_GroupBy() throws Exception{\n\t\tinit();\n\t\tConnection con = AllTe\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-263","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-778","src/smallsql/database/SSDatabaseMetaData.java/L-789"],"snippet":"String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-778","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-263","src/smallsql/database/SSDatabaseMetaData.java/L-789"],"snippet":"String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-789","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-263","src/smallsql/database/SSDatabaseMetaData.java/L-778"],"snippet":"String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-487","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-434"],"snippet":"int updateCount = pr.executeUpdate();\n                if (updateCount != 1){\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\n                    return;\n                }\n            }\n            time += System.currentTimeMillis();\n            System.out.println( \"  Test time: \" + time + \" ms\");\n            st.execute(\"drop procedure sp_\"+tableName);\n            st.close();\n            pr.close();\n        }catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-434","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-487"],"snippet":"int updateCount = pr.executeUpdate();\n                if (updateCount != 1){\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\n                    return;\n                }\n            }\n            time += System.currentTimeMillis();\n            System.out.println( \"  Test time: \" + time + \" ms\");\n            pr.close();\n        }catch(Exception e){\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.println();\n            System.out.println(\"====\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-210","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-831"],"snippet":"String[] colNames = {\"TYPE_NAME\", \"DATA_TYPE\", \"PRECISION\", \"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \"CREATE_PARAMS\", \"NULLABLE\", \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-831","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-210"],"snippet":"String[] colNames = {\t\t\"TYPE_NAME\", \t\t\t\t\"DATA_TYPE\", \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"PRECISION\", \t\"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \t\t\"CREATE_PARAMS\", \"NULLABLE\", \t \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};\n"},
{"name":"src/smallsql/database/LongList.java/L-61","size":1,"imports":["src/smallsql/database/Expressions.java/L-65","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/DataSources.java/L-49","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n\tfinal void add(long value){\n\t\tif\n"},
{"name":"src/smallsql/database/Expressions.java/L-65","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/DataSources.java/L-49","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n\tfinal void add(Expression expr){\n"},
{"name":"src/smallsql/database/LongLongList.java/L-56","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/Expressions.java/L-65","src/smallsql/database/DataSources.java/L-49","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx << 1];\n\t}\n\tfinal long get2(int idx){\n\t\tif\n"},
{"name":"src/smallsql/database/DataSources.java/L-49","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/Expressions.java/L-65","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/LongLongList.java/L-62"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[idx];\n\t}\n\tfinal void add(DataSource table){\n"},
{"name":"src/smallsql/database/LongLongList.java/L-62","size":1,"imports":["src/smallsql/database/LongList.java/L-61","src/smallsql/database/Expressions.java/L-65","src/smallsql/database/LongLongList.java/L-56","src/smallsql/database/DataSources.java/L-49"],"snippet":"if (idx >= size)\n\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);\n\t\treturn data[(idx << 1) +1];\n\t}\n\tfinal void add(long value1\n"},
{"name":"src/smallsql/database/Utils.java/L-163","size":1,"imports":["src/smallsql/database/Utils.java/L-154"],"snippet":"for(int i=0; i<length; i++){\n            result = (result << 8) | (bytes[i] & 0xFF);\n        }\n        return result;\n    }\n    static byte[] double2bytes( double value ){\n        return long2bytes(Double.doubleToL\n"},
{"name":"src/smallsql/database/Utils.java/L-154","size":1,"imports":["src/smallsql/database/Utils.java/L-163"],"snippet":"for(int i=0; i<length; i++){\n            result = (result << 8) | (bytes[i] & 0xFF);\n        }\n        return result;\n    }\n    static int bytes2int( byte[] bytes ){\n        int result = 0;\n        int length = Ma\n"},
{"name":"src/smallsql/database/Index.java/L-407","size":1,"imports":["src/smallsql/database/Index.java/L-382"],"snippet":"\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\n\t\t\t\t\t\t\t  : (key[i]);\n"},
{"name":"src/smallsql/database/Index.java/L-382","size":1,"imports":["src/smallsql/database/Index.java/L-407"],"snippet":"\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\n\t\t\t\t\t\t\t  : (key[i]);\n"},
{"name":"src/smallsql/database/IndexDescriptions.java/L-71","size":1,"imports":["src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n        if(hasPrimary && descr.isPrimary()){\n"},
{"name":"src/smallsql/database/Columns.java/L-96","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length){\n            resize(size << 1);\n        }\n        data[size++] = column;\n    }\n"},
{"name":"src/smallsql/database/LongList.java/L-68","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n\t\tdata[ size++ ] = value;\n\t}\n\tfinal vo\n"},
{"name":"src/smallsql/database/Strings.java/L-64","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n\t\tdata[size++] = descr;\n\t}\n\tprivate f\n"},
{"name":"src/smallsql/database/Expressions.java/L-72","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/ForeignKeys.java/L-64","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n\t\tdata[size++] = expr;\n\t}\n\tfinal void add\n"},
{"name":"src/smallsql/database/ForeignKeys.java/L-64","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/Expressions.java/L-79"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n\t\tdata[size++] = foreignKey;\n\t}\n\tpriv\n"},
{"name":"src/smallsql/database/Expressions.java/L-79","size":1,"imports":["src/smallsql/database/IndexDescriptions.java/L-71","src/smallsql/database/Columns.java/L-96","src/smallsql/database/LongList.java/L-68","src/smallsql/database/Strings.java/L-64","src/smallsql/database/Expressions.java/L-72","src/smallsql/database/ForeignKeys.java/L-64"],"snippet":"if(size >= data.length ){\n\t\t\tresize(size << 1);\n\t\t}\n\t\tSystem.arraycopy( data, idx, data, idx+1, (\n"},
{"name":"src/smallsql/database/TableResult.java/L-180","size":1,"imports":["src/smallsql/database/TableResult.java/L-186"],"snippet":"store = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);\n"},
{"name":"src/smallsql/database/TableResult.java/L-186","size":1,"imports":["src/smallsql/database/TableResult.java/L-180"],"snippet":"store = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);\n"},
{"name":"src/smallsql/database/SSResultSet.java/L-372","size":1,"imports":["src/smallsql/database/SSResultSet.java/L-413"],"snippet":"if(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);\n            moveToCurrentRow();\n\t\t\treturn getCmd().first();\n\t\t}catch(\n"},
{"name":"src/smallsql/database/SSResultSet.java/L-413","size":1,"imports":["src/smallsql/database/SSResultSet.java/L-372"],"snippet":"if(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);\n            moveToCurrentRow();\n            getCmd().afterLast();\n\t\t}\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-331","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-376"],"snippet":"\t\t\t\tresult |= (((long)nextEntry) << shift);\n\t\t\t\tif(listEnum.stack>=3){\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\n\t\t\t\toffset = getPointer();\n\t\t\t\tshift -= 16;\n\t\t\t\tlistEnum.stack++;\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\n\t\t\t\tfirstNode = true;\n\t\t\t}else{\n\t\t\t\tshift += 16;\n\t\t\t\tlistEnum.sta\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-376","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-331"],"snippet":"\t\t\t\tresult |= (((long)nextEntry) << shift);\n\t\t\t\tif(listEnum.stack>=3){\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\n\t\t\t\toffset = getPointer();\n\t\t\t\tshift -= 16;\n\t\t\t\tlistEnum.stack++;\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\n\t\t\t\tloopToEndOfNode(listEnum);\n\t\t\t}else{\n\t\t\t\tshift += 16;\n\t\t\t\tlis\n"},
{"name":"src/smallsql/database/CommandInsert.java/L-166","size":1,"imports":["src/smallsql/database/CommandInsert.java/L-156"],"snippet":"{\n                            keyColumnNames.add(column.getName());\n                            keys.add(valueExpress.getObject());\n                            break;\n                        }\n                    }\n                }\n\t            store.writeExpression\n"},
{"name":"src/smallsql/database/CommandInsert.java/L-156","size":1,"imports":["src/smallsql/database/CommandInsert.java/L-166"],"snippet":"{\n                            keyColumnNames.add(column.getName());\n                            keys.add(valueExpress.getObject());\n                            break;\n                        }\n                    }\n                }\n                if(needGeneratedKe\n"},
{"name":"src/smallsql/junit/TestDBMetaData.java/L-234","size":1,"imports":["src/smallsql/database/SSDatabaseMetaData.java/L-821"],"snippet":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};\n"},
{"name":"src/smallsql/database/SSDatabaseMetaData.java/L-821","size":1,"imports":["src/smallsql/junit/TestDBMetaData.java/L-234"],"snippet":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-315","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-323"],"snippet":"String message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";\n\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VA\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-323","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-315"],"snippet":"String message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";\n\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VA\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-375","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-396"],"snippet":"page[ offset++ ] = (byte)(value >> 24);\n        page[ offset++ ] = (byte)(value >> 16);\n        page[ offset++ ] = (byte)(value >> 8);\n        pag\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-396","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-375"],"snippet":"page[ offset++ ] = (byte)(value >> 24);\n        page[ offset++ ] = (byte)(value >> 16);\n        page[ offset++ ] = (byte)(value >> 8);\n        pag\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-69","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-81"],"snippet":"puffer[ offset++ ] = (byte)(value >> 24);\n\t\tpuffer[ offset++ ] = (byte)(value >> 16);\n\t\tpuffer[ offset++ ] = (byte)(value >> 8);\n\t\tpuffer[ offset++ ] = (b\n"},
{"name":"src/smallsql/database/MemoryStream.java/L-81","size":1,"imports":["src/smallsql/database/MemoryStream.java/L-69"],"snippet":"puffer[ offset++ ] = (byte)(value >> 24);\n\t\tpuffer[ offset++ ] = (byte)(value >> 16);\n\t\tpuffer[ offset++ ] = (byte)(value >> 8);\n\t\tpuffer[ offset++ ] = (b\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-811","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-187"],"snippet":"while(rs.next()){\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n\t\t\tcount++;\n\t\t}\n\t\tassertEquals( valueCount+4, count );\n\t}\n}\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-187","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-811"],"snippet":"while(rs.next()){\n\t\t\tString newValue = rs.getString(\"v\");\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\n\t\t\toldValue = newValue;\n\t\t\tcount++;\n\t\t}\n\t\trs.close();\n\t\tassertEquals( valueCount, count );\n\t}\n\tpublic void testOrderBy_varchar_desc() throws Exception{\n\t\tinit();\n\t\tConnection con = AllTests.getConnection();\n\t\tStatement st = con.createStatement();\n\t\tResultSet rs;\n\t\tString oldVa\n"},
{"name":"src/smallsql/database/SQLTokenizer.java/L-173","size":1,"imports":["src/smallsql/database/SQLTokenizer.java/L-112"],"snippet":"if(!wasWhiteSpace){\n                                   tokens.add( new SQLToken( value, tokenStart, i) );\n                                   value = 0;\n                                }\n                                switch(c){\n\t\t\t\t\t\t\t\t\tcase ' ':\n                                \tcase '\\t':\n                                \tcase '\\n':\n                                \tcase '\\r':\n"},
{"name":"src/smallsql/database/SQLTokenizer.java/L-112","size":1,"imports":["src/smallsql/database/SQLTokenizer.java/L-173"],"snippet":"if(!wasWhiteSpace){\n\t                                tokens.add( new SQLToken( value, tokenStart, i) );\n\t                                value = 0;\n\t                            }\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\ttokenStart = i+1;\n\t\t\t\t\t\t\t\tcomment = LINE_COMMENT;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(quote == 0 && !wasWhiteSpace){\n\t\t\t\t\t\t\t\tchar c1 = sql[tokenStart];\n\t\t\t\t\t\t\t\tchar cx = sql[i-1];\n\t\t\t\t\t\t\t\tif(((c1 >= '0' &&\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-701","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-732","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestOrderBy.java/L-763","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestStatement.java/L-309","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-68","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-113","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-156","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-193","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestResultSet.java/L-252","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-53","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-86","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-118","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-154","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-192","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/TestScrollable.java/L-275","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-112","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-169","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-222","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-256","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-256","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-377"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-377","size":1,"imports":["src/smallsql/junit/TestOrderBy.java/L-701","src/smallsql/junit/TestOrderBy.java/L-732","src/smallsql/junit/TestOrderBy.java/L-763","src/smallsql/junit/TestStatement.java/L-309","src/smallsql/junit/TestResultSet.java/L-68","src/smallsql/junit/TestResultSet.java/L-113","src/smallsql/junit/TestResultSet.java/L-156","src/smallsql/junit/TestResultSet.java/L-193","src/smallsql/junit/TestResultSet.java/L-252","src/smallsql/junit/TestScrollable.java/L-53","src/smallsql/junit/TestScrollable.java/L-86","src/smallsql/junit/TestScrollable.java/L-118","src/smallsql/junit/TestScrollable.java/L-154","src/smallsql/junit/TestScrollable.java/L-192","src/smallsql/junit/TestScrollable.java/L-275","src/smallsql/junit/BenchTest.java/L-112","src/smallsql/junit/BenchTest.java/L-169","src/smallsql/junit/BenchTest.java/L-222","src/smallsql/junit/BenchTest.java/L-256"],"snippet":"Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-726","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-292"],"snippet":"{\n            Statement st = con.createStatement();\n            st.execute(\"DELETE FROM \" + tableName);\n            st.close();\n    }\n    static void dropTestTable(Connection \n"},
{"name":"src/smallsql/junit/BenchTest.java/L-292","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-726"],"snippet":"{\n                Statement st = con.createStatement();\n                st.execute(\"DELETE FROM \" + tableName);\n                st.close();\n            System.out.println(\"  Failed:\"+e);\n        }finally{\n            System.out.pri\n"},
{"name":"src/smallsql/database/SQLParser.java/L-1932","size":1,"imports":["src/smallsql/database/SQLParser.java/L-352"],"snippet":"try{\n            int maxRows = Integer.parseInt(token.getName(sql));\n            selCmd.setMaxRows(maxRows);\n        }catch(NumberFormatException e){\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\n        }\n    }\n    private void group(CommandSelect cmd) throws SQLException{\n        nextToken(MISSING_BY);\n        cmd.setGroup( expressionTokenList(cmd, SQLTokenizer.GROUP) );\n    }\n    private void where(CommandSelect cmd) throws SQLException{\n        cmd.setWhere( expression(cmd, 0) );\n    }\n    private void having(CommandSelect cmd) throws SQLException{\n        cmd.setHaving( expression(cmd, 0) );\n    }\n    private static final int[] COMMANDS = {SQLTokenizer.SELECT, SQLTokenizer.DELETE, SQL\n"},
{"name":"src/smallsql/database/SQLParser.java/L-352","size":1,"imports":["src/smallsql/database/SQLParser.java/L-1932"],"snippet":"try{\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\n\t\t\t\t\t}catch(NumberFormatException e){\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SQLTokenizer.ALL:\n\t\t\t\t\tselCmd.setDistinct(false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SQLTokenizer.DISTINCT:\n\t\t\t\t\tselCmd.setDistinct(true);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tpreviousToken();\n\t\t\t\t\tbreak Switch;\n\t\t\t}\n\t\t}\n        while(true){\n            Expression column = expression(selCmd, 0);\n            selCmd.addColumnExpression( column );\n            token = nextToken();\n            if(token == null) return selCmd; \/\/ SELECT without FROM\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-62","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-62"],"snippet":"if(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n\t\treturn value;\n    }\n}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-62","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-62"],"snippet":"if(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n\t\treturn value;\n    }\n}\n"},
{"name":"src/smallsql/database/ExpressionFunction.java/L-118","size":1,"imports":["src/smallsql/database/ExpressionFunction.java/L-106"],"snippet":"Object[] params = {\n    \t\t\tSQLTokenizer.getKeyWord(dataType),\n    \t\t\tSQLTokenizer.getKeyWord(getFunction())\n    \t};\n"},
{"name":"src/smallsql/database/ExpressionFunction.java/L-106","size":1,"imports":["src/smallsql/database/ExpressionFunction.java/L-118"],"snippet":"Object[] params = {\n\t\t\t\tSQLTokenizer.getKeyWord(dataType),\n\t\t\t\tSQLTokenizer.getKeyWord(getFunction())\n\t\t};\n"},
{"name":"src/smallsql/database/ExpressionFunctionConvert.java/L-142","size":1,"imports":["src/smallsql/database/ExpressionFunctionConvert.java/L-153"],"snippet":"{\n\t\t\t\t\tbyte[] buffer = new byte[length];\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\n\t\t\t\t\treturn buffer;\n\t\t\t\t}\n\t\t\t\treturn bytes;\n\t\t\t}\n\t\t\tcase SQLTokenizer.BINARY:{\n\t\t\t\tbyte[] bytes = param1.getBytes();\n\t\t\t\tint length = datatype.g\n"},
{"name":"src/smallsql/database/ExpressionFunctionConvert.java/L-153","size":1,"imports":["src/smallsql/database/ExpressionFunctionConvert.java/L-142"],"snippet":"{\n\t\t\t\t\tbyte[] buffer = new byte[length];\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\n\t\t\t\t\treturn buffer;\n\t\t\t\t}\n\t\t\t\treturn bytes;\n\t\t\t}\n\t\t\tcase SQLTokenizer.BOOLEAN:\n\t\t\tcase SQLTokenizer.BIT:\n\t\t\t\treturn param1.getBoolean() ? Boolea\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-375","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-396"],"snippet":"page[ offset++ ] = (byte)(value >> 24);\n        page[ offset++ ] = (byte)(value >> 16);\n        page[ offset++ ] = (byte)(value >> 8);\n        pag\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-396","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-375"],"snippet":"page[ offset++ ] = (byte)(value >> 24);\n        page[ offset++ ] = (byte)(value >> 16);\n        page[ offset++ ] = (byte)(value >> 8);\n        pag\n"},
{"name":"src/smallsql/junit/TestOther.java/L-93","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-337"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY );\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-337","size":1,"imports":["src/smallsql/junit/TestOther.java/L-93"],"snippet":"Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-46","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-46"],"snippet":"if(isNull()) return 0;\n\t\tfinal int places = param2.getInt();\n\t\tdouble value = param1.getDouble();\n\t\tlong factor = 1;\n\t\tif(places > 0){\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}else{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n\t\tvalue = Math.rint( value );\n\t\tif(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n\t\treturn value;\n    }\n}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-46","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-46"],"snippet":"if(isNull()) return 0;\n\t\tfinal int places = param2.getInt();\n\t\tdouble value = param1.getDouble();\n\t\tlong factor = 1;\n\t\tif(places > 0){\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}else{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n        value -= value % 1; \/\/modulo also work with values larger long\n\t\tif(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n\t\treturn value;\n    }\n}\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-322","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-208"],"snippet":"                if (count == 0){\n                    createTestDataWithClassicInsert( con );\n                    rs.next();\n                    count = rs.getInt(1);\n                }\n                if (count != rowCount){\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\n                    return;\n                }\n            }\n            st1.close();\n            long time = -System.currentTimeMillis();\n            Statement st = con.createStatement(ResultSet.TYPE_SCRO\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-208","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-322"],"snippet":"                if (count == 0){\n                    createTestDataWithClassicInsert( con );\n                    rs.next();\n                    count = rs.getInt(1);\n                }\n                if (count != rowCount){\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\n                    return;\n                }\n            }\n            st1.close();\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-564","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-597"],"snippet":"long lobFilePos = readLong();\n        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer\n"},
{"name":"src/smallsql/database/StoreImpl.java/L-597","size":1,"imports":["src/smallsql/database/StoreImpl.java/L-564"],"snippet":"long lobFilePos = readLong();\n        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-120","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-89"],"snippet":"if(status.nodeValue != null){\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(idx < 0){\n\t\t\t\t\tif(nodeStack.size() > 1){\n\t\t\t\t\t\tnodeStack.pop();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIndexNode node = status.nodes[idx];\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\n\t\t\t}\n\t\t}\n\t}\n\tfinal void afterLast(){\n\t\tlongList = null;\n\t\tnodeStack.setSize(1);\n\t\t((IndexNodeScrollStatus)nodeStack.peek()).afterLast();\n\t}\n        if(longList != null || nodeStack.size() != 1){\n            return false;\n        }\n        return ((IndexNodeScrollStatus)nodeStack.peek()).isAfterLast();\n\tprivate final long getReturnValue( Object value){\n\t\tif(rootPage.getUnique()){\n\t\t\treturn ((Long)value).longValue();\n\t\t}else{\n\t\t\tlongList = (LongTreeList)value;\n\t\t\tlongListEnum.reset();\n\t\t\treturn longList.getNext(longListEnum); \/\/ there be should one value as minimum\n\t\t}\n\t}\n}\n"},
{"name":"src/smallsql/database/IndexScrollStatus.java/L-89","size":1,"imports":["src/smallsql/database/IndexScrollStatus.java/L-120"],"snippet":"if(status.nodeValue != null){\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\n\t\t\t\t\t}\n\t\t\t\t\tidx = ++status.idx;\n\t\t\t\t}\n\t\t\t\tif(idx >= status.nodes.length){\n\t\t\t\t\tif(nodeStack.size() > 1){\n\t\t\t\t\t\tnodeStack.pop();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}else{\n                        status.idx = status.nodes.length; \/\/to prevent problems with scroll back after multiple calls after the end.\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIndexNode node = status.nodes[idx];\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\n\t\t\t}else{\n\t\t\t\tint idx = --status.idx;\n\t\t\t\tif(idx == -1){\n\t\t\t\t\tif(status.nodeValue != null){\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\n\t\t\t\t\t\t\tlevel++;\n\t\t\t\t\t\t\tnodeStack.push(\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(idx < 0){\n\t\t\t\t\tif(nodeStack.size() > 1){\n\t\t\t\t\t\tnodeStack.\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-376","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-331"],"snippet":"\t\t\t\tresult |= (((long)nextEntry) << shift);\n\t\t\t\tif(listEnum.stack>=3){\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\n\t\t\t\toffset = getPointer();\n\t\t\t\tshift -= 16;\n\t\t\t\tlistEnum.stack++;\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\n\t\t\t\tloopToEndOfNode(listEnum);\n\t\t\t}else{\n\t\t\t\tshift += 16;\n\t\t\t\tlis\n"},
{"name":"src/smallsql/database/LongTreeList.java/L-331","size":1,"imports":["src/smallsql/database/LongTreeList.java/L-376"],"snippet":"\t\t\t\tresult |= (((long)nextEntry) << shift);\n\t\t\t\tif(listEnum.stack>=3){\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\n\t\t\t\toffset = getPointer();\n\t\t\t\tshift -= 16;\n\t\t\t\tlistEnum.stack++;\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\n\t\t\t\tfirstNode = true;\n\t\t\t}else{\n\t\t\t\tshift += 16;\n\t\t\t\tlistEnum.sta\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-235","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-167"],"snippet":"if(num.scale < scale){\n\t\t\tnum.setScale(scale);\n\t\t}else\n\t\tif(num.scale > scale){\n\t\t\tsetScale(num.scale);\n\t\t}\n        add( -num.signum, num.value );\n    }\n"},
{"name":"src/smallsql/database/MutableNumeric.java/L-167","size":1,"imports":["src/smallsql/database/MutableNumeric.java/L-235"],"snippet":"if(num.scale < scale){\n\t\t\tnum.setScale(scale);\n\t\t}else\n\t\tif(num.scale > scale){\n\t\t\tsetScale(num.scale);\n\t\t}\n        add( num.signum, num.value );\n    }\n    private void add( int sig2, int[] val2){\n        if(val2.length > value.length){\n            in\n"},
{"name":"src/smallsql/database/ExpressionFunctionMonth.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionHour.java/L-49","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-49","src/smallsql/database/ExpressionFunctionMinute.java/L-49","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-49","src/smallsql/database/ExpressionFunctionYear.java/L-49"],"snippet":"if(param1.isNull()) return 0;\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\n\t\tr\n"},
{"name":"src/smallsql/database/ExpressionFunctionHour.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-49","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-49","src/smallsql/database/ExpressionFunctionMinute.java/L-49","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-49","src/smallsql/database/ExpressionFunctionYear.java/L-49"],"snippet":"if(param1.isNull()) return 0;\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\n\t\tr\n"},
{"name":"src/smallsql/database/ExpressionFunctionDayOfYear.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-49","src/smallsql/database/ExpressionFunctionHour.java/L-49","src/smallsql/database/ExpressionFunctionMinute.java/L-49","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-49","src/smallsql/database/ExpressionFunctionYear.java/L-49"],"snippet":"if(param1.isNull()) return 0;\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\n\t\tr\n"},
{"name":"src/smallsql/database/ExpressionFunctionMinute.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-49","src/smallsql/database/ExpressionFunctionHour.java/L-49","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-49","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-49","src/smallsql/database/ExpressionFunctionYear.java/L-49"],"snippet":"if(param1.isNull()) return 0;\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\n\t\tr\n"},
{"name":"src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-49","src/smallsql/database/ExpressionFunctionHour.java/L-49","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-49","src/smallsql/database/ExpressionFunctionMinute.java/L-49","src/smallsql/database/ExpressionFunctionYear.java/L-49"],"snippet":"if(param1.isNull()) return 0;\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\n\t\tr\n"},
{"name":"src/smallsql/database/ExpressionFunctionYear.java/L-49","size":1,"imports":["src/smallsql/database/ExpressionFunctionMonth.java/L-49","src/smallsql/database/ExpressionFunctionHour.java/L-49","src/smallsql/database/ExpressionFunctionDayOfYear.java/L-49","src/smallsql/database/ExpressionFunctionMinute.java/L-49","src/smallsql/database/ExpressionFunctionDayOfMonth.java/L-49"],"snippet":"if(param1.isNull()) return 0;\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\n\t\tr\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-104","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-84"],"snippet":"{\n\t\t\t\trecreateTestTab(stat);\n\t\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\n\t\t\t\tfail();\n\t\t\t}\n\t\t\tcatch(SQLException e) {\n\t\t\t\tassertMessage(e, \"La tabella\/vista '\" + TABLE_NAME + \"' è già esistente.\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);\n\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);\n\t\t\t}\n\t\t\tcatch (SQLException e) {\n\t\t\t\tassertMessage(e, \"Non si può effettuare DROP della tabella\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tstat.execut\n"},
{"name":"src/smallsql/junit/TestLanguage.java/L-84","size":1,"imports":["src/smallsql/junit/TestLanguage.java/L-104"],"snippet":"{\n\t\t\trecreateTestTab(stat);\n\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\n\t\t\tfail();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\tassertMessage(e, \"La tabella\/vista '\" + TABLE_NAME + \"' è già esistente.\");\n\t\t}\n\t\tfinally {\n\t\t\tLocale.setDefault(origLocale);\n\t\t\tconn.close();\n\t\t}\n\t}\n\tpublic void testLocalizedErrors() throws Exception {\n\t\tConnection conn = AllTests.createConnection(\"?locale=it\", null);\n\t\tStatement stat = conn.createStatement();\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-441","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-419"],"snippet":"{\n            dropTable(con1, \"transactions\");\n\t\t\tcon1.setAutoCommit(true);\n\t\t\tcon2.close();\n\t\t}\n\t}\n    public void testReadSerialized() throws Exception{\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-419","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-441"],"snippet":"{\n\t\t    dropTable(con1, \"transactions\");\n\t\t\tcon1.setAutoCommit(true);\n\t\t\tcon2.close();\n\t\t}\n\t}\n\tpublic void testReadCommited() throws Exception{\n\t\tConnec\n"},
{"name":"src/smallsql/database/TableView.java/L-105","size":1,"imports":["src/smallsql/database/IndexDescription.java/L-186"],"snippet":"catch(Throwable e){\n\t\t\tif(raFile != null)\n\t\t\t\ttry{\n\t\t\t\t\traFile.close();\n\t\t\t\t}catch(Exception e2){\n\t\t\t\t\tDriverManager.println(e2.toString());\n\t\t\t\t}\n\t\t\tthrow SmallSQLException.createFromException(e);\n\t\t}\n\t}\n\tFile getFile(Database database){\n\t\treturn new File( Utils.createTableViewFileName( database, name ) );\n\t}\n\tFileChannel createFile(SSConnection con, Dat\n"},
{"name":"src/smallsql/database/IndexDescription.java/L-186","size":1,"imports":["src/smallsql/database/TableView.java/L-105"],"snippet":"catch(Throwable e){\n            if(raFile != null)\n                try{\n                    raFile.close();\n                }catch(Exception e2){\n                    DriverManager.println(e2.toString());\n                }\n            throw SmallSQLException.createFromException(e);\n        }\n    }\n\tvoid drop(Database database) throws Exception {\n        close();\n\t\tboolean ok = getFile( database, name).delete();\n\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);\n\t}\n    void close() throws Exception{\n        if(raFile != null){\n            raFile.close();\n            raFile = null;\n        }\n    }\n\tprivate final void writeMagic(FileChannel raFile) throws Exception{\n\t    ByteBuffer buffer = ByteBuffer.allocate(8);\n\t    buffer.putInt(MAGIC_INDEX);\n\t    buffer.putInt(INDEX_VERSION);\n\t    buffer.position(0);\n\t    raFile.write(buffer);\n\t}\n\tfinal void writeExpression( int columnIdx, Expression valueExpression) {\n\t\tint idx = matrix[columnIdx];\n\t\tif(idx >= 0) \/\/set only if the column part \n"},
{"name":"src/smallsql/junit/BenchTest.java/L-216","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-234"],"snippet":"System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\n"},
{"name":"src/smallsql/junit/BenchTest.java/L-234","size":1,"imports":["src/smallsql/junit/BenchTest.java/L-216"],"snippet":"System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-98","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n\t}\n\tpublic void testCommitWithOneCommitRow() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-129","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n\t}\n\tpublic void testRollback() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t    con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\n\t\t\tcon.setAutoCommit(false);\n\t\t\tcon.createStatement().execute(\"Insert Into \n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-157","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n\t}\n\tpublic void testRollbackWithOneCommitRow() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-188","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-365","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n\t}\n\tprivate void testInsertRow_Last(Connection con, boolean callLastBefore) throws Exception{\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-365","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-281"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n\t}\n\tpublic void testInsertRow_withRightWhere() throws Exception{\n\t\tConnection con = AllTests.getConnection();\n\t\ttry{\t\t\t\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\n\t\t\tas\n"},
{"name":"src/smallsql/junit/TestTransactions.java/L-281","size":1,"imports":["src/smallsql/junit/TestTransactions.java/L-98","src/smallsql/junit/TestTransactions.java/L-129","src/smallsql/junit/TestTransactions.java/L-157","src/smallsql/junit/TestTransactions.java/L-188","src/smallsql/junit/TestTransactions.java/L-365"],"snippet":"{\n\t\t\ttry{\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\n\t\t\t}catch(Throwable e){e.printStackTrace();}\n\t\t\tcon.setAutoCommit(true);\n\t\t}\n\t}\n    public void testUpdateAndSavepoint() throws Exception{\n        Connection con = AllTests.getConnection();\n        try{\n            con.createStatement().execute(\"Create Table transactions ( v varchar(20))\");\n"},
{"name":"src/smallsql/database/Utils.java/L-205","size":1,"imports":["src/smallsql/junit/BasicTestCase.java/L-102"],"snippet":"{\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\n        for(int i=0; i<bytes.length; i++){\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\n        }\n        return buf.toString();\n    }\n    static byte[] hex2bytes( char[] hex, int offset, int length) throws SQLException{\n        try{\n            byte[] bytes = new byte[length \/ 2];\n            for(int i=0; i<bytes.length; i++){\n                bytes[i] = (byte)((hexDigit2int( hex[ offset++ ] ) << 4)\n                                | hexDigit2int( hex[ offset++ ] ));\n            }\n            return bytes;\n        }catch(Exception e){\n             throw SmallSQLException.create(Language.S\n"},
{"name":"src/smallsql/junit/BasicTestCase.java/L-102","size":1,"imports":["src/smallsql/database/Utils.java/L-205"],"snippet":"{\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\n\t\tfor(int i=0; i<bytes.length; i++){\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\n\t\t}\n\t\treturn buf.toString();\n\t}\n\tpublic void assertEqualsObject( String msg, Object obj1, Object obj2 ){\n\t\tif(obj1 instanceof byte[]){\n\t\t\tif(!java.util.Arrays.equals( (byte[])obj1, (byte[])obj2)){\n\t\t\t\tfail(msg + \" expected:\" + bytes2hex((byte[])obj1)+ \" but was:\"+bytes2hex((byte[])obj2));\n\t\t\t}\n\t\t}else{ \n\t\t\tif(obj1 instanceof BigDecimal)\n\t\t\t\tif(((BigDecimal)obj1).compareTo((BigDecimal)obj2) == 0) return;\n\t\t\tassertEquals( msg, obj1, obj2\n"},
{"name":"src/smallsql/database/ExpressionValue.java/L-211","size":1,"imports":["src/smallsql/database/ExpressionValue.java/L-154"],"snippet":"{\n\t\t\t\t\tif(expr.isNull())\n\t\t\t\t\t\tdataType = expr.getDataType();\n\t\t\t\t\telse\n\t\t\t\t\t\tinitValue( expr );\n\t\t\t\t}else if(!expr.isNull()){\n\t\t\t\t\tswitch(dataType){\n\t\t\t\t\t\tcase SQLTokenizer.TINYINT:\n\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:\n\t\t\t\t\t\tcase SQLTokeniz\n"},
{"name":"src/smallsql/database/ExpressionValue.java/L-154","size":1,"imports":["src/smallsql/database/ExpressionValue.java/L-211"],"snippet":"{\n\t\t\t\t\tif(expr.isNull())\n\t\t\t\t\t\tdataType = expr.getDataType();\n\t\t\t\t\telse\n\t\t\t\t\t\tinitValue( expr );\n\t\t\t\t}else if(!expr.isNull()){\n\t\t\t\t\tswitch(dataType){\n\t\t\t\t\t\tcase SQLTokenizer.TINYINT:\n\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:\n\t\t\t\t\t\tcase SQLTokeniz\n"},
{"name":"src/smallsql/database/ExpressionFunctionRound.java/L-46","size":1,"imports":["src/smallsql/database/ExpressionFunctionTruncate.java/L-46"],"snippet":"if(isNull()) return 0;\n\t\tfinal int places = param2.getInt();\n\t\tdouble value = param1.getDouble();\n\t\tlong factor = 1;\n\t\tif(places > 0){\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}else{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n\t\tvalue = Math.rint( value );\n\t\tif(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n\t\treturn value;\n    }\n}\n"},
{"name":"src/smallsql/database/ExpressionFunctionTruncate.java/L-46","size":1,"imports":["src/smallsql/database/ExpressionFunctionRound.java/L-46"],"snippet":"if(isNull()) return 0;\n\t\tfinal int places = param2.getInt();\n\t\tdouble value = param1.getDouble();\n\t\tlong factor = 1;\n\t\tif(places > 0){\n\t\t\tfor(int i=0; i<places; i++){\n\t\t\t}\n\t\t}else{\n\t\t\tfor(int i=0; i>places; i--){\n\t\t\t}\n\t\t\tvalue \/= factor;\n\t\t}\n        value -= value % 1; \/\/modulo also work with values larger long\n\t\tif(places > 0){\n\t\t\tvalue \/= factor;\n\t\t}else{\n\t\t}\n\t\treturn value;\n    }\n}\n"}

	]