var results = {
		
	"Project-Name": "hsqldb",
	"metadata": {
        "Volume": 172794,
        "%-Duplicated-Lines": 4,
        "Number-Duplicated-Lines": 7936,
        "Number-Clones": 689,
        "Number-Clone-Classes": 286,
        "Biggest-Clone-Lines": 319,
        "Biggest-Clone-Class": 42
    }
,
		
	"options": {
    "metadata": [
      "cc",
      "volume",
      "mass"
    ],
    "types": [
      "1",
      "2"
    ]
  }
,
		"files": [
			
{
    "filename": "project://hsqldb/src/org/hsqldb/util/CodeSwitcher.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 107,
        "clones": 2,
        "snippet": "if (v.elementAt(i - 1).equals(\"\")) {\n                                i++;\n                            } else {\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/CodeSwitcher.java",
    "fromLine": 439,
    "toLine": 444
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/CodeSwitcher.java",
    "fromLine": 415,
    "toLine": 420
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 107,
        "clones": 2,
        "snippet": "if (v.elementAt(i - 1).equals(\"\")) {\n                                i++;\n                            } else {\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/CodeSwitcher.java",
    "fromLine": 439,
    "toLine": 444
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/CodeSwitcher.java",
    "fromLine": 415,
    "toLine": 420
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 178,
        "clones": 7,
        "snippet": "{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "fromLine": 366,
    "toLine": 370
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 754,
    "toLine": 759
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 949,
    "toLine": 954
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 1708,
    "toLine": 1713
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2573,
    "toLine": 2577
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "fromLine": 953,
    "toLine": 957
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2728,
    "toLine": 2732
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 7
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 22,
        "mass": 255,
        "clones": 2,
        "snippet": "int    i = all.indexOf(';');\n            String sql;\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n            g[2] = sql;\n            long l = 0;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 1002,
    "toLine": 1023
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1825,
    "toLine": 1846
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 223,
        "clones": 2,
        "snippet": "Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();\n        Dimension size = fMain.getSize();\n        if (d.width >= 640) {\n            fMain.setLocation((d.width - size.width) \/ 2,\n                              (d.height - size.height) \/ 2);\n        } else {\n            fMain.setLocation(0, 0);\n            fMain.setSize(d);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/Transfer.java",
    "fromLine": 411,
    "toLine": 420
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 476,
    "toLine": 485
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 12,
        "mass": 184,
        "clones": 2,
        "snippet": "if (r == null) {\n            String[] g = new String[1];\n            g[0] = \"Result\";\n            gResult.setHead(g);\n            g[0] = \"(empty)\";\n            gResult.addRow(g);\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 927,
    "toLine": 938
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1744,
    "toLine": 1755
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 26,
        "mass": 249,
        "clones": 2,
        "snippet": "String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n            if (c != '\\n') {\n                b.append(c);\n            }\n        }\n        all = b.toString();\n        String[] g = new String[4];\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n        gResult.setHead(g);\n        int max = 1;\n        lTime = System.currentTimeMillis() - lTime;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 974,
    "toLine": 999
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1797,
    "toLine": 1822
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 15,
        "mass": 326,
        "clones": 2,
        "snippet": "{\n                ResultSet rs = sStatement.getResultSet();\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n                    gResult.setHead(g);\n                    String s = t.getMessage();\n                    g[0] = s;\n                    gResult.addRow(g);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 856,
    "toLine": 870
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1636,
    "toLine": 1650
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 16,
        "mass": 183,
        "clones": 2,
        "snippet": "{\n                b.append(' ');\n            }\n        }\n        b.append(NL);\n        for (int i = 0; i < width; i++) {\n            for (int l = 0; l < size[i]; l++) {\n                b.append('-');\n            }\n            b.append(' ');\n        }\n        b.append(NL);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 1120,
    "toLine": 1135
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1907,
    "toLine": 1922
}
,]
}
,
{
    "metadata": {
        "cc": 90,
        "volume": 69,
        "mass": 2798,
        "clones": 2,
        "snippet": "System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n        bMustExit = true;\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg   = arg[i].toLowerCase();\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n            i++;\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n                return;\n            } else {\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 244,
    "toLine": 312
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 466,
    "toLine": 534
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/LongDeque.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 13,
        "mass": 162,
        "clones": 2,
        "snippet": "{\n        if (i < 0 || i >= elementCount) {\n            throw new IndexOutOfBoundsException();\n        }\n        int index = firstindex + i;\n        if (index >= list.length) {\n            index -= list.length;\n        }\n        return index;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HsqlDeque.java",
    "fromLine": 309,
    "toLine": 321
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongDeque.java",
    "fromLine": 301,
    "toLine": 313
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 11,
        "volume": 14,
        "mass": 228,
        "clones": 2,
        "snippet": "for (int i = 0; i < statements.length; i++) {\n                result = executeProtected(session, statements[i]);\n                result = handleCondition(session, result);\n                if (result.isError()) {\n                    break;\n                }\n                if (result.getType() == ResultConstants.VALUE) {\n                    break;\n                }\n                if (result.getType() == ResultConstants.DATA) {\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 499,
    "toLine": 512
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 375,
    "toLine": 388
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 14,
        "mass": 228,
        "clones": 2,
        "snippet": "for (int i = 0; i < statements.length; i++) {\n                result = executeProtected(session, statements[i]);\n                result = handleCondition(session, result);\n                if (result.isError()) {\n                    break;\n                }\n                if (result.getType() == ResultConstants.VALUE) {\n                    break;\n                }\n                if (result.getType() == ResultConstants.DATA) {\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 499,
    "toLine": 512
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 375,
    "toLine": 388
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 13,
        "mass": 141,
        "clones": 4,
        "snippet": "{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 270,
    "toLine": 282
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 117,
    "toLine": 129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 201,
    "toLine": 213
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSimple.java",
    "fromLine": 106,
    "toLine": 118
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 11,
        "mass": 127,
        "clones": 2,
        "snippet": "if (result.getErrorCode() == StatementTypes.ITERATE) {\n                    if (result.getMainString() == null) {\n                        continue;\n                    }\n                    if (label != null\n                            && label.name.equals(result.getMainString())) {\n                        continue;\n                    }\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 589,
    "toLine": 599
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 521,
    "toLine": 531
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 11,
        "mass": 127,
        "clones": 2,
        "snippet": "if (result.getErrorCode() == StatementTypes.ITERATE) {\n                    if (result.getMainString() == null) {\n                        continue;\n                    }\n                    if (label != null\n                            && label.name.equals(result.getMainString())) {\n                        continue;\n                    }\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 589,
    "toLine": 599
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 521,
    "toLine": 531
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 16,
        "mass": 214,
        "clones": 2,
        "snippet": "if (existing == null) {\n                    existing = add.duplicate();\n                    fullRightsMap.put(key, existing);\n                } else {\n                    existing.add(add);\n                }\n                if (add.grantableRights == null) {\n                    continue;\n                }\n                if (existing.grantableRights == null) {\n                    existing.grantableRights = add.grantableRights.duplicate();\n                } else {\n                    existing.grantableRights.add(add.grantableRights);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 973,
    "toLine": 988
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 938,
    "toLine": 953
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 16,
        "mass": 214,
        "clones": 2,
        "snippet": "if (existing == null) {\n                    existing = add.duplicate();\n                    fullRightsMap.put(key, existing);\n                } else {\n                    existing.add(add);\n                }\n                if (add.grantableRights == null) {\n                    continue;\n                }\n                if (existing.grantableRights == null) {\n                    existing.grantableRights = add.grantableRights.duplicate();\n                } else {\n                    existing.grantableRights.add(add.grantableRights);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 973,
    "toLine": 988
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 938,
    "toLine": 953
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 25,
        "mass": 333,
        "clones": 2,
        "snippet": "{\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n    }\n    public void checkTrigger(SchemaObject object, boolean[] checkList) {\n        if (object instanceof Table) {\n            Table table = (Table) object;\n            if (isFullyAccessibleByRole(table.getName())) {\n                return;\n            }\n            Right right = (Right) fullRightsMap.get(table.getName());\n            if (right != null && right.canReference(table, checkList)) {\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 596,
    "toLine": 620
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 577,
    "toLine": 601
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 25,
        "mass": 333,
        "clones": 2,
        "snippet": "{\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n    }\n    public void checkTrigger(SchemaObject object, boolean[] checkList) {\n        if (object instanceof Table) {\n            Table table = (Table) object;\n            if (isFullyAccessibleByRole(table.getName())) {\n                return;\n            }\n            Right right = (Right) fullRightsMap.get(table.getName());\n            if (right != null && right.canReference(table, checkList)) {\n                return;\n            }\n        }\n        throw Error.error(ErrorCode.X_42501, object.getName().name);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 596,
    "toLine": 620
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/Grantee.java",
    "fromLine": 577,
    "toLine": 601
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementProcedure.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 8,
        "mass": 214,
        "clones": 5,
        "snippet": "for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 344,
    "toLine": 351
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 185,
    "toLine": 192
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementQuery.java",
    "fromLine": 94,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 294,
    "toLine": 301
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementProcedure.java",
    "fromLine": 378,
    "toLine": 385
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/RowAVLDiskData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 118,
        "clones": 2,
        "snippet": "{\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n        return newnode;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAVL.java",
    "fromLine": 161,
    "toLine": 169
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAVLDiskData.java",
    "fromLine": 146,
    "toLine": 154
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 12,
        "mass": 172,
        "clones": 2,
        "snippet": "if (!NumberType.isInLongLimits(bi)) {\n                            throw Error.error(ErrorCode.X_22015);\n                        }\n                        if (((IntervalType) type).isDaySecondIntervalType()) {\n                            return new IntervalSecondData(bi.longValue(),\n                                                          currentLong,\n                                                          (IntervalType) type,\n                                                          true);\n                        } else {\n                            return IntervalMonthData.newIntervalMonth(\n                                bi.longValue(), (IntervalType) type);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 408,
    "toLine": 419
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 352,
    "toLine": 363
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 12,
        "mass": 172,
        "clones": 2,
        "snippet": "if (!NumberType.isInLongLimits(bi)) {\n                            throw Error.error(ErrorCode.X_22015);\n                        }\n                        if (((IntervalType) type).isDaySecondIntervalType()) {\n                            return new IntervalSecondData(bi.longValue(),\n                                                          currentLong,\n                                                          (IntervalType) type,\n                                                          true);\n                        } else {\n                            return IntervalMonthData.newIntervalMonth(\n                                bi.longValue(), (IntervalType) type);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 408,
    "toLine": 419
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 352,
    "toLine": 363
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 132,
        "clones": 2,
        "snippet": "if (Math.abs(currentLong)\n                                >= DTIType.nanoScaleFactors[0]) {\n                            addLong(currentLong \/ DTIType.nanoScaleFactors[0]);\n                            currentLong %= DTIType.nanoScaleFactors[0];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 164,
    "toLine": 169
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 132,
        "clones": 2,
        "snippet": "if (Math.abs(currentLong)\n                                >= DTIType.nanoScaleFactors[0]) {\n                            addLong(currentLong \/ DTIType.nanoScaleFactors[0]);\n                            currentLong %= DTIType.nanoScaleFactors[0];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SetFunction.java",
    "fromLine": 164,
    "toLine": 169
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 9
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 22,
        "mass": 255,
        "clones": 2,
        "snippet": "int    i = all.indexOf(';');\n            String sql;\n            if (i != -1) {\n                sql = all.substring(0, i);\n                all = all.substring(i + 1);\n            } else {\n                sql = all;\n                all = \"\";\n            }\n            if (sql.startsWith(\"--#\")) {\n                max = Integer.parseInt(sql.substring(3));\n                continue;\n            } else if (sql.startsWith(\"--\")) {\n                continue;\n            }\n            g[2] = sql;\n            long l = 0;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 1002,
    "toLine": 1023
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1825,
    "toLine": 1846
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 21,
        "mass": 454,
        "clones": 2,
        "snippet": "if (column != null) {\n                    DefaultMutableTreeNode childNode =\n                        (DefaultMutableTreeNode) treePath\n                            .getLastPathComponent();\n                    String  childName = null;\n                    boolean isChar;\n                    if (childNode.getChildCount() > 0) {\n                        childName = childNode.getFirstChild().toString();\n                        isChar    = childName.indexOf(\"CHAR\") >= 0;\n                        result    += \" WHERE \" + quoteObjectName(column);\n                        if (isChar) {\n                            result += \" LIKE \\'%%\\'\";\n                        } else {\n                            result += \" = \";\n                        }\n                    }\n                }\n                return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 2175,
    "toLine": 2195
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 2137,
    "toLine": 2157
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 21,
        "mass": 454,
        "clones": 2,
        "snippet": "if (column != null) {\n                    DefaultMutableTreeNode childNode =\n                        (DefaultMutableTreeNode) treePath\n                            .getLastPathComponent();\n                    String  childName = null;\n                    boolean isChar;\n                    if (childNode.getChildCount() > 0) {\n                        childName = childNode.getFirstChild().toString();\n                        isChar    = childName.indexOf(\"CHAR\") >= 0;\n                        result    += \" WHERE \" + quoteObjectName(column);\n                        if (isChar) {\n                            result += \" LIKE \\'%%\\'\";\n                        } else {\n                            result += \" = \";\n                        }\n                    }\n                }\n                return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 2175,
    "toLine": 2195
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 2137,
    "toLine": 2157
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 12,
        "mass": 184,
        "clones": 2,
        "snippet": "if (r == null) {\n            String[] g = new String[1];\n            g[0] = \"Result\";\n            gResult.setHead(g);\n            g[0] = \"(empty)\";\n            gResult.addRow(g);\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 927,
    "toLine": 938
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1744,
    "toLine": 1755
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 26,
        "mass": 249,
        "clones": 2,
        "snippet": "String       all   = txtCommand.getText();\n        StringBuffer b     = new StringBuffer();\n        long         total = 0;\n        for (int i = 0; i < all.length(); i++) {\n            char c = all.charAt(i);\n            if (c != '\\n') {\n                b.append(c);\n            }\n        }\n        all = b.toString();\n        String[] g = new String[4];\n        g[0] = \"ms\";\n        g[1] = \"count\";\n        g[2] = \"sql\";\n        g[3] = \"error\";\n        gResult.setHead(g);\n        int max = 1;\n        lTime = System.currentTimeMillis() - lTime;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 974,
    "toLine": 999
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1797,
    "toLine": 1822
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 15,
        "mass": 326,
        "clones": 2,
        "snippet": "{\n                ResultSet rs = sStatement.getResultSet();\n                try {\n                    formatResultSet(rs);\n                } catch (Throwable t) {\n                    g[0] = \"Error displaying the ResultSet\";\n                    gResult.setHead(g);\n                    String s = t.getMessage();\n                    g[0] = s;\n                    gResult.addRow(g);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 856,
    "toLine": 870
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1636,
    "toLine": 1650
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 16,
        "mass": 183,
        "clones": 2,
        "snippet": "{\n                b.append(' ');\n            }\n        }\n        b.append(NL);\n        for (int i = 0; i < width; i++) {\n            for (int l = 0; l < size[i]; l++) {\n                b.append('-');\n            }\n            b.append(' ');\n        }\n        b.append(NL);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 1120,
    "toLine": 1135
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 1907,
    "toLine": 1922
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 11,
        "mass": 222,
        "clones": 2,
        "snippet": "{\n                Class c =\n                    Class.forName(\"sun.security.action.GetPropertyAction\");\n                Constructor constructor = c.getConstructor(new Class[]{\n                    String.class });\n                java.security.PrivilegedAction a =\n                    (java.security.PrivilegedAction) constructor.newInstance(\n                        new Object[]{ \"user.home\" });\n                homedir =\n                    (String) java.security.AccessController.doPrivileged(a);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java",
    "fromLine": 315,
    "toLine": 325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 172,
    "toLine": 180
}
,]
}
,
{
    "metadata": {
        "cc": 90,
        "volume": 69,
        "mass": 2798,
        "clones": 2,
        "snippet": "System.getProperties().put(\"sun.java2d.noddraw\", \"true\");\n        String  currentArg;\n        String  lowerArg;\n        String  urlid        = null;\n        String  rcFile       = null;\n        boolean autoConnect  = false;\n        boolean urlidConnect = false;\n        bMustExit = true;\n        for (int i = 0; i < arg.length; i++) {\n            currentArg = arg[i];\n            lowerArg   = arg[i].toLowerCase();\n            if (lowerArg.startsWith(\"--\")) {\n                lowerArg = lowerArg.substring(1);\n            }\n            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {\n            } else if (i == arg.length - 1) {\n                throw new IllegalArgumentException(\"No value for argument \"\n                                                   + currentArg);\n            }\n            i++;\n            if (lowerArg.equals(\"-driver\")) {\n                defDriver   = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-url\")) {\n                defURL      = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-user\")) {\n                defUser     = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-password\")) {\n                defPassword = arg[i];\n                autoConnect = true;\n            } else if (lowerArg.equals(\"-urlid\")) {\n                urlid        = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-rcfile\")) {\n                rcFile       = arg[i];\n                urlidConnect = true;\n            } else if (lowerArg.equals(\"-dir\")) {\n                defDirectory = arg[i];\n            } else if (lowerArg.equals(\"-script\")) {\n                defScript = arg[i];\n            } else if (lowerArg.equals(\"-noexit\")) {\n                bMustExit = false;\n                i--;\n            } else if (lowerArg.equals(\"-help\")) {\n                showUsage();\n                return;\n            } else {\n                throw new IllegalArgumentException(\n                    \"invalid argrument \" + currentArg + \" try:  java... \"\n                    + DatabaseManagerSwing.class.getName() + \" --help\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 244,
    "toLine": 312
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 466,
    "toLine": 534
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/LobStoreInJar.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 14,
        "volume": 19,
        "mass": 354,
        "clones": 3,
        "snippet": "InputStream fis = null;\n            try {\n                fis = getClass().getResourceAsStream(fileName);\n                if (fis == null) {\n                    ClassLoader cl =\n                        Thread.currentThread().getContextClassLoader();\n                    if (cl != null) {\n                        fis = cl.getResourceAsStream(fileName);\n                    }\n                }\n            } catch (Throwable t) {\n            } finally {\n                if (fis == null) {\n                    throw new FileNotFoundException(fileName);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/FileUtil.java",
    "fromLine": 353,
    "toLine": 371
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileInJar.java",
    "fromLine": 224,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobStoreInJar.java",
    "fromLine": 123,
    "toLine": 141
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/LongValueHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 32,
        "mass": 205,
        "clones": 2,
        "snippet": "if (i == value) {\n                return objectKeyTable[it.getLookup()];\n            }\n        }\n        return null;\n    }\n    public boolean put(Object key, long value) {\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n        int oldSize = size();\n        super.addOrRemove(0, value, key, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(Object key) {\n        int oldSize = size();\n        super.addOrRemove(0, 0, key, null, true);\n        return oldSize != size();\n    }\n    public boolean containsKey(Object key) {\n        return super.containsKey(key);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongValueHashMap.java",
    "fromLine": 116,
    "toLine": 147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntValueHashMap.java",
    "fromLine": 117,
    "toLine": 148
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 8,
        "mass": 129,
        "clones": 3,
        "snippet": "{\n        Iterator it = t.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            put(key, t.get(key));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntValueHashMap.java",
    "fromLine": 259,
    "toLine": 266
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HashMap.java",
    "fromLine": 85,
    "toLine": 92
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongValueHashMap.java",
    "fromLine": 210,
    "toLine": 217
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 9,
        "mass": 200,
        "clones": 3,
        "snippet": "if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n        String        currentLine  = \"\";\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 376,
    "toLine": 384
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 704,
    "toLine": 712
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 443,
    "toLine": 451
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 9,
        "mass": 200,
        "clones": 3,
        "snippet": "if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n        String        currentLine  = \"\";\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 376,
    "toLine": 384
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 704,
    "toLine": 712
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 443,
    "toLine": 451
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 9,
        "mass": 200,
        "clones": 3,
        "snippet": "if (WTextRead == null) {\n            try {\n                WTextRead = new BufferedReader(new FileReader(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n            }\n        }\n        String        currentLine  = \"\";\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 376,
    "toLine": 384
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 704,
    "toLine": 712
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 443,
    "toLine": 451
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 191,
        "clones": 3,
        "snippet": "if (WTextWrite == null) {\n            try {\n                WTextWrite = new BufferedWriter(new FileWriter(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 74,
    "toLine": 78
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 167,
    "toLine": 171
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 101,
    "toLine": 105
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 191,
        "clones": 3,
        "snippet": "if (WTextWrite == null) {\n            try {\n                WTextWrite = new BufferedWriter(new FileWriter(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 74,
    "toLine": 78
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 167,
    "toLine": 171
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 101,
    "toLine": 105
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 191,
        "clones": 3,
        "snippet": "if (WTextWrite == null) {\n            try {\n                WTextWrite = new BufferedWriter(new FileWriter(sFileName));\n            } catch (IOException e) {\n                throw new DataAccessPointException(e.getMessage());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 74,
    "toLine": 78
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 167,
    "toLine": 171
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferSQLText.java",
    "fromLine": 101,
    "toLine": 105
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/index/IndexAVLMemory.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 8,
        "volume": 14,
        "mass": 237,
        "clones": 2,
        "snippet": "compare = compareRowForInsertOrDelete(session, row,\n                                                          currentRow,\n                                                          compareRowId, 0);\n                }\n                if (compare == 0 && session != null && !compareRowId\n                        && session.database.txManager.isMVRows()) {\n                    if (!isEqualReadable(session, store, n)) {\n                        compareRowId = true;\n                        compare = compareRowForInsertOrDelete(session, row,\n                                                              currentRow,\n                                                              compareRowId,\n                                                              colIndex.length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVLMemory.java",
    "fromLine": 214,
    "toLine": 227
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 903,
    "toLine": 915
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 108,
        "clones": 2,
        "snippet": "{\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 4430,
    "toLine": 4435
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 4358,
    "toLine": 4363
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 108,
        "clones": 2,
        "snippet": "{\n            parameterValues[i - 1] = o;\n            streamLengths[i - 1]   = streamLength;\n            parameterSet[i - 1]    = Boolean.FALSE;\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 4430,
    "toLine": 4435
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 4358,
    "toLine": 4363
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 26,
        "mass": 431,
        "clones": 2,
        "snippet": "{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 1920,
    "toLine": 1945
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java",
    "fromLine": 1093,
    "toLine": 1118
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 26,
        "mass": 431,
        "clones": 2,
        "snippet": "{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 1920,
    "toLine": 1945
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java",
    "fromLine": 1093,
    "toLine": 1118
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 12,
        "mass": 120,
        "clones": 2,
        "snippet": "{\n                patternIndex++;\n            } else {\n                final int tableValue = table[patternIndex];\n                matchStart += (patternIndex - tableValue);\n                if (patternIndex > 0) {\n                    patternIndex = tableValue;\n                }\n                patternIndex++;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 419,
    "toLine": 430
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 355,
    "toLine": 366
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 12,
        "mass": 120,
        "clones": 2,
        "snippet": "{\n                patternIndex++;\n            } else {\n                final int tableValue = table[patternIndex];\n                matchStart += (patternIndex - tableValue);\n                if (patternIndex > 0) {\n                    patternIndex = tableValue;\n                }\n                patternIndex++;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 419,
    "toLine": 430
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 355,
    "toLine": 366
}
,]
}
,
{
    "metadata": {
        "cc": 17,
        "volume": 33,
        "mass": 828,
        "clones": 2,
        "snippet": "{\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n        int[] table = new int[pattern.length];\n        int   i     = 2;\n        int   j     = 0;\n        table[0] = -1;\n        table[1] = 0;\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n                i++;\n                j = 0;\n            }\n        }\n        return table;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 488,
    "toLine": 520
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 449,
    "toLine": 485
}
,]
}
,
{
    "metadata": {
        "cc": 17,
        "volume": 33,
        "mass": 828,
        "clones": 2,
        "snippet": "{\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"Pattern must  not be null.\");\n        } else if (pattern.length < 2) {\n            throw new IllegalArgumentException(\"Pattern length must be > 1.\");\n        }\n        int[] table = new int[pattern.length];\n        int   i     = 2;\n        int   j     = 0;\n        table[0] = -1;\n        table[1] = 0;\n        while (i < pattern.length) {\n            if (pattern[i - 1] == pattern[j]) {\n                table[i] = j + 1;\n                j++;\n                i++;\n            } else if (j > 0) {\n                j = table[j];\n            } else {\n                table[i] = 0;\n                i++;\n                j = 0;\n            }\n        }\n        return table;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 488,
    "toLine": 520
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
    "fromLine": 449,
    "toLine": 485
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 155,
        "clones": 2,
        "snippet": "int word = map[windex];\n        if (set) {\n            map[windex] = (word | mask);\n        } else {\n            mask        = ~mask;\n            map[windex] = (word & mask);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 137,
    "toLine": 143
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 124,
    "toLine": 130
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 155,
        "clones": 2,
        "snippet": "int word = map[windex];\n        if (set) {\n            map[windex] = (word | mask);\n        } else {\n            mask        = ~mask;\n            map[windex] = (word & mask);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 137,
    "toLine": 143
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 124,
    "toLine": 130
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 12,
        "mass": 256,
        "clones": 2,
        "snippet": "int    length      = a.length > b.length ? a.length\n                                                 : b.length;\n        int    shortLength = a.length > b.length ? b.length\n                                                 : a.length;\n        byte[] map         = new byte[length];\n        if (length != shortLength) {\n            byte[] source = a.length > b.length ? a\n                                                : b;\n            System.arraycopy(source, shortLength, map, shortLength,\n                             length - shortLength);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 635,
    "toLine": 646
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 612,
    "toLine": 623
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 12,
        "mass": 256,
        "clones": 2,
        "snippet": "int    length      = a.length > b.length ? a.length\n                                                 : b.length;\n        int    shortLength = a.length > b.length ? b.length\n                                                 : a.length;\n        byte[] map         = new byte[length];\n        if (length != shortLength) {\n            byte[] source = a.length > b.length ? a\n                                                : b;\n            System.arraycopy(source, shortLength, map, shortLength,\n                             length - shortLength);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 635,
    "toLine": 646
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BitMap.java",
    "fromLine": 612,
    "toLine": 623
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 7
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 21,
        "mass": 232,
        "clones": 2,
        "snippet": "if (c == null) {\n                break;\n            }\n            nodeData = c.getData(store);\n            if (compareRow(session, data, nodeData) == 0) {\n                row = c.getRow(store);\n                session.database.txManager.setTransactionInfo(store, row);\n                if (session.database.txManager.canRead(\n                        session, store, row, TransactionManager.ACTION_DUP,\n                        null)) {\n                    return true;\n                }\n                continue;\n            }\n            break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 1593,
    "toLine": 1613
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 1567,
    "toLine": 1587
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 21,
        "mass": 232,
        "clones": 2,
        "snippet": "if (c == null) {\n                break;\n            }\n            nodeData = c.getData(store);\n            if (compareRow(session, data, nodeData) == 0) {\n                row = c.getRow(store);\n                session.database.txManager.setTransactionInfo(store, row);\n                if (session.database.txManager.canRead(\n                        session, store, row, TransactionManager.ACTION_DUP,\n                        null)) {\n                    return true;\n                }\n                continue;\n            }\n            break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 1593,
    "toLine": 1613
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 1567,
    "toLine": 1587
}
,]
}
,
{
    "metadata": {
        "cc": 27,
        "volume": 21,
        "mass": 524,
        "clones": 2,
        "snippet": "{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n                return i;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 811,
    "toLine": 831
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 766,
    "toLine": 786
}
,]
}
,
{
    "metadata": {
        "cc": 27,
        "volume": 21,
        "mass": 524,
        "clones": 2,
        "snippet": "{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[colIndex[j]]);\n            if (i != 0) {\n                if (isSimpleOrder) {\n                    return i;\n                }\n                boolean nulls = a[colIndex[j]] == null\n                                || b[colIndex[j]] == null;\n                if (colDesc[j] && !nulls) {\n                    i = -i;\n                }\n                if (nullsLast[j] && nulls) {\n                    i = -i;\n                }\n                return i;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 811,
    "toLine": 831
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 766,
    "toLine": 786
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 114,
        "clones": 2,
        "snippet": "{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[rowColMap[j]]);\n            if (i != 0) {\n                return i;\n            }\n        }\n        return 0;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 719,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 704,
    "toLine": 713
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 114,
        "clones": 2,
        "snippet": "{\n            int i = colTypes[j].compare(session, a[colIndex[j]],\n                                        b[rowColMap[j]]);\n            if (i != 0) {\n                return i;\n            }\n        }\n        return 0;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 719,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 704,
    "toLine": 713
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 14,
        "mass": 237,
        "clones": 2,
        "snippet": "compare = compareRowForInsertOrDelete(session, row,\n                                                          currentRow,\n                                                          compareRowId, 0);\n                }\n                if (compare == 0 && session != null && !compareRowId\n                        && session.database.txManager.isMVRows()) {\n                    if (!isEqualReadable(session, store, n)) {\n                        compareRowId = true;\n                        compare = compareRowForInsertOrDelete(session, row,\n                                                              currentRow,\n                                                              compareRowId,\n                                                              colIndex.length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVLMemory.java",
    "fromLine": 214,
    "toLine": 227
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/IndexAVL.java",
    "fromLine": 903,
    "toLine": 915
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 153,
        "clones": 5,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i] == null) {\n                        continue;\n                    }\n                    unresolvedSet = nodes[i].resolveColumnReferences(session,\n                            rangeGroup, rangeCount, rangeGroups,\n                            unresolvedSet, acceptsSequences);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1047,
    "toLine": 1054
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1061,
    "toLine": 1068
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 240,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 65,
    "toLine": 71
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 358,
    "toLine": 365
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/ClobInputStream.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 30,
        "mass": 229,
        "clones": 2,
        "snippet": "{\n        checkClosed();\n        if (n <= 0) {\n            return 0;\n        }\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n        currentPosition += n;\n        return n;\n    }\n    public int available() {\n        long avail = availableLength - currentPosition;\n        if (avail > Integer.MAX_VALUE) {\n            return Integer.MAX_VALUE;\n        }\n        return (int) avail;\n    }\n    public void close() throws IOException {\n        isClosed = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobInputStream.java",
    "fromLine": 98,
    "toLine": 127
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobInputStream.java",
    "fromLine": 117,
    "toLine": 146
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 13,
        "mass": 163,
        "clones": 2,
        "snippet": "checkClosed();\n        if (currentPosition >= availableLength) {\n            return -1;\n        }\n        if (buffer == null\n                || currentPosition >= bufferOffset + buffer.length) {\n            try {\n                checkClosed();\n                readIntoBuffer();\n            } catch (Exception e) {\n                throw JavaSystem.toIOException(e);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobInputStream.java",
    "fromLine": 75,
    "toLine": 87
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobInputStream.java",
    "fromLine": 75,
    "toLine": 87
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/Transfer.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 223,
        "clones": 2,
        "snippet": "Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();\n        Dimension size = fMain.getSize();\n        if (d.width >= 640) {\n            fMain.setLocation((d.width - size.width) \/ 2,\n                              (d.height - size.height) \/ 2);\n        } else {\n            fMain.setLocation(0, 0);\n            fMain.setSize(d);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/Transfer.java",
    "fromLine": 411,
    "toLine": 420
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManager.java",
    "fromLine": 476,
    "toLine": 485
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestStoredProcedure.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 19,
        "mass": 193,
        "clones": 2,
        "snippet": "boolean isResult = cs.execute();\n        assertFalse(isResult);\n        cs.getMoreResults();\n        ResultSet rs = cs.getResultSet();\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStoredProcedure.java",
    "fromLine": 257,
    "toLine": 275
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStoredProcedure.java",
    "fromLine": 221,
    "toLine": 239
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 19,
        "mass": 193,
        "clones": 2,
        "snippet": "boolean isResult = cs.execute();\n        assertFalse(isResult);\n        cs.getMoreResults();\n        ResultSet rs = cs.getResultSet();\n        rs.next();\n        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n        assertEquals(rs.getString(2), \"LOB_IDS\");\n        rs.close();\n        if (cs.getMoreResults()) {\n            rs = cs.getResultSet();\n            rs.next();\n            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");\n            assertEquals(rs.getString(2), \"LOBS\");\n            rs.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStoredProcedure.java",
    "fromLine": 257,
    "toLine": 275
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStoredProcedure.java",
    "fromLine": 221,
    "toLine": 239
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/BinaryData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 21,
        "mass": 171,
        "clones": 2,
        "snippet": "{\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBytes(SessionInterface session, long pos, BlobData b,\n                         long offset, long length) {\n        if (length > Integer.MAX_VALUE) {\n            throw new IndexOutOfBoundsException();\n        }\n        byte[] bytes = b.getBytes(session, offset, (int) length);\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBinaryStream(SessionInterface session, long pos,\n                                InputStream in) {\n    }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobDataID.java",
    "fromLine": 223,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BinaryData.java",
    "fromLine": 195,
    "toLine": 215
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 12
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 18,
        "mass": 270,
        "clones": 2,
        "snippet": "{\n            System.out.println(number_of_txns);\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n            if (Conn == null) {\n                return;\n            }\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 944,
    "toLine": 961
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 773,
    "toLine": 790
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 18,
        "mass": 270,
        "clones": 2,
        "snippet": "{\n            System.out.println(number_of_txns);\n            ntrans = number_of_txns;\n            Conn   = connect(url, user, password);\n            if (Conn == null) {\n                return;\n            }\n            try {\n                Conn.setAutoCommit(false);\n                Conn.setTransactionIsolation(transactionMode);\n                prepareStatements();\n            } catch (Exception E) {\n                System.out.println(E.getMessage());\n                E.printStackTrace();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 944,
    "toLine": 961
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 773,
    "toLine": 790
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 18,
        "mass": 213,
        "clones": 2,
        "snippet": "Conn.commit();\n                return aBalance;\n            } catch (Exception E) {\n                if (verbose) {\n                    System.out.println(\"Transaction failed: \"\n                                       + E.getMessage());\n                    E.printStackTrace();\n                }\n                incrementFailedTransactionCount();\n                try {\n                    Conn.rollback();\n                } catch (SQLException E1) {}\n            }\n            return 0;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 1029,
    "toLine": 1046
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 915,
    "toLine": 932
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 18,
        "mass": 213,
        "clones": 2,
        "snippet": "Conn.commit();\n                return aBalance;\n            } catch (Exception E) {\n                if (verbose) {\n                    System.out.println(\"Transaction failed: \"\n                                       + E.getMessage());\n                    E.printStackTrace();\n                }\n                incrementFailedTransactionCount();\n                try {\n                    Conn.rollback();\n                } catch (SQLException E1) {}\n            }\n            return 0;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 1029,
    "toLine": 1046
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 915,
    "toLine": 932
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 5,
        "mass": 94,
        "clones": 2,
        "snippet": "if (abalancesum != bbalancesum || bbalancesum != tbalancesum\n                    || tbalancesum != deltasum) {\n                System.out.println(\"sums don't match!\");\n            } else {\n                System.out.println(\"sums match!\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 832,
    "toLine": 836
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 745,
    "toLine": 749
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 19,
        "mass": 187,
        "clones": 2,
        "snippet": "{\n                    if (pstmt1 != null) {\n                        pstmt1.close();\n                    }\n                    if (pstmt2 != null) {\n                        pstmt2.close();\n                    }\n                    if (pstmt3 != null) {\n                        pstmt3.close();\n                    }\n                    if (pstmt4 != null) {\n                        pstmt4.close();\n                    }\n                    if (pstmt5 != null) {\n                        pstmt5.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 919,
    "toLine": 937
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 843,
    "toLine": 861
}
,]
}
,
{
    "metadata": {
        "cc": 18,
        "volume": 55,
        "mass": 533,
        "clones": 2,
        "snippet": "try {\n                        Conn.rollback();\n                    } catch (SQLException E1) {}\n                }\n            }\n            return 0;\n    class MemoryWatcherThread extends Thread {\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n        public MemoryWatcherThread() {\n            this.reset();\n            keep_running = true;\n        }\n        public void reset() {\n            System.gc();\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n            min = max = (currentAlloc - currentFree);\n        }\n        public void end() {\n            keep_running = false;\n        }\n        public void run() {\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n                if (used < min) {\n                    min = used;\n                }\n                if (used > max) {\n                    max = used;\n                }\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 1057,
    "toLine": 1111
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 1041,
    "toLine": 1094
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 205,
        "clones": 2,
        "snippet": "int count = ntrans;\n            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 975,
    "toLine": 984
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 816,
    "toLine": 825
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 205,
        "clones": 2,
        "snippet": "int count = ntrans;\n            while (count-- > 0) {\n                int account = TestBench.getRandomID(ACCOUNT);\n                int branch  = TestBench.getRandomID(BRANCH);\n                int teller  = TestBench.getRandomID(TELLER);\n                int delta   = TestBench.getRandomInt(-1000, 1000);\n                doOne(branch, teller, account, delta);\n                incrementTransactionCount();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 975,
    "toLine": 984
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 816,
    "toLine": 825
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 37,
        "mass": 320,
        "clones": 2,
        "snippet": "E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 714,
    "toLine": 750
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 622,
    "toLine": 658
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 37,
        "mass": 320,
        "clones": 2,
        "snippet": "E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 714,
    "toLine": 750
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 622,
    "toLine": 658
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 20,
        "mass": 378,
        "clones": 2,
        "snippet": "java.util.Date start = new java.util.Date();\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 \/ 1000D;\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n            MemoryWatcher = new MemoryWatcherThread();\n            MemoryWatcher.start();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 189,
    "toLine": 208
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 205,
    "toLine": 224
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/BlobInputStream.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 30,
        "mass": 229,
        "clones": 2,
        "snippet": "{\n        checkClosed();\n        if (n <= 0) {\n            return 0;\n        }\n        if (currentPosition + n > availableLength) {\n            n = availableLength - currentPosition;\n        }\n        currentPosition += n;\n        return n;\n    }\n    public int available() {\n        long avail = availableLength - currentPosition;\n        if (avail > Integer.MAX_VALUE) {\n            return Integer.MAX_VALUE;\n        }\n        return (int) avail;\n    }\n    public void close() throws IOException {\n        isClosed = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobInputStream.java",
    "fromLine": 98,
    "toLine": 127
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobInputStream.java",
    "fromLine": 117,
    "toLine": 146
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 13,
        "mass": 163,
        "clones": 2,
        "snippet": "checkClosed();\n        if (currentPosition >= availableLength) {\n            return -1;\n        }\n        if (buffer == null\n                || currentPosition >= bufferOffset + buffer.length) {\n            try {\n                checkClosed();\n                readIntoBuffer();\n            } catch (Exception e) {\n                throw JavaSystem.toIOException(e);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobInputStream.java",
    "fromLine": 75,
    "toLine": 87
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobInputStream.java",
    "fromLine": 75,
    "toLine": 87
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLMemory.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 154,
        "clones": 2,
        "snippet": "{\n        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n        manager.setStore(table, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLMemory.java",
    "fromLine": 58,
    "toLine": 66
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDiskData.java",
    "fromLine": 64,
    "toLine": 72
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 13
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 12,
        "mass": 176,
        "clones": 2,
        "snippet": "{\n                if (nodes[0].dataType == null) {\n                    throw Error.error(ErrorCode.X_42567);\n                }\n                if (!nodes[0].dataType.isArrayType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n                dataType = Type.SQL_INTEGER;\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1336,
    "toLine": 1347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1323,
    "toLine": 1334
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 12,
        "mass": 176,
        "clones": 2,
        "snippet": "{\n                if (nodes[0].dataType == null) {\n                    throw Error.error(ErrorCode.X_42567);\n                }\n                if (!nodes[0].dataType.isArrayType()) {\n                    throw Error.error(ErrorCode.X_42563);\n                }\n                dataType = Type.SQL_INTEGER;\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1336,
    "toLine": 1347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1323,
    "toLine": 1334
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 7,
        "mass": 71,
        "clones": 2,
        "snippet": "if (nodes[2] != null\n                        && ((Number) nodes[2].valueData).intValue()\n                           == Tokens.OCTETS) {\n                }\n                return ValuePool.getLong(result);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 609,
    "toLine": 615
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 591,
    "toLine": 597
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 7,
        "mass": 71,
        "clones": 2,
        "snippet": "if (nodes[2] != null\n                        && ((Number) nodes[2].valueData).intValue()\n                           == Tokens.OCTETS) {\n                }\n                return ValuePool.getLong(result);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 609,
    "toLine": 615
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 591,
    "toLine": 597
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 20,
        "mass": 325,
        "clones": 2,
        "snippet": "if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n                Object value;\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1110,
    "toLine": 1129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1013,
    "toLine": 1032
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 20,
        "mass": 325,
        "clones": 2,
        "snippet": "if (data[0] == null || data[1] == null || data[2] == null) {\n                    return null;\n                }\n                Object value;\n                value = Type.SQL_BIGINT.convertToType(session, data[2],\n                                                      nodes[2].dataType);\n                long offset = ((Number) value).longValue() - 1;\n                long length = 0;\n                if (nodes[3] != null) {\n                    if (data[3] == null) {\n                        return null;\n                    }\n                    value = Type.SQL_BIGINT.convertToType(session, data[3],\n                                                          nodes[3].dataType);\n                    length = ((Number) value).longValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1110,
    "toLine": 1129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1013,
    "toLine": 1032
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 2,
        "mass": 97,
        "clones": 2,
        "snippet": "if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Number) nodes[0].valueData).intValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 2069,
    "toLine": 2070
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 2052,
    "toLine": 2053
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 2,
        "mass": 97,
        "clones": 2,
        "snippet": "if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Number) nodes[0].valueData).intValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 2069,
    "toLine": 2070
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 2052,
    "toLine": 2053
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 2,
        "mass": 97,
        "clones": 4,
        "snippet": "if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1747,
    "toLine": 1748
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1760,
    "toLine": 1761
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1784,
    "toLine": 1785
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1772,
    "toLine": 1773
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 2,
        "mass": 97,
        "clones": 4,
        "snippet": "if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1747,
    "toLine": 1748
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1760,
    "toLine": 1761
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1784,
    "toLine": 1785
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1772,
    "toLine": 1773
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 2,
        "mass": 97,
        "clones": 4,
        "snippet": "if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1747,
    "toLine": 1748
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1760,
    "toLine": 1761
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1784,
    "toLine": 1785
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1772,
    "toLine": 1773
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 2,
        "mass": 97,
        "clones": 4,
        "snippet": "if (nodes.length > 0 && nodes[0] != null) {\n                    precision = ((Integer) nodes[0].valueData).intValue();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1747,
    "toLine": 1748
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1760,
    "toLine": 1761
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1784,
    "toLine": 1785
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1772,
    "toLine": 1773
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 10
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 5,
        "mass": 94,
        "clones": 2,
        "snippet": "{\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, 0, limit, session.actionTimestamp);\n                finaliseRows(session, list, 0, limit);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 203,
    "toLine": 207
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 151,
    "toLine": 155
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 7,
        "mass": 144,
        "clones": 3,
        "snippet": "if (cs.getCompileTimestamp()\n                    < database.schemaManager.getSchemaChangeTimestamp()) {\n                cs = session.statementManager.getStatement(session, cs);\n                session.sessionContext.currentStatement = cs;\n                if (cs == null) {\n                    return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 491,
    "toLine": 497
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 286,
    "toLine": 292
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 725,
    "toLine": 731
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 140,
        "clones": 3,
        "snippet": "            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n            endTransaction(session);\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.commit(session);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 122,
    "toLine": 131
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 98,
    "toLine": 107
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 167,
    "toLine": 176
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 36,
        "mass": 380,
        "clones": 2,
        "snippet": "{\n        rowActionMap.getWriteLock().lock();\n        try {\n            RowAction action = (RowAction) rowActionMap.get(id);\n            synchronized (action) {\n                if (action.type == RowActionBase.ACTION_NONE) {\n                    rowActionMap.remove(id);\n                }\n            }\n        } finally {\n            rowActionMap.getWriteLock().unlock();\n        }\n    }\n    void addToCommittedQueue(Session session, Object[] list) {\n        synchronized (committedTransactionTimestamps) {\n            committedTransactions.addLast(list);\n            committedTransactionTimestamps.addLast(session.actionTimestamp);\n            if (committedTransactions.size() > 64) {\n            }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 617,
    "toLine": 652
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 387,
    "toLine": 422
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 12,
        "mass": 204,
        "clones": 2,
        "snippet": "adjustLobUsage(session);\n            persistCommit(session);\n            int newLimit = session.rowActionList.size();\n            if (newLimit > limit) {\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, limit, newLimit,\n                                 session.actionTimestamp);\n                finaliseRows(session, list, limit, newLimit);\n                session.rowActionList.setSize(limit);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 186,
    "toLine": 197
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 134,
    "toLine": 145
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 120,
        "clones": 2,
        "snippet": "session.actionTimestamp = getNextGlobalChangeTimestamp();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.prepareCommit(session);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 124,
    "toLine": 129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 97,
    "toLine": 102
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 149,
        "clones": 2,
        "snippet": "session.actionTimestamp = getNextGlobalChangeTimestamp();\n            if (!session.isTransaction) {\n                session.transactionTimestamp = session.actionTimestamp;\n                session.isTransaction        = true;\n                liveTransactionTimestamps.addLast(\n                    session.transactionTimestamp);\n                transactionCount++;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 756,
    "toLine": 765
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 528,
    "toLine": 537
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 21,
        "mass": 219,
        "clones": 2,
        "snippet": "rowActionMap.put(object.getPos(), row.rowAction);\n        }\n    }\n    public void setTransactionInfo(PersistentStore store,\n                                   CachedObject object) {\n        if (object.isMemory()) {\n            return;\n        }\n        Row row = (Row) object;\n        if (row.getTable().tableType == TableBase.CACHED_TABLE) {\n            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());\n            row.rowAction = rowact;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 577,
    "toLine": 597
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 351,
    "toLine": 371
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 18,
        "mass": 240,
        "clones": 2,
        "snippet": "synchronized (committedTransactionTimestamps) {\n                if (committedTransactionTimestamps.isEmpty()) {\n                    break;\n                }\n                commitTimestamp = committedTransactionTimestamps.getFirst();\n                if (commitTimestamp < timestamp) {\n                    committedTransactionTimestamps.removeFirst();\n                    actions = (Object[]) committedTransactions.removeFirst();\n                } else {\n                    break;\n                }\n            }\n            mergeTransaction(actions, 0, actions.length, commitTimestamp);\n            finaliseRows(session, actions, 0, actions.length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 667,
    "toLine": 684
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 437,
    "toLine": 454
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 18,
        "mass": 352,
        "clones": 3,
        "snippet": "{\n            writeLock.unlock();\n        }\n    }\n    public void rollbackSavepoint(Session session, int index) {\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n        rollbackPartial(session, start, timestamp);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 184,
    "toLine": 201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 134,
    "toLine": 151
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 246,
    "toLine": 263
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/Session.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 18,
        "mass": 436,
        "clones": 2,
        "snippet": "updateCounts[count++] = in.getUpdateCount();\n            } else if (in.isData()) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.CALL_RESPONSE) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.ERROR) {\n                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);\n                error        = in;\n                break;\n            } else {\n                throw Error.runtimeError(ErrorCode.U_S0500, \"Session\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Session.java",
    "fromLine": 1520,
    "toLine": 1537
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Session.java",
    "fromLine": 1460,
    "toLine": 1477
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 18,
        "mass": 436,
        "clones": 2,
        "snippet": "updateCounts[count++] = in.getUpdateCount();\n            } else if (in.isData()) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.CALL_RESPONSE) {\n                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;\n            } else if (in.mode == ResultConstants.ERROR) {\n                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);\n                error        = in;\n                break;\n            } else {\n                throw Error.runtimeError(ErrorCode.U_S0500, \"Session\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Session.java",
    "fromLine": 1520,
    "toLine": 1537
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Session.java",
    "fromLine": 1460,
    "toLine": 1477
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 26,
        "mass": 431,
        "clones": 2,
        "snippet": "{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 1920,
    "toLine": 1945
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java",
    "fromLine": 1093,
    "toLine": 1118
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 26,
        "mass": 431,
        "clones": 2,
        "snippet": "{\n            throw JDBCUtil.sqlException(resultIn);\n        }\n        RowSetNavigator navigator    = resultIn.getNavigator();\n        int[]           updateCounts = new int[navigator.getSize()];\n        for (int i = 0; i < updateCounts.length; i++) {\n            Object[] data = (Object[]) navigator.getNext();\n            updateCounts[i] = ((Integer) data[0]).intValue();\n        }\n        if (updateCounts.length != batchCount) {\n            if (errorResult == null) {\n                throw new BatchUpdateException(updateCounts);\n            } else {\n                errorResult.getMainString();\n                throw new BatchUpdateException(errorResult.getMainString(),\n                        errorResult.getSubString(),\n                        errorResult.getErrorCode(), updateCounts);\n            }\n        }\n        return updateCounts;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
    "fromLine": 1920,
    "toLine": 1945
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java",
    "fromLine": 1093,
    "toLine": 1118
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/TransferDb.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 12,
        "volume": 17,
        "mass": 251,
        "clones": 2,
        "snippet": "catch (SQLException e) {\n            result = null;\n        }\n        try {\n            if (result != null) {\n                while (result.next()) {\n                    ret.addElement(result.getString(1));\n                }\n                result.close();\n            }\n        } catch (SQLException e) {\n            throw new DataAccessPointException(e.toString());\n        }\n        return (ret);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferDb.java",
    "fromLine": 330,
    "toLine": 346
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferDb.java",
    "fromLine": 298,
    "toLine": 314
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 17,
        "mass": 251,
        "clones": 2,
        "snippet": "catch (SQLException e) {\n            result = null;\n        }\n        try {\n            if (result != null) {\n                while (result.next()) {\n                    ret.addElement(result.getString(1));\n                }\n                result.close();\n            }\n        } catch (SQLException e) {\n            throw new DataAccessPointException(e.toString());\n        }\n        return (ret);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferDb.java",
    "fromLine": 330,
    "toLine": 346
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferDb.java",
    "fromLine": 298,
    "toLine": 314
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 5,
        "mass": 121,
        "clones": 4,
        "snippet": "if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
    "fromLine": 312,
    "toLine": 316
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDisk.java",
    "fromLine": 354,
    "toLine": 358
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 221,
    "toLine": 225
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 356,
    "toLine": 360
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 115,
        "clones": 2,
        "snippet": "{\n        int position = key.getPosition();\n        if (position >= accessorList.length) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");\n        }\n        return accessorList[position];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDiskData.java",
    "fromLine": 181,
    "toLine": 189
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
    "fromLine": 171,
    "toLine": 179
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 153,
        "clones": 5,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i] == null) {\n                        continue;\n                    }\n                    unresolvedSet = nodes[i].resolveColumnReferences(session,\n                            rangeGroup, rangeCount, rangeGroups,\n                            unresolvedSet, acceptsSequences);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1047,
    "toLine": 1054
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1061,
    "toLine": 1068
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 240,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 65,
    "toLine": 71
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 358,
    "toLine": 365
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementResultUpdate.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 13,
        "volume": 32,
        "mass": 286,
        "clones": 2,
        "snippet": "switch (type) {\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementResultUpdate.java",
    "fromLine": 209,
    "toLine": 240
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 437,
    "toLine": 468
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 12
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 237,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 259,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 280,
    "toLine": 285
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 306,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 293,
    "toLine": 298
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 237,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 259,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 280,
    "toLine": 285
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 306,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 293,
    "toLine": 298
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 237,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 259,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 280,
    "toLine": 285
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 306,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 293,
    "toLine": 298
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 237,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 259,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 280,
    "toLine": 285
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 306,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 293,
    "toLine": 298
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 237,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 259,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 280,
    "toLine": 285
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 306,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 293,
    "toLine": 298
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 237,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 259,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 280,
    "toLine": 285
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 306,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 293,
    "toLine": 298
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 10,
        "mass": 157,
        "clones": 2,
        "snippet": "if (node.iRight == NO_POS) {\n            return null;\n        }\n        if (node.nRight == null || !node.nRight.isInMemory()) {\n            node.nRight         = findNode(store, node.iRight);\n            node.nRight.nParent = node;\n        }\n        return node.nRight;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 201,
    "toLine": 210
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 245,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 10,
        "mass": 157,
        "clones": 2,
        "snippet": "if (node.iLeft == NO_POS) {\n            return null;\n        }\n        if (node.nLeft == null || !node.nLeft.isInMemory()) {\n            node.nLeft         = findNode(store, node.iLeft);\n            node.nLeft.nParent = node;\n        }\n        return node.nLeft;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 179,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 223,
    "toLine": 232
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 4,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 332,
    "toLine": 337
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 359,
    "toLine": 364
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 407,
    "toLine": 412
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 382,
    "toLine": 387
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 4,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 332,
    "toLine": 337
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 359,
    "toLine": 364
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 407,
    "toLine": 412
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 382,
    "toLine": 387
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 4,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 332,
    "toLine": 337
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 359,
    "toLine": 364
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 407,
    "toLine": 412
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 382,
    "toLine": 387
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 4,
        "snippet": "NodeAVLDisk node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDisk) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 332,
    "toLine": 337
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 359,
    "toLine": 364
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 407,
    "toLine": 412
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 382,
    "toLine": 387
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/sample/Testdb.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 18,
        "volume": 144,
        "mass": 1138,
        "clones": 2,
        "snippet": "{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,]
}
,
{
    "metadata": {
        "cc": 18,
        "volume": 144,
        "mass": 1138,
        "clones": 2,
        "snippet": "{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 13,
        "volume": 95,
        "mass": 1121,
        "clones": 2,
        "snippet": "stmnt.execute(ddl1);\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n            ResultSet rs =\n            boolean result = rs.next();\n            value = rs.getDouble(2);\n            int integerValue = rs.getInt(4);\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n                integerValue = rs.getInt(1);\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n            if (rs.next()) {\n                int max = rs.getInt(1);\n                System.out.println(\"Max value for i: \" + max);\n            }\n            try {\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 370,
    "toLine": 464
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 445,
    "toLine": 539
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 19,
        "mass": 160,
        "clones": 2,
        "snippet": "stmnt.execute(\"drop table CDTYPE if exists\");\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 467,
    "toLine": 485
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 542,
    "toLine": 560
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 13,
        "mass": 227,
        "clones": 2,
        "snippet": "ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n                    result0 += \"\\n\";\n                }\n                rs.close();\n                System.out.println(result0);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 177,
    "toLine": 189
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 157,
    "toLine": 169
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 13,
        "mass": 227,
        "clones": 2,
        "snippet": "ResultSetMetaData rsmd    = rs.getMetaData();\n                String            result0 = \"\";\n                for (; rs.next(); ) {\n                    for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                        result0 += rs.getString(i + 1) + \":\";\n                    }\n                    result0 += \"\\n\";\n                }\n                rs.close();\n                System.out.println(result0);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 177,
    "toLine": 189
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 157,
    "toLine": 169
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 13,
        "mass": 285,
        "clones": 2,
        "snippet": "return result;\n  }\n  private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java",
    "fromLine": 264,
    "toLine": 276
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java",
    "fromLine": 115,
    "toLine": 127
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 13,
        "mass": 285,
        "clones": 2,
        "snippet": "return result;\n  }\n  private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java",
    "fromLine": 264,
    "toLine": 276
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java",
    "fromLine": 115,
    "toLine": 127
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/tar/TarReader.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 7,
        "mass": 279,
        "clones": 2,
        "snippet": "String[] patternStrings = null;\n                if (sa.length > firstPatInd) {\n                    patternStrings = new String[sa.length - firstPatInd];\n                    for (int i = firstPatInd; i < sa.length; i++) {\n                        patternStrings[i - firstPatInd] = sa[i];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/tar/DbBackup.java",
    "fromLine": 147,
    "toLine": 153
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/tar/TarReader.java",
    "fromLine": 102,
    "toLine": 108
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 7,
        "mass": 151,
        "clones": 2,
        "snippet": "if (compare < 0) {\n                high = mid;\n            } else if (compare > 0) {\n                low = mid + 1;\n            } else {\n                high  = mid;\n                found = mid;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java",
    "fromLine": 516,
    "toLine": 522
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArraySort.java",
    "fromLine": 67,
    "toLine": 73
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 16,
        "volume": 80,
        "mass": 1101,
        "clones": 2,
        "snippet": "{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,]
}
,
{
    "metadata": {
        "cc": 16,
        "volume": 80,
        "mass": 1101,
        "clones": 2,
        "snippet": "{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 12,
        "mass": 136,
        "clones": 3,
        "snippet": "appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n                return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 640,
    "toLine": 651
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 680,
    "toLine": 691
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 656,
    "toLine": 667
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 12,
        "mass": 136,
        "clones": 3,
        "snippet": "appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n                return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 640,
    "toLine": 651
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 680,
    "toLine": 691
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 656,
    "toLine": 667
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 12,
        "mass": 136,
        "clones": 3,
        "snippet": "appendTable(sb).append('\\n');\n                appendCondition(session, sb);\n                for (int i = 0; i < targetRangeVariables.length; i++) {\n                    sb.append(targetRangeVariables[i].describe(session,\n                            blanks)).append('\\n');\n                }\n                appendParms(sb).append('\\n');\n                appendSubqueries(session, sb, 2).append(']');\n                return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 640,
    "toLine": 651
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 680,
    "toLine": 691
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 656,
    "toLine": 667
}
,]
}
,
{
    "metadata": {
        "cc": 13,
        "volume": 32,
        "mass": 286,
        "clones": 2,
        "snippet": "switch (type) {\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementResultUpdate.java",
    "fromLine": 209,
    "toLine": 240
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDMQL.java",
    "fromLine": 437,
    "toLine": 468
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/WebServer.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 14,
        "volume": 151,
        "mass": 907,
        "clones": 2,
        "snippet": "{\n        super(ServerConstants.SC_PROTOCOL_HTTP);\n    }\n    public static void main(String[] args) {\n        HsqlProperties argProps = null;\n        argProps = HsqlProperties.argArrayToProps(args,\n                ServerProperties.sc_key_prefix);\n        String[] errors = argProps.getErrorKeys();\n        if (errors.length != 0) {\n            System.out.println(\"no value for argument:\" + errors[0]);\n            printHelp(\"webserver.help\");\n            return;\n        }\n        String propsPath = argProps.getProperty(ServerProperties.sc_key_props);\n        String propsExtension = \"\";\n        if (propsPath == null) {\n            propsPath      = \"webserver\";\n            propsExtension = \".properties\";\n        }\n        propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);\n        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(\n            ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension);\n        ServerProperties props =\n            fileProps == null\n            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)\n            : fileProps;\n        props.addProperties(argProps);\n        ServerConfiguration.translateDefaultDatabaseProperty(props);\n        ServerConfiguration.translateDefaultNoSystemExitProperty(props);\n        ServerConfiguration.translateAddressProperty(props);\n        Server server = new WebServer();\n        try {\n            server.setProperties(props);\n        } catch (Exception e) {\n            server.printError(\"Failed to set properties\");\n            server.printStackTrace(e);\n            return;\n        }\n        server.print(\"Startup sequence initiated from main() method\");\n        if (fileProps != null) {\n            server.print(\"Loaded properties from [\" + propsPath\n                         + \".properties]\");\n        } else {\n            server.print(\"Could not load properties from file\");\n            server.print(\"Using cli\/default properties only\");\n        }\n        server.start();\n    }\n    public String getDefaultWebPage() {\n        return serverProperties.getProperty(\n            ServerProperties.sc_key_web_default_page);\n    }\n    public String getHelpString() {\n        return ResourceBundleHandler.getString(serverBundleHandle,\n                                               \"webserver.help\");\n    }\n    public String getProductName() {\n        return \"HSQLDB web server\";\n    }\n    public String getProtocol() {\n        return isTls() ? \"HTTPS\"\n                       : \"HTTP\";\n    }\n    public String getWebRoot() {\n        return serverProperties.getProperty(ServerProperties.sc_key_web_root);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/WebServer.java",
    "fromLine": 128,
    "toLine": 278
}
,
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/WebServer.java",
    "fromLine": 128,
    "toLine": 278
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 16
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 129,
        "clones": 2,
        "snippet": "for (int j = 0; j < array.length; j++) {\n                    if (j > 0) {\n                        sb.append(',');\n                    }\n                    sb.append(array[j].getId());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 1146,
    "toLine": 1151
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 1129,
    "toLine": 1134
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 129,
        "clones": 2,
        "snippet": "for (int j = 0; j < array.length; j++) {\n                    if (j > 0) {\n                        sb.append(',');\n                    }\n                    sb.append(array[j].getId());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 1146,
    "toLine": 1151
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 1129,
    "toLine": 1134
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 4,
        "mass": 152,
        "clones": 2,
        "snippet": "if (type.isDistinctType()) {\n                        row[udt_catalog] = database.getCatalogName().name;\n                        row[udt_schema]  = type.getSchemaName().name;\n                        row[udt_name]    = type.getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4450,
    "toLine": 4453
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2754,
    "toLine": 2757
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 4,
        "mass": 152,
        "clones": 2,
        "snippet": "if (type.isDistinctType()) {\n                        row[udt_catalog] = database.getCatalogName().name;\n                        row[udt_schema]  = type.getSchemaName().name;\n                        row[udt_name]    = type.getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4450,
    "toLine": 4453
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2754,
    "toLine": 2757
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 160,
        "clones": 2,
        "snippet": "{\n            row[data_type] = \"INTERVAL\";\n            row[interval_type] =\n                ((IntervalType) type).getQualifier(type.typeCode);\n            row[interval_precision] = ValuePool.getLong(type.precision);\n            row[datetime_precision] = ValuePool.getLong(type.scale);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3817,
    "toLine": 3822
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4426,
    "toLine": 4433
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 160,
        "clones": 2,
        "snippet": "{\n            row[data_type] = \"INTERVAL\";\n            row[interval_type] =\n                ((IntervalType) type).getQualifier(type.typeCode);\n            row[interval_precision] = ValuePool.getLong(type.precision);\n            row[datetime_precision] = ValuePool.getLong(type.scale);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3817,
    "toLine": 3822
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4426,
    "toLine": 4433
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 19,
        "mass": 354,
        "clones": 6,
        "snippet": "{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2688,
    "toLine": 2706
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3441,
    "toLine": 3456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3785,
    "toLine": 3798
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4394,
    "toLine": 4414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7933,
    "toLine": 7948
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5968,
    "toLine": 5986
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 19,
        "mass": 354,
        "clones": 6,
        "snippet": "{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2688,
    "toLine": 2706
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3441,
    "toLine": 3456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3785,
    "toLine": 3798
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4394,
    "toLine": 4414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7933,
    "toLine": 7948
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5968,
    "toLine": 5986
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 19,
        "mass": 354,
        "clones": 6,
        "snippet": "{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2688,
    "toLine": 2706
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3441,
    "toLine": 3456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3785,
    "toLine": 3798
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4394,
    "toLine": 4414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7933,
    "toLine": 7948
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5968,
    "toLine": 5986
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 19,
        "mass": 354,
        "clones": 6,
        "snippet": "{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2688,
    "toLine": 2706
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3441,
    "toLine": 3456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3785,
    "toLine": 3798
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4394,
    "toLine": 4414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7933,
    "toLine": 7948
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5968,
    "toLine": 5986
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 19,
        "mass": 354,
        "clones": 6,
        "snippet": "{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2688,
    "toLine": 2706
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3441,
    "toLine": 3456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3785,
    "toLine": 3798
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4394,
    "toLine": 4414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7933,
    "toLine": 7948
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5968,
    "toLine": 5986
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 19,
        "mass": 354,
        "clones": 6,
        "snippet": "{\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2688,
    "toLine": 2706
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3441,
    "toLine": 3456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3785,
    "toLine": 3798
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 4394,
    "toLine": 4414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7933,
    "toLine": 7948
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5968,
    "toLine": 5986
}
,]
}
,
{
    "metadata": {
        "cc": 41,
        "volume": 59,
        "mass": 2877,
        "clones": 4,
        "snippet": "                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2687,
    "toLine": 2745
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3440,
    "toLine": 3494
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7932,
    "toLine": 7984
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5967,
    "toLine": 6025
}
,]
}
,
{
    "metadata": {
        "cc": 41,
        "volume": 59,
        "mass": 2877,
        "clones": 4,
        "snippet": "                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2687,
    "toLine": 2745
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3440,
    "toLine": 3494
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7932,
    "toLine": 7984
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5967,
    "toLine": 6025
}
,]
}
,
{
    "metadata": {
        "cc": 41,
        "volume": 59,
        "mass": 2877,
        "clones": 4,
        "snippet": "                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2687,
    "toLine": 2745
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3440,
    "toLine": 3494
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7932,
    "toLine": 7984
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5967,
    "toLine": 6025
}
,]
}
,
{
    "metadata": {
        "cc": 41,
        "volume": 59,
        "mass": 2877,
        "clones": 4,
        "snippet": "                if (type.isCharacterType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                    row[character_set_catalog] =\n                        database.getCatalogName().name;\n                    row[character_set_schema] =\n                        ((CharacterType) type).getCharacterSet()\n                            .getSchemaName().name;\n                    row[character_set_name] =\n                        ((CharacterType) type).getCharacterSet().getName()\n                            .name;\n                    row[collation_catalog] = database.getCatalogName().name;\n                    row[collation_schema] =\n                        ((CharacterType) type).getCollation().getSchemaName()\n                            .name;\n                    row[collation_name] =\n                        ((CharacterType) type).getCollation().getName().name;\n                } else if (type.isNumberType()) {\n                    row[numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    row[declared_numeric_precision] = ValuePool.getLong(\n                        ((NumberType) type).getNumericPrecisionInRadix());\n                    if (type.isExactNumberType()) {\n                        row[numeric_scale] = row[declared_numeric_scale] =\n                            ValuePool.getLong(type.scale);\n                    }\n                    row[numeric_precision_radix] =\n                        ValuePool.getLong(type.getPrecisionRadix());\n                } else if (type.isBooleanType()) {\n                } else if (type.isDateTimeType()) {\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isIntervalType()) {\n                    row[data_type] = \"INTERVAL\";\n                    row[interval_type] =\n                        ((IntervalType) type).getQualifier(type.typeCode);\n                    row[interval_precision] =\n                        ValuePool.getLong(type.precision);\n                    row[datetime_precision] = ValuePool.getLong(type.scale);\n                } else if (type.isBinaryType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isBitType()) {\n                    row[character_maximum_length] =\n                        ValuePool.getLong(type.precision);\n                    row[character_octet_length] =\n                        ValuePool.getLong(type.precision);\n                } else if (type.isArrayType()) {\n                    row[maximum_cardinality] =\n                        ValuePool.getLong(type.arrayLimitCardinality());\n                    row[data_type] = \"ARRAY\";\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 2687,
    "toLine": 2745
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 3440,
    "toLine": 3494
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 7932,
    "toLine": 7984
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
    "fromLine": 5967,
    "toLine": 6025
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/RowAVL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 118,
        "clones": 2,
        "snippet": "{\n        NodeAVL backnode = getNode(index - 1);\n        NodeAVL newnode  = new NodeAVL(this);\n        newnode.nNext  = backnode.nNext;\n        backnode.nNext = newnode;\n        return newnode;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAVL.java",
    "fromLine": 161,
    "toLine": 169
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAVLDiskData.java",
    "fromLine": 146,
    "toLine": 154
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 11,
        "mass": 177,
        "clones": 3,
        "snippet": "for (int i = 0; i < len; i++) {\n            sb.append(quote);\n            sb.append(s[i]);\n            sb.append(quote);\n            if (i + 1 < len) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 222,
    "toLine": 232
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 274,
    "toLine": 284
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 256,
    "toLine": 266
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 11,
        "mass": 177,
        "clones": 3,
        "snippet": "for (int i = 0; i < len; i++) {\n            sb.append(quote);\n            sb.append(s[i]);\n            sb.append(quote);\n            if (i + 1 < len) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 222,
    "toLine": 232
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 274,
    "toLine": 284
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 256,
    "toLine": 266
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 11,
        "mass": 177,
        "clones": 3,
        "snippet": "for (int i = 0; i < len; i++) {\n            sb.append(quote);\n            sb.append(s[i]);\n            sb.append(quote);\n            if (i + 1 < len) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 222,
    "toLine": 232
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 274,
    "toLine": 284
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringUtil.java",
    "fromLine": 256,
    "toLine": 266
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/Grid.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 30,
        "mass": 205,
        "clones": 2,
        "snippet": "{\n        dMinimum = d;\n    }\n    public void setBounds(int x, int y, int w, int h) {\n        super.setBounds(x, y, w, h);\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n        iImage = null;\n        repaint();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/Grid.java",
    "fromLine": 174,
    "toLine": 203
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/Tree.java",
    "fromLine": 155,
    "toLine": 186
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/ConnectionDialog.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 181,
        "clones": 2,
        "snippet": "        if (d.width >= 640) {\n            setLocation((d.width - size.width) \/ 2,\n                        (d.height - size.height) \/ 2);\n        } else {\n            setLocation(0, 0);\n            setSize(d);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java",
    "fromLine": 255,
    "toLine": 261
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialog.java",
    "fromLine": 256,
    "toLine": 262
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 145,
        "clones": 2,
        "snippet": "if (setting != null) {\n                mName.setText(setting.getName());\n                mDriver.setText(setting.getDriver());\n                mURL.setText(setting.getUrl());\n                mUser.setText(setting.getUser());\n                mPassword.setText(setting.getPassword());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java",
    "fromLine": 359,
    "toLine": 364
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialog.java",
    "fromLine": 159,
    "toLine": 164
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/LongKeyLongValueHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 51,
        "mass": 399,
        "clones": 2,
        "snippet": "{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public long get(int key, int defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(int key, long[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = longValueTable[lookup];\n            return true;\n        }\n        return false;\n    }\n    public boolean put(int key, int value) {\n        int oldSize = size();\n        super.addOrRemove(key, value, null, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(int key) {\n        int oldSize = size();\n        super.addOrRemove(key, 0, null, null, true);\n        return oldSize != size();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntKeyLongValueHashMap.java",
    "fromLine": 55,
    "toLine": 105
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongKeyLongValueHashMap.java",
    "fromLine": 65,
    "toLine": 115
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 9,
        "mass": 266,
        "clones": 2,
        "snippet": "if (type == DatabaseURL.S_FILE) {\n            databaseMap = fileDatabaseMap;\n            key         = filePathToKey(path);\n        } else if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw (Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\"));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 400,
    "toLine": 408
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 346,
    "toLine": 354
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 9,
        "mass": 266,
        "clones": 2,
        "snippet": "if (type == DatabaseURL.S_FILE) {\n            databaseMap = fileDatabaseMap;\n            key         = filePathToKey(path);\n        } else if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw (Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\"));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 400,
    "toLine": 408
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 346,
    "toLine": 354
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 6,
        "mass": 143,
        "clones": 2,
        "snippet": "if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 372,
    "toLine": 377
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 310,
    "toLine": 315
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 6,
        "mass": 143,
        "clones": 2,
        "snippet": "if (type == DatabaseURL.S_RES) {\n            databaseMap = resDatabaseMap;\n        } else if (type == DatabaseURL.S_MEM) {\n            databaseMap = memDatabaseMap;\n        } else {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 372,
    "toLine": 377
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/DatabaseManager.java",
    "fromLine": 310,
    "toLine": 315
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 9,
        "mass": 178,
        "clones": 2,
        "snippet": "if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }\n        return ss;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java",
    "fromLine": 156,
    "toLine": 164
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java",
    "fromLine": 126,
    "toLine": 134
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 9,
        "mass": 178,
        "clones": 2,
        "snippet": "if (Error.TRACESYSTEMOUT) {\n            Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");\n            Error.printSystemOut(\"capabilities for \" + ss + \":\");\n            Error.printSystemOut(\"----------------------------\");\n            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());\n            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());\n        }\n        return ss;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java",
    "fromLine": 156,
    "toLine": 164
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java",
    "fromLine": 126,
    "toLine": 134
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 245,
        "clones": 2,
        "snippet": "try {\n            cryptOut = crypto.getOutputStream(fileStreamOut);\n            fileStreamOut = new GZIPOutputStream(cryptOut);\n            isCrypt       = true;\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
    "fromLine": 81,
    "toLine": 89
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
    "fromLine": 64,
    "toLine": 72
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 245,
        "clones": 2,
        "snippet": "try {\n            cryptOut = crypto.getOutputStream(fileStreamOut);\n            fileStreamOut = new GZIPOutputStream(cryptOut);\n            isCrypt       = true;\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
    "fromLine": 81,
    "toLine": 89
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
    "fromLine": 64,
    "toLine": 72
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 15,
        "mass": 487,
        "clones": 2,
        "snippet": "{\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
    "fromLine": 102,
    "toLine": 116
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java",
    "fromLine": 269,
    "toLine": 283
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDisk.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 5,
        "mass": 121,
        "clones": 4,
        "snippet": "if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
    "fromLine": 312,
    "toLine": 316
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDisk.java",
    "fromLine": 354,
    "toLine": 358
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 221,
    "toLine": 225
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 356,
    "toLine": 360
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementCommand.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 13,
        "volume": 25,
        "mass": 410,
        "clones": 2,
        "snippet": "{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n            return result;\n        }\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCommand.java",
    "fromLine": 212,
    "toLine": 236
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSession.java",
    "fromLine": 234,
    "toLine": 258
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 10,
        "mass": 155,
        "clones": 2,
        "snippet": "                    }\n                } else {\n                    System.out.println(\" -- executing directly\\n<<<\\n\"\n                                       + stmtArray[i].command + \"\\n>>>\\n\");\n                    Statement s = con.createStatement();\n                    boolean   b = s.execute(stmtArray[i].command);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java",
    "fromLine": 145,
    "toLine": 154
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestPreparedStatements.java",
    "fromLine": 203,
    "toLine": 213
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 33,
        "mass": 289,
        "clones": 2,
        "snippet": "{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public int get(int key, int defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(int key, int[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = intValueTable[lookup];\n            return true;\n        }\n        return false;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java",
    "fromLine": 58,
    "toLine": 90
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java",
    "fromLine": 65,
    "toLine": 97
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 14,
        "mass": 137,
        "clones": 2,
        "snippet": "{\n            int index = trimmed.indexOf(' ');\n            if (index < 0) {\n                throw new IllegalArgumentException();\n            }\n            enforceSequence = Boolean.valueOf(trimmed.substring(0,\n                    index)).booleanValue();\n            waiter = Waiter.getWaiter(trimmed.substring(index).trim());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1107,
    "toLine": 1120
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1020,
    "toLine": 1033
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 14,
        "mass": 137,
        "clones": 2,
        "snippet": "{\n            int index = trimmed.indexOf(' ');\n            if (index < 0) {\n                throw new IllegalArgumentException();\n            }\n            enforceSequence = Boolean.valueOf(trimmed.substring(0,\n                    index)).booleanValue();\n            waiter = Waiter.getWaiter(trimmed.substring(index).trim());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1107,
    "toLine": 1120
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1020,
    "toLine": 1033
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 11,
        "mass": 149,
        "clones": 3,
        "snippet": "for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n            sb.append(\"+ \" + lines[i]);\n        }\n        TestUtil.expandStamps(sb);\n        return sb.toString().trim();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1050,
    "toLine": 1060
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1358,
    "toLine": 1368
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1136,
    "toLine": 1146
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 11,
        "mass": 149,
        "clones": 3,
        "snippet": "for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n            sb.append(\"+ \" + lines[i]);\n        }\n        TestUtil.expandStamps(sb);\n        return sb.toString().trim();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1050,
    "toLine": 1060
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1358,
    "toLine": 1368
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1136,
    "toLine": 1146
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 11,
        "mass": 149,
        "clones": 3,
        "snippet": "for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(LS);\n            }\n            sb.append(\"+ \" + lines[i]);\n        }\n        TestUtil.expandStamps(sb);\n        return sb.toString().trim();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1050,
    "toLine": 1060
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1358,
    "toLine": 1368
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUtil.java",
    "fromLine": 1136,
    "toLine": 1146
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 9,
        "mass": 244,
        "clones": 2,
        "snippet": "{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[RIGHT].dataType.canConvertFrom(\n                            nodes[LEFT].dataType)) {\n                        nodes[LEFT] = ExpressionOp.getCastExpression(session,\n                                nodes[LEFT], nodes[RIGHT].dataType);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 943,
    "toLine": 951
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 923,
    "toLine": 931
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 9,
        "mass": 244,
        "clones": 2,
        "snippet": "{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[RIGHT].dataType.canConvertFrom(\n                            nodes[LEFT].dataType)) {\n                        nodes[LEFT] = ExpressionOp.getCastExpression(session,\n                                nodes[LEFT], nodes[RIGHT].dataType);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 943,
    "toLine": 951
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 923,
    "toLine": 931
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 9,
        "mass": 244,
        "clones": 2,
        "snippet": "{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[LEFT].dataType.canConvertFrom(\n                            nodes[RIGHT].dataType)) {\n                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,\n                                nodes[RIGHT], nodes[LEFT].dataType);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 933,
    "toLine": 941
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 912,
    "toLine": 920
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 9,
        "mass": 244,
        "clones": 2,
        "snippet": "{\n                    if (session.database.sqlEnforceTypes) {\n                        throw Error.error(ErrorCode.X_42562);\n                    }\n                    if (nodes[LEFT].dataType.canConvertFrom(\n                            nodes[RIGHT].dataType)) {\n                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,\n                                nodes[RIGHT], nodes[LEFT].dataType);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 933,
    "toLine": 941
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 912,
    "toLine": 920
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestLibSpeed.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 14,
        "mass": 283,
        "clones": 2,
        "snippet": "sw.zero();\n            for (int j = 0; j < count; j++) {\n                for (int i = 0; i < sNumeric.length; i++) {\n                    int r = randomgen.nextInt(sNumeric.length);\n                    doubleIntLookup.findFirstEqualKeyIndex(r);\n                    dummy += r;\n                }\n            }\n            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());\n            sw.zero();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLibSpeed.java",
    "fromLine": 218,
    "toLine": 231
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLibSpeed.java",
    "fromLine": 180,
    "toLine": 193
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 14,
        "mass": 283,
        "clones": 2,
        "snippet": "sw.zero();\n            for (int j = 0; j < count; j++) {\n                for (int i = 0; i < sNumeric.length; i++) {\n                    int r = randomgen.nextInt(sNumeric.length);\n                    doubleIntLookup.findFirstEqualKeyIndex(r);\n                    dummy += r;\n                }\n            }\n            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());\n            sw.zero();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLibSpeed.java",
    "fromLine": 218,
    "toLine": 231
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLibSpeed.java",
    "fromLine": 180,
    "toLine": 193
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 9
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 4,
        "mass": 141,
        "clones": 2,
        "snippet": "{\n        for (int i = 0; i < columnMap.length; i++) {\n            newRow[i] = row[columnMap[i]];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 1342,
    "toLine": 1345
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 1335,
    "toLine": 1338
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 4,
        "mass": 141,
        "clones": 2,
        "snippet": "{\n        for (int i = 0; i < columnMap.length; i++) {\n            newRow[i] = row[columnMap[i]];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 1342,
    "toLine": 1345
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 1335,
    "toLine": 1338
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 11,
        "mass": 165,
        "clones": 2,
        "snippet": "{\n            for (int j = 0; j < arrb.length; j++) {\n                if (arra[i] == arrb[j]) {\n                    k++;\n                    break;\n                }\n            }\n        }\n        return k;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 523,
    "toLine": 533
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 505,
    "toLine": 515
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 11,
        "mass": 165,
        "clones": 2,
        "snippet": "{\n            for (int j = 0; j < arrb.length; j++) {\n                if (arra[i] == arrb[j]) {\n                    k++;\n                    break;\n                }\n            }\n        }\n        return k;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 523,
    "toLine": 533
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 505,
    "toLine": 515
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 17,
        "mass": 146,
        "clones": 2,
        "snippet": "{\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static int find(short[] array, int value) {\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                return i;\n            }\n        }\n        return -1;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 260,
    "toLine": 276
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 246,
    "toLine": 265
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 17,
        "mass": 146,
        "clones": 2,
        "snippet": "{\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static int find(short[] array, int value) {\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                return i;\n            }\n        }\n        return -1;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 260,
    "toLine": 276
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 246,
    "toLine": 265
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 29,
        "mass": 304,
        "clones": 2,
        "snippet": "break;\n            }\n        }\n        return k;\n    }\n    public static int countSameElements(char[] arra, int start, char[] arrb) {\n        int k     = 0;\n        int limit = arra.length - start;\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n        return k;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 553,
    "toLine": 581
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 528,
    "toLine": 557
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 29,
        "mass": 304,
        "clones": 2,
        "snippet": "break;\n            }\n        }\n        return k;\n    }\n    public static int countSameElements(char[] arra, int start, char[] arrb) {\n        int k     = 0;\n        int limit = arra.length - start;\n        if (limit > arrb.length) {\n            limit = arrb.length;\n        }\n        for (int i = 0; i < limit; i++) {\n            if (arra[i + start] == arrb[i]) {\n                k++;\n            } else {\n                break;\n            }\n        }\n        return k;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 553,
    "toLine": 581
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 528,
    "toLine": 557
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 113,
        "clones": 2,
        "snippet": "{\n        long mask    = 0xffffffffffffffffl << scale;\n        long newSize = value & mask;\n        if (newSize != value) {\n            newSize += 1 << scale;\n        }\n        return newSize;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 1674,
    "toLine": 1683
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFile.java",
    "fromLine": 490,
    "toLine": 499
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/BitType.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 18,
        "mass": 132,
        "clones": 3,
        "snippet": "{\n        if (precision == 0) {\n            return getNameString();\n        }\n        StringBuffer sb = new StringBuffer(16);\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n        return sb.toString();\n    }\n    public boolean isBitType() {\n        return true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BitType.java",
    "fromLine": 93,
    "toLine": 110
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 165,
    "toLine": 182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BinaryType.java",
    "fromLine": 118,
    "toLine": 135
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 5,
        "mass": 121,
        "clones": 4,
        "snippet": "if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
    "fromLine": 312,
    "toLine": 316
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDisk.java",
    "fromLine": 354,
    "toLine": 358
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 221,
    "toLine": 225
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 356,
    "toLine": 360
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 5,
        "mass": 148,
        "clones": 2,
        "snippet": "Object[] data = ((Row) object).getData();\n        for (int i = 0; i < nullsList.length; i++) {\n            if (data[i] == null) {\n                nullsList[i] = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 104,
    "toLine": 108
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 172,
    "toLine": 176
}
,]
}
,
{
    "metadata": {
        "cc": 22,
        "volume": 47,
        "mass": 432,
        "clones": 2,
        "snippet": "{\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT :\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }\n    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 133,
    "toLine": 179
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 256,
    "toLine": 302
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 9,
        "mass": 252,
        "clones": 2,
        "snippet": "if (mode == TransactionManager.ACTION_READ) {\n                        actionType = action.ACTION_DELETE;\n                    } else if (mode == TransactionManager.ACTION_DUP) {\n                        actionType = ACTION_INSERT;\n                        session.tempSet.clear();\n                        session.tempSet.add(action);\n                    } else if (mode == TransactionManager.ACTION_REF) {\n                        actionType = ACTION_DELETE;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 850,
    "toLine": 858
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 818,
    "toLine": 826
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 9,
        "mass": 252,
        "clones": 2,
        "snippet": "if (mode == TransactionManager.ACTION_READ) {\n                        actionType = action.ACTION_DELETE;\n                    } else if (mode == TransactionManager.ACTION_DUP) {\n                        actionType = ACTION_INSERT;\n                        session.tempSet.clear();\n                        session.tempSet.add(action);\n                    } else if (mode == TransactionManager.ACTION_REF) {\n                        actionType = ACTION_DELETE;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 850,
    "toLine": 858
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 818,
    "toLine": 826
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 16,
        "mass": 279,
        "clones": 2,
        "snippet": "{\n                if (action.type == ACTION_DELETE) {\n                    if (actionType == ACTION_INSERT) {\n                        actionType = ACTION_INSERT_DELETE;\n                    } else {\n                        actionType = action.type;\n                    }\n                } else if (action.type == ACTION_INSERT) {\n                    actionType = action.type;\n                }\n            }\n            action = action.next;\n        } while (action != null);\n        return actionType;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 589,
    "toLine": 604
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 557,
    "toLine": 572
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 16,
        "mass": 279,
        "clones": 2,
        "snippet": "{\n                if (action.type == ACTION_DELETE) {\n                    if (actionType == ACTION_INSERT) {\n                        actionType = ACTION_INSERT_DELETE;\n                    } else {\n                        actionType = action.type;\n                    }\n                } else if (action.type == ACTION_INSERT) {\n                    actionType = action.type;\n                }\n            }\n            action = action.next;\n        } while (action != null);\n        return actionType;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 589,
    "toLine": 604
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RowAction.java",
    "fromLine": 557,
    "toLine": 572
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementSchema.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 14,
        "volume": 13,
        "mass": 350,
        "clones": 2,
        "snippet": "if (name.schema == null) {\n            name.schema = schemaName == null\n                          ? session.getCurrentSchemaHsqlName()\n                          : schemaName;\n        } else {\n            name.schema = session.getSchemaHsqlName(name.schema.name);\n            if (name.schema == null) {\n                throw Error.error(ErrorCode.X_42505);\n            }\n            if (isSchemaDefinition && schemaName != name.schema) {\n                throw Error.error(ErrorCode.X_42505);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSchema.java",
    "fromLine": 1537,
    "toLine": 1549
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSchema.java",
    "fromLine": 1508,
    "toLine": 1520
}
,]
}
,
{
    "metadata": {
        "cc": 14,
        "volume": 13,
        "mass": 350,
        "clones": 2,
        "snippet": "if (name.schema == null) {\n            name.schema = schemaName == null\n                          ? session.getCurrentSchemaHsqlName()\n                          : schemaName;\n        } else {\n            name.schema = session.getSchemaHsqlName(name.schema.name);\n            if (name.schema == null) {\n                throw Error.error(ErrorCode.X_42505);\n            }\n            if (isSchemaDefinition && schemaName != name.schema) {\n                throw Error.error(ErrorCode.X_42505);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSchema.java",
    "fromLine": 1537,
    "toLine": 1549
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSchema.java",
    "fromLine": 1508,
    "toLine": 1520
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RAFileInJar.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 14,
        "volume": 19,
        "mass": 354,
        "clones": 3,
        "snippet": "InputStream fis = null;\n            try {\n                fis = getClass().getResourceAsStream(fileName);\n                if (fis == null) {\n                    ClassLoader cl =\n                        Thread.currentThread().getContextClassLoader();\n                    if (cl != null) {\n                        fis = cl.getResourceAsStream(fileName);\n                    }\n                }\n            } catch (Throwable t) {\n            } finally {\n                if (fis == null) {\n                    throw new FileNotFoundException(fileName);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/FileUtil.java",
    "fromLine": 353,
    "toLine": 371
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileInJar.java",
    "fromLine": 224,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobStoreInJar.java",
    "fromLine": 123,
    "toLine": 141
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/HsqlDeque.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 13,
        "mass": 162,
        "clones": 2,
        "snippet": "{\n        if (i < 0 || i >= elementCount) {\n            throw new IndexOutOfBoundsException();\n        }\n        int index = firstindex + i;\n        if (index >= list.length) {\n            index -= list.length;\n        }\n        return index;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HsqlDeque.java",
    "fromLine": 309,
    "toLine": 321
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongDeque.java",
    "fromLine": 301,
    "toLine": 313
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestPreparedStatements.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 10,
        "mass": 155,
        "clones": 2,
        "snippet": "                    }\n                } else {\n                    System.out.println(\" -- executing directly\\n<<<\\n\"\n                                       + stmtArray[i].command + \"\\n>>>\\n\");\n                    Statement s = con.createStatement();\n                    boolean   b = s.execute(stmtArray[i].command);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java",
    "fromLine": 145,
    "toLine": 154
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestPreparedStatements.java",
    "fromLine": 203,
    "toLine": 213
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 6,
        "mass": 154,
        "clones": 2,
        "snippet": "try {\n            setProperties(p);\n        } catch (Exception e) {\n            throw Error.error(e, ErrorCode.GENERAL_ERROR,\n                              ErrorCode.M_Message_Pair,\n                              new String[]{ \"Failed to set properties\" });\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 948,
    "toLine": 953
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 903,
    "toLine": 908
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 6,
        "mass": 154,
        "clones": 2,
        "snippet": "try {\n            setProperties(p);\n        } catch (Exception e) {\n            throw Error.error(e, ErrorCode.GENERAL_ERROR,\n                              ErrorCode.M_Message_Pair,\n                              new String[]{ \"Failed to set properties\" });\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 948,
    "toLine": 953
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 903,
    "toLine": 908
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 4,
        "mass": 53,
        "clones": 2,
        "snippet": "printError(\"Database [index=\" + i + \", db=\" + dbType[i]\n                           + dbPath[i] + \", alias=\" + dbAlias[i]\n                           + \"] did not open: \" + e.toString());\n                setServerError(e);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 1882,
    "toLine": 1885
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 1830,
    "toLine": 1833
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 4,
        "mass": 53,
        "clones": 2,
        "snippet": "printError(\"Database [index=\" + i + \", db=\" + dbType[i]\n                           + dbPath[i] + \", alias=\" + dbAlias[i]\n                           + \"] did not open: \" + e.toString());\n                setServerError(e);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 1882,
    "toLine": 1885
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Server.java",
    "fromLine": 1830,
    "toLine": 1833
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementQuery.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 8,
        "mass": 214,
        "clones": 5,
        "snippet": "for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 344,
    "toLine": 351
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 185,
    "toLine": 192
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementQuery.java",
    "fromLine": 94,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 294,
    "toLine": 301
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementProcedure.java",
    "fromLine": 378,
    "toLine": 385
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/result/Result.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 96,
        "clones": 2,
        "snippet": "result.generateKeys        = in.readByte();\n                if (result.generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_NAMES || result\n                        .generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_INDEXES) {\n                    result.generatedMetaData = new ResultMetaData(in);\n                }\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/result/Result.java",
    "fromLine": 386,
    "toLine": 394
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/result/Result.java",
    "fromLine": 361,
    "toLine": 369
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 96,
        "clones": 2,
        "snippet": "result.generateKeys        = in.readByte();\n                if (result.generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_NAMES || result\n                        .generateKeys == ResultConstants\n                        .RETURN_GENERATED_KEYS_COL_INDEXES) {\n                    result.generatedMetaData = new ResultMetaData(in);\n                }\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/result/Result.java",
    "fromLine": 386,
    "toLine": 394
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/result/Result.java",
    "fromLine": 361,
    "toLine": 369
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/server/Servlet.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 73,
        "volume": 190,
        "mass": 5130,
        "clones": 2,
        "snippet": "{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,]
}
,
{
    "metadata": {
        "cc": 73,
        "volume": 190,
        "mass": 5130,
        "clones": 2,
        "snippet": "{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 5,
        "mass": 174,
        "clones": 3,
        "snippet": "double d = ((Number) a).doubleValue();\n                    if (session instanceof Session) {\n                        if (!((Session) session).database.sqlConvertTruncate) {\n                            d = java.lang.Math.rint(d);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 910,
    "toLine": 914
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 1123,
    "toLine": 1127
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 1072,
    "toLine": 1076
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 5,
        "mass": 174,
        "clones": 3,
        "snippet": "double d = ((Number) a).doubleValue();\n                    if (session instanceof Session) {\n                        if (!((Session) session).database.sqlConvertTruncate) {\n                            d = java.lang.Math.rint(d);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 910,
    "toLine": 914
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 1123,
    "toLine": 1127
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 1072,
    "toLine": 1076
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 5,
        "mass": 174,
        "clones": 3,
        "snippet": "double d = ((Number) a).doubleValue();\n                    if (session instanceof Session) {\n                        if (!((Session) session).database.sqlConvertTruncate) {\n                            d = java.lang.Math.rint(d);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 910,
    "toLine": 914
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 1123,
    "toLine": 1127
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/NumberType.java",
    "fromLine": 1072,
    "toLine": 1076
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 114,
        "clones": 3,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    sb.append(nodes[i].describe(session, blanks + 1));\n                    sb.append(' ');\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 418,
    "toLine": 420
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 306,
    "toLine": 308
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 427,
    "toLine": 429
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 153,
        "clones": 5,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i] == null) {\n                        continue;\n                    }\n                    unresolvedSet = nodes[i].resolveColumnReferences(session,\n                            rangeGroup, rangeCount, rangeGroups,\n                            unresolvedSet, acceptsSequences);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1047,
    "toLine": 1054
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1061,
    "toLine": 1068
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 240,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 65,
    "toLine": 71
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 358,
    "toLine": 365
}
,]
}
,
{
    "metadata": {
        "cc": 29,
        "volume": 43,
        "mass": 989,
        "clones": 2,
        "snippet": "boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            wasEscape = true;\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n                            continue;\n                        }\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            break;\n                        }\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n                        newArray[j++] = array[i];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 726,
    "toLine": 768
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 648,
    "toLine": 690
}
,]
}
,
{
    "metadata": {
        "cc": 29,
        "volume": 43,
        "mass": 989,
        "clones": 2,
        "snippet": "boolean wasEscape   = false;\n                    int     escapeCount = 0;\n                    int     i           = 0;\n                    int     j           = 0;\n                    for (; i < array.length; i++) {\n                        if (array[i] == escapeChar) {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            wasEscape = true;\n                            if (i == array.length - 1) {\n                                throw Error.error(ErrorCode.X_22025);\n                            }\n                            continue;\n                        }\n                        if (array[i] == '_' || array[i] == '%') {\n                            if (wasEscape) {\n                                escapeCount++;\n                                newArray[j++] = array[i];\n                                wasEscape     = false;\n                                continue;\n                            }\n                            break;\n                        }\n                        if (wasEscape) {\n                            throw Error.error(ErrorCode.X_22025);\n                        }\n                        newArray[j++] = array[i];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 726,
    "toLine": 768
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 648,
    "toLine": 690
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 14
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 14,
        "mass": 176,
        "clones": 2,
        "snippet": "int limit = session.rowActionList.size();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                if (!action.canCommit(session, session.tempSet)) {\n                    return false;\n                }\n            }\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 155,
    "toLine": 168
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 112,
    "toLine": 124
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 14,
        "mass": 176,
        "clones": 2,
        "snippet": "int limit = session.rowActionList.size();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                if (!action.canCommit(session, session.tempSet)) {\n                    return false;\n                }\n            }\n            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 155,
    "toLine": 168
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 112,
    "toLine": 124
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 5,
        "mass": 94,
        "clones": 2,
        "snippet": "{\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, 0, limit, session.actionTimestamp);\n                finaliseRows(session, list, 0, limit);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 203,
    "toLine": 207
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 151,
    "toLine": 155
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 7,
        "mass": 144,
        "clones": 3,
        "snippet": "if (cs.getCompileTimestamp()\n                    < database.schemaManager.getSchemaChangeTimestamp()) {\n                cs = session.statementManager.getStatement(session, cs);\n                session.sessionContext.currentStatement = cs;\n                if (cs == null) {\n                    return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 491,
    "toLine": 497
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 286,
    "toLine": 292
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 725,
    "toLine": 731
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 140,
        "clones": 3,
        "snippet": "            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n            endTransaction(session);\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.commit(session);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 122,
    "toLine": 131
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 98,
    "toLine": 107
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 167,
    "toLine": 176
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 139,
        "clones": 2,
        "snippet": "for (int i = 0; i < session.tempSet.size(); i++) {\n                Session current =\n                    ((RowActionBase) session.tempSet.get(i)).session;\n                current.abortTransaction = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 179,
    "toLine": 183
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 132,
    "toLine": 136
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 139,
        "clones": 2,
        "snippet": "for (int i = 0; i < session.tempSet.size(); i++) {\n                Session current =\n                    ((RowActionBase) session.tempSet.get(i)).session;\n                current.abortTransaction = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 179,
    "toLine": 183
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 132,
    "toLine": 136
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 36,
        "mass": 380,
        "clones": 2,
        "snippet": "{\n        rowActionMap.getWriteLock().lock();\n        try {\n            RowAction action = (RowAction) rowActionMap.get(id);\n            synchronized (action) {\n                if (action.type == RowActionBase.ACTION_NONE) {\n                    rowActionMap.remove(id);\n                }\n            }\n        } finally {\n            rowActionMap.getWriteLock().unlock();\n        }\n    }\n    void addToCommittedQueue(Session session, Object[] list) {\n        synchronized (committedTransactionTimestamps) {\n            committedTransactions.addLast(list);\n            committedTransactionTimestamps.addLast(session.actionTimestamp);\n            if (committedTransactions.size() > 64) {\n            }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 617,
    "toLine": 652
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 387,
    "toLine": 422
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 12,
        "mass": 204,
        "clones": 2,
        "snippet": "adjustLobUsage(session);\n            persistCommit(session);\n            int newLimit = session.rowActionList.size();\n            if (newLimit > limit) {\n                Object[] list = session.rowActionList.getArray();\n                mergeTransaction(list, limit, newLimit,\n                                 session.actionTimestamp);\n                finaliseRows(session, list, limit, newLimit);\n                session.rowActionList.setSize(limit);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 186,
    "toLine": 197
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 134,
    "toLine": 145
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 120,
        "clones": 2,
        "snippet": "session.actionTimestamp = getNextGlobalChangeTimestamp();\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.prepareCommit(session);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 124,
    "toLine": 129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 97,
    "toLine": 102
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 149,
        "clones": 2,
        "snippet": "session.actionTimestamp = getNextGlobalChangeTimestamp();\n            if (!session.isTransaction) {\n                session.transactionTimestamp = session.actionTimestamp;\n                session.isTransaction        = true;\n                liveTransactionTimestamps.addLast(\n                    session.transactionTimestamp);\n                transactionCount++;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 756,
    "toLine": 765
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 528,
    "toLine": 537
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 21,
        "mass": 219,
        "clones": 2,
        "snippet": "rowActionMap.put(object.getPos(), row.rowAction);\n        }\n    }\n    public void setTransactionInfo(PersistentStore store,\n                                   CachedObject object) {\n        if (object.isMemory()) {\n            return;\n        }\n        Row row = (Row) object;\n        if (row.getTable().tableType == TableBase.CACHED_TABLE) {\n            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());\n            row.rowAction = rowact;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 577,
    "toLine": 597
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 351,
    "toLine": 371
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 18,
        "mass": 240,
        "clones": 2,
        "snippet": "synchronized (committedTransactionTimestamps) {\n                if (committedTransactionTimestamps.isEmpty()) {\n                    break;\n                }\n                commitTimestamp = committedTransactionTimestamps.getFirst();\n                if (commitTimestamp < timestamp) {\n                    committedTransactionTimestamps.removeFirst();\n                    actions = (Object[]) committedTransactions.removeFirst();\n                } else {\n                    break;\n                }\n            }\n            mergeTransaction(actions, 0, actions.length, commitTimestamp);\n            finaliseRows(session, actions, 0, actions.length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 667,
    "toLine": 684
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 437,
    "toLine": 454
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 18,
        "mass": 352,
        "clones": 3,
        "snippet": "{\n            writeLock.unlock();\n        }\n    }\n    public void rollbackSavepoint(Session session, int index) {\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n        rollbackPartial(session, start, timestamp);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 184,
    "toLine": 201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 134,
    "toLine": 151
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 246,
    "toLine": 263
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/Expression.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 14
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 162,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(rangeVariables, set);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 974,
    "toLine": 976
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 932,
    "toLine": 934
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 114,
        "clones": 3,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    sb.append(nodes[i].describe(session, blanks + 1));\n                    sb.append(' ');\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 418,
    "toLine": 420
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 306,
    "toLine": 308
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 427,
    "toLine": 429
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 114,
        "clones": 3,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    sb.append(nodes[i].describe(session, blanks + 1));\n                    sb.append(' ');\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 418,
    "toLine": 420
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 306,
    "toLine": 308
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 427,
    "toLine": 429
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 144,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceColumnReferences(range, list);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1082,
    "toLine": 1087
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 725,
    "toLine": 730
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 7,
        "mass": 150,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,\n                    length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1000,
    "toLine": 1006
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 899,
    "toLine": 905
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 147,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(set);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 954,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 916,
    "toLine": 918
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 129,
        "clones": 4,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            sb.append(nodes[i].getSQL());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 3679,
    "toLine": 3684
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 321,
    "toLine": 326
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 351,
    "toLine": 356
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 335,
    "toLine": 340
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 129,
        "clones": 4,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            sb.append(nodes[i].getSQL());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 3679,
    "toLine": 3684
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 321,
    "toLine": 326
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 351,
    "toLine": 356
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 335,
    "toLine": 340
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 129,
        "clones": 4,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            sb.append(nodes[i].getSQL());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 3679,
    "toLine": 3684
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 321,
    "toLine": 326
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 351,
    "toLine": 356
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 335,
    "toLine": 340
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 153,
        "clones": 5,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i] == null) {\n                        continue;\n                    }\n                    unresolvedSet = nodes[i].resolveColumnReferences(session,\n                            rangeGroup, rangeCount, rangeGroups,\n                            unresolvedSet, acceptsSequences);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1047,
    "toLine": 1054
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1061,
    "toLine": 1068
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 240,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 65,
    "toLine": 71
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 358,
    "toLine": 365
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 153,
        "clones": 5,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i] == null) {\n                        continue;\n                    }\n                    unresolvedSet = nodes[i].resolveColumnReferences(session,\n                            rangeGroup, rangeCount, rangeGroups,\n                            unresolvedSet, acceptsSequences);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1047,
    "toLine": 1054
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1061,
    "toLine": 1068
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 240,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 65,
    "toLine": 71
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 358,
    "toLine": 365
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 4,
        "mass": 154,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                if (nodes[i].hasReference(range)) {\n                    return true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1102,
    "toLine": 1105
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 969,
    "toLine": 972
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 120,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 929,
    "toLine": 934
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1130,
    "toLine": 1135
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/doc/verbatim/src/org/hsqldb/test/TestBase.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 54,
        "volume": 104,
        "mass": 1856,
        "clones": 2,
        "snippet": "{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,]
}
,
{
    "metadata": {
        "cc": 54,
        "volume": 104,
        "mass": 1856,
        "clones": 2,
        "snippet": "{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 5,
        "mass": 94,
        "clones": 2,
        "snippet": "if (abalancesum != bbalancesum || bbalancesum != tbalancesum\n                    || tbalancesum != deltasum) {\n                System.out.println(\"sums don't match!\");\n            } else {\n                System.out.println(\"sums match!\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 832,
    "toLine": 836
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 745,
    "toLine": 749
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 19,
        "mass": 187,
        "clones": 2,
        "snippet": "{\n                    if (pstmt1 != null) {\n                        pstmt1.close();\n                    }\n                    if (pstmt2 != null) {\n                        pstmt2.close();\n                    }\n                    if (pstmt3 != null) {\n                        pstmt3.close();\n                    }\n                    if (pstmt4 != null) {\n                        pstmt4.close();\n                    }\n                    if (pstmt5 != null) {\n                        pstmt5.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 919,
    "toLine": 937
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 843,
    "toLine": 861
}
,]
}
,
{
    "metadata": {
        "cc": 18,
        "volume": 55,
        "mass": 533,
        "clones": 2,
        "snippet": "try {\n                        Conn.rollback();\n                    } catch (SQLException E1) {}\n                }\n            }\n            return 0;\n    class MemoryWatcherThread extends Thread {\n        long    min          = 0;\n        long    max          = 0;\n        boolean keep_running = true;\n        public MemoryWatcherThread() {\n            this.reset();\n            keep_running = true;\n        }\n        public void reset() {\n            System.gc();\n            long currentFree  = Runtime.getRuntime().freeMemory();\n            long currentAlloc = Runtime.getRuntime().totalMemory();\n            min = max = (currentAlloc - currentFree);\n        }\n        public void end() {\n            keep_running = false;\n        }\n        public void run() {\n            while (keep_running) {\n                long currentFree  = Runtime.getRuntime().freeMemory();\n                long currentAlloc = Runtime.getRuntime().totalMemory();\n                long used         = currentAlloc - currentFree;\n                if (used < min) {\n                    min = used;\n                }\n                if (used > max) {\n                    max = used;\n                }\n                try {\n                    sleep(100);\n                } catch (InterruptedException E) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 1057,
    "toLine": 1111
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 1041,
    "toLine": 1094
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 37,
        "mass": 320,
        "clones": 2,
        "snippet": "E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 714,
    "toLine": 750
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 622,
    "toLine": 658
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 37,
        "mass": 320,
        "clones": 2,
        "snippet": "E.printStackTrace();\n        }\n        connectClose(Conn);\n    public static int getRandomInt(int lo, int hi) {\n        int ret = 0;\n        ret += lo;\n        return ret;\n    }\n    public static int getRandomID(int type) {\n        int min = 0,\n            max = 0;\n        switch (type) {\n            case TELLER :\n                break;\n            case BRANCH :\n                break;\n            case ACCOUNT :\n                break;\n        }\n        return (getRandomInt(min, max));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 714,
    "toLine": 750
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 622,
    "toLine": 658
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 20,
        "mass": 378,
        "clones": 2,
        "snippet": "java.util.Date start = new java.util.Date();\n            if (init) {\n                System.out.println(\"Start: \" + start.toString());\n                System.out.print(\"Initializing dataset...\");\n                createDatabase(url, user, password);\n                double seconds = (System.currentTimeMillis() - start.getTime())\n                                 \/ 1000D;\n                System.out.println(\"done. in \" + seconds + \" seconds\\n\");\n                System.out.println(\"Complete: \"\n                                   + (new java.util.Date()).toString());\n            }\n            MemoryWatcher = new MemoryWatcherThread();\n            MemoryWatcher.start();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/JDBCBench.java",
    "fromLine": 189,
    "toLine": 208
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBench.java",
    "fromLine": 205,
    "toLine": 224
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 10,
        "mass": 176,
        "clones": 3,
        "snippet": "catch (Throwable e) {\n            database.logger.logWarningEvent(JVM_ERROR, e);\n            IOException io = new IOException(e.toString());\n            try {\n                io.initCause(e);\n            } catch (Throwable e1) {}\n            throw io;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 134,
    "toLine": 143
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 192,
    "toLine": 201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 171,
    "toLine": 180
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 10,
        "mass": 176,
        "clones": 3,
        "snippet": "catch (Throwable e) {\n            database.logger.logWarningEvent(JVM_ERROR, e);\n            IOException io = new IOException(e.toString());\n            try {\n                io.initCause(e);\n            } catch (Throwable e1) {}\n            throw io;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 134,
    "toLine": 143
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 192,
    "toLine": 201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 171,
    "toLine": 180
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 10,
        "mass": 176,
        "clones": 3,
        "snippet": "catch (Throwable e) {\n            database.logger.logWarningEvent(JVM_ERROR, e);\n            IOException io = new IOException(e.toString());\n            try {\n                io.initCause(e);\n            } catch (Throwable e1) {}\n            throw io;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 134,
    "toLine": 143
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 192,
    "toLine": 201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
    "fromLine": 171,
    "toLine": 180
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/Table.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 176,
        "clones": 2,
        "snippet": "while (nav.hasNext()) {\n            Object[] data = (Object[]) nav.getNext();\n            Object[] newData =\n                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);\n            insertData(session, store, newData);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2710,
    "toLine": 2715
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2662,
    "toLine": 2667
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 176,
        "clones": 2,
        "snippet": "while (nav.hasNext()) {\n            Object[] data = (Object[]) nav.getNext();\n            Object[] newData =\n                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);\n            insertData(session, store, newData);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2710,
    "toLine": 2715
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2662,
    "toLine": 2667
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 18,
        "mass": 291,
        "clones": 2,
        "snippet": "{\n        if (!database.isReferentialIntegrity()) {\n            return;\n        }\n        TriggerDef[] trigVec = triggerLists[trigVecIndex];\n        for (int i = 0, size = trigVec.length; i < size; i++) {\n            TriggerDef td         = trigVec[i];\n            boolean    sqlTrigger = td instanceof TriggerDefSQL;\n            if (td.hasOldTable()) {\n            }\n            td.pushPair(session, null, null);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2221,
    "toLine": 2238
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2199,
    "toLine": 2216
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 18,
        "mass": 291,
        "clones": 2,
        "snippet": "{\n        if (!database.isReferentialIntegrity()) {\n            return;\n        }\n        TriggerDef[] trigVec = triggerLists[trigVecIndex];\n        for (int i = 0, size = trigVec.length; i < size; i++) {\n            TriggerDef td         = trigVec[i];\n            boolean    sqlTrigger = td instanceof TriggerDefSQL;\n            if (td.hasOldTable()) {\n            }\n            td.pushPair(session, null, null);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2221,
    "toLine": 2238
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2199,
    "toLine": 2216
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 117,
        "clones": 2,
        "snippet": "if (id == null) {\n                id = (Number) identitySequence.getValueObject();\n                data[identityColumn] = id;\n            } else {\n                identitySequence.userUpdate(id.longValue());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2840,
    "toLine": 2844
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2798,
    "toLine": 2802
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 117,
        "clones": 2,
        "snippet": "if (id == null) {\n                id = (Number) identitySequence.getValueObject();\n                data[identityColumn] = id;\n            } else {\n                identitySequence.userUpdate(id.longValue());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2840,
    "toLine": 2844
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Table.java",
    "fromLine": 2798,
    "toLine": 2802
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/BlobDataID.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 21,
        "mass": 171,
        "clones": 2,
        "snippet": "{\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBytes(SessionInterface session, long pos, BlobData b,\n                         long offset, long length) {\n        if (length > Integer.MAX_VALUE) {\n            throw new IndexOutOfBoundsException();\n        }\n        byte[] bytes = b.getBytes(session, offset, (int) length);\n        setBytes(session, pos, bytes, 0, bytes.length);\n    }\n    public void setBinaryStream(SessionInterface session, long pos,\n                                InputStream in) {\n    }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobDataID.java",
    "fromLine": 223,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BinaryData.java",
    "fromLine": 195,
    "toLine": 215
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 20,
        "mass": 158,
        "clones": 2,
        "snippet": "Result resultIn = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getOffset();\n    }\n    public long nonZeroLength(SessionInterface session) {\n        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);\n        Result    resultIn  = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getBlockLength();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobDataID.java",
    "fromLine": 176,
    "toLine": 195
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobDataID.java",
    "fromLine": 211,
    "toLine": 230
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 8,
        "volume": 30,
        "mass": 424,
        "clones": 2,
        "snippet": "checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2213,
    "toLine": 2242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2124,
    "toLine": 2153
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 30,
        "mass": 424,
        "clones": 2,
        "snippet": "checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2213,
    "toLine": 2242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2124,
    "toLine": 2153
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 30,
        "mass": 424,
        "clones": 2,
        "snippet": "checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2213,
    "toLine": 2242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2124,
    "toLine": 2153
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 30,
        "mass": 424,
        "clones": 2,
        "snippet": "checkClosed();\n        if (savepoint == null) {\n            throw JDBCUtil.nullArgument();\n        }\n        if (!(savepoint instanceof JDBCSavepoint)) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        sp = (JDBCSavepoint) savepoint;\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (this != sp.connection) {\n            String msg = Error.getMessage(ErrorCode.X_3B001);\n            throw JDBCUtil.invalidArgument(msg);\n        }\n        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {\n            sp.name       = null;\n            sp.connection = null;\n            throw JDBCUtil.sqlException(ErrorCode.X_3B001);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2213,
    "toLine": 2242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
    "fromLine": 2124,
    "toLine": 2153
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 48,
        "mass": 657,
        "clones": 2,
        "snippet": "super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n\t\tregisterColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n\t\tregisterColumnType( Types.BIT, \"bit\" );\n        registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n\t\tregisterColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n\t\tregisterColumnType( Types.DOUBLE, \"double\" );\n\t\tregisterColumnType( Types.FLOAT, \"float\" );\n\t\tregisterColumnType( Types.INTEGER, \"integer\" );\n\t\tregisterColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n\t\tregisterColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n\t\tregisterColumnType( Types.SMALLINT, \"smallint\" );\n\t\tregisterColumnType( Types.TINYINT, \"tinyint\" );\n\t\tregisterColumnType( Types.TIME, \"time\" );\n\t\tregisterColumnType( Types.TIMESTAMP, \"timestamp\" );\n\t\tregisterColumnType( Types.VARCHAR, \"varchar($l)\" );\n\t\tregisterColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.BLOB, \"longvarbinary\" );\n\t\tregisterColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 48,
        "mass": 657,
        "clones": 2,
        "snippet": "super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n\t\tregisterColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n\t\tregisterColumnType( Types.BIT, \"bit\" );\n        registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n\t\tregisterColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n\t\tregisterColumnType( Types.DOUBLE, \"double\" );\n\t\tregisterColumnType( Types.FLOAT, \"float\" );\n\t\tregisterColumnType( Types.INTEGER, \"integer\" );\n\t\tregisterColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n\t\tregisterColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n\t\tregisterColumnType( Types.SMALLINT, \"smallint\" );\n\t\tregisterColumnType( Types.TINYINT, \"tinyint\" );\n\t\tregisterColumnType( Types.TIME, \"time\" );\n\t\tregisterColumnType( Types.TIMESTAMP, \"timestamp\" );\n\t\tregisterColumnType( Types.VARCHAR, \"varchar($l)\" );\n\t\tregisterColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.BLOB, \"longvarbinary\" );\n\t\tregisterColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,]
}
,
{
    "metadata": {
        "cc": 43,
        "volume": 173,
        "mass": 1593,
        "clones": 2,
        "snippet": "getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 191,
    "toLine": 363
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 211,
    "toLine": 383
}
,]
}
,
{
    "metadata": {
        "cc": 43,
        "volume": 173,
        "mass": 1593,
        "clones": 2,
        "snippet": "getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 191,
    "toLine": 363
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 211,
    "toLine": 383
}
,]
}
,
{
    "metadata": {
        "cc": 43,
        "volume": 173,
        "mass": 1593,
        "clones": 2,
        "snippet": "getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 191,
    "toLine": 363
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 211,
    "toLine": 383
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/ArraySort.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 7,
        "mass": 151,
        "clones": 2,
        "snippet": "if (compare < 0) {\n                high = mid;\n            } else if (compare > 0) {\n                low = mid + 1;\n            } else {\n                high  = mid;\n                found = mid;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java",
    "fromLine": 516,
    "toLine": 522
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArraySort.java",
    "fromLine": 67,
    "toLine": 73
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 18,
        "mass": 132,
        "clones": 3,
        "snippet": "{\n        if (precision == 0) {\n            return getNameString();\n        }\n        StringBuffer sb = new StringBuffer(16);\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n        return sb.toString();\n    }\n    public boolean isBitType() {\n        return true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BitType.java",
    "fromLine": 93,
    "toLine": 110
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 165,
    "toLine": 182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BinaryType.java",
    "fromLine": 118,
    "toLine": 135
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 5,
        "mass": 216,
        "clones": 2,
        "snippet": "if (slen > precision) {\n                    if (getRightTrimSise((String) a, ' ') <= precision) {\n                        return ((String) a).substring(0, (int) precision);\n                    } else {\n                        throw Error.error(ErrorCode.X_22001);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 439,
    "toLine": 443
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 418,
    "toLine": 422
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 5,
        "mass": 216,
        "clones": 2,
        "snippet": "if (slen > precision) {\n                    if (getRightTrimSise((String) a, ' ') <= precision) {\n                        return ((String) a).substring(0, (int) precision);\n                    } else {\n                        throw Error.error(ErrorCode.X_22001);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 439,
    "toLine": 443
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 418,
    "toLine": 422
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 84,
        "clones": 2,
        "snippet": "{\n            ClobData clob = session.createClob(((String) a).length());\n            clob.setString(session, 0, (String) a);\n            return clob;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobType.java",
    "fromLine": 159,
    "toLine": 164
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 502,
    "toLine": 508
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 108,
        "clones": 2,
        "snippet": "for (int i = 0; i < pgTypes.length; i++) {\n                        pgTypes[i] = PgType.getPgType(colTypes[i],\n                                                      md.isTableColumn(i));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 1135,
    "toLine": 1137
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 767,
    "toLine": 769
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 108,
        "clones": 2,
        "snippet": "for (int i = 0; i < pgTypes.length; i++) {\n                        pgTypes[i] = PgType.getPgType(colTypes[i],\n                                                      md.isTableColumn(i));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 1135,
    "toLine": 1137
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 767,
    "toLine": 769
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 23,
        "mass": 532,
        "clones": 2,
        "snippet": "{\n                            if (rowData[i] == null) {\n                                server.printWithThread(\"R\" + rowNum + \"C\"\n                                    + (i+1) + \" => [null]\");\n                                outPacket.writeInt(-1);\n                            } else {\n                                dataString =\n                                    pgTypes[i].valueString(rowData[i]);\n                                outPacket.writeSized(dataString);\n                                if (server.isTrace()) {\n                                    server.printWithThread(\n                                        \"R\" + rowNum + \"C\" + (i + 1) + \" => (\"\n                                        + rowData[i].getClass().getName()\n                                        + \") [\" + dataString + ']');\n                                }\n                            }\n                        }\n                        outPacket.xmit('D', dataOutput);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 1360,
    "toLine": 1382
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 844,
    "toLine": 867
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 23,
        "mass": 532,
        "clones": 2,
        "snippet": "{\n                            if (rowData[i] == null) {\n                                server.printWithThread(\"R\" + rowNum + \"C\"\n                                    + (i+1) + \" => [null]\");\n                                outPacket.writeInt(-1);\n                            } else {\n                                dataString =\n                                    pgTypes[i].valueString(rowData[i]);\n                                outPacket.writeSized(dataString);\n                                if (server.isTrace()) {\n                                    server.printWithThread(\n                                        \"R\" + rowNum + \"C\" + (i + 1) + \" => (\"\n                                        + rowData[i].getClass().getName()\n                                        + \") [\" + dataString + ']');\n                                }\n                            }\n                        }\n                        outPacket.xmit('D', dataOutput);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 1360,
    "toLine": 1382
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConnection.java",
    "fromLine": 844,
    "toLine": 867
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 19
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 8,
        "mass": 173,
        "clones": 2,
        "snippet": "if (readIfThis(Tokens.NO)) {\n            readThis(Tokens.PAD);\n            padSpace = Boolean.FALSE;\n        } else if (readIfThis(Tokens.PAD)) {\n            readThis(Tokens.SPACE);\n            padSpace = Boolean.TRUE;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1886,
    "toLine": 1893
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1023,
    "toLine": 1030
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 15,
        "mass": 191,
        "clones": 2,
        "snippet": "if (grant) {\n            readThis(Tokens.TO);\n        } else {\n            readThis(Tokens.FROM);\n        }\n        while (true) {\n            checkIsSimpleName();\n            granteeList.add(token.tokenString);\n            read();\n            if (token.tokenType == Tokens.COMMA) {\n                read();\n            } else {\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4915,
    "toLine": 4929
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4814,
    "toLine": 4828
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 15,
        "mass": 191,
        "clones": 2,
        "snippet": "if (grant) {\n            readThis(Tokens.TO);\n        } else {\n            readThis(Tokens.FROM);\n        }\n        while (true) {\n            checkIsSimpleName();\n            granteeList.add(token.tokenString);\n            read();\n            if (token.tokenType == Tokens.COMMA) {\n                read();\n            } else {\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4915,
    "toLine": 4929
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4814,
    "toLine": 4828
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 10,
        "mass": 96,
        "clones": 2,
        "snippet": "{\n                            read();\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n                            break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2503,
    "toLine": 2512
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2482,
    "toLine": 2491
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 10,
        "mass": 96,
        "clones": 2,
        "snippet": "{\n                            read();\n                            isIdentity   = true;\n                            isPKIdentity = true;\n                            typeObject   = Type.SQL_BIGINT;\n                            sequence = new NumberSequence(null, 1, 1,\n                                                          typeObject);\n                            break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2503,
    "toLine": 2512
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2482,
    "toLine": 2491
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 16,
        "mass": 340,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.GRANTED) {\n            read();\n            readThis(Tokens.BY);\n            if (token.tokenType == Tokens.CURRENT_USER) {\n                read();\n            } else {\n                readThis(Tokens.CURRENT_ROLE);\n                if (session.getRole() == null) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                grantor = session.getRole();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4944,
    "toLine": 4959
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4841,
    "toLine": 4857
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 16,
        "mass": 340,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.GRANTED) {\n            read();\n            readThis(Tokens.BY);\n            if (token.tokenType == Tokens.CURRENT_USER) {\n                read();\n            } else {\n                readThis(Tokens.CURRENT_ROLE);\n                if (session.getRole() == null) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                grantor = session.getRole();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4944,
    "toLine": 4959
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4841,
    "toLine": 4857
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 14,
        "mass": 228,
        "clones": 2,
        "snippet": "boolean ifNot = false;\n        if (token.tokenType == Tokens.IF) {\n            int position = getPosition();\n            read();\n            if (token.tokenType == Tokens.NOT) {\n                read();\n                readThis(Tokens.EXISTS);\n                ifNot = true;\n            } else {\n                rewind(position);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1704,
    "toLine": 1717
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 914,
    "toLine": 927
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 14,
        "mass": 228,
        "clones": 2,
        "snippet": "boolean ifNot = false;\n        if (token.tokenType == Tokens.IF) {\n            int position = getPosition();\n            read();\n            if (token.tokenType == Tokens.NOT) {\n                read();\n                readThis(Tokens.EXISTS);\n                ifNot = true;\n            } else {\n                rewind(position);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1704,
    "toLine": 1717
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 914,
    "toLine": 927
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 15,
        "mass": 334,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n            read();\n            readThis(Tokens.COMMIT);\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n            read();\n            readThis(Tokens.ROWS);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1225,
    "toLine": 1239
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1059,
    "toLine": 1073
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 15,
        "mass": 334,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.ON) {\n            if (!table.isTemp()) {\n                throw unexpectedToken();\n            }\n            read();\n            readThis(Tokens.COMMIT);\n            if (token.tokenType == Tokens.DELETE) {}\n            else if (token.tokenType == Tokens.PRESERVE) {\n                table.persistenceScope = TableBase.SCOPE_SESSION;\n            }\n            read();\n            readThis(Tokens.ROWS);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1225,
    "toLine": 1239
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1059,
    "toLine": 1073
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 113,
        "clones": 3,
        "snippet": "if (token.tokenType == Tokens.BY) {\n                        read();\n                        readThis(Tokens.DEFAULT);\n                    } else {\n                        readThis(Tokens.ALWAYS);\n                        generatedAlways = true;\n                    }\n                    readThis(Tokens.AS);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2570,
    "toLine": 2579
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4131,
    "toLine": 4140
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2676,
    "toLine": 2685
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 113,
        "clones": 3,
        "snippet": "if (token.tokenType == Tokens.BY) {\n                        read();\n                        readThis(Tokens.DEFAULT);\n                    } else {\n                        readThis(Tokens.ALWAYS);\n                        generatedAlways = true;\n                    }\n                    readThis(Tokens.AS);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2570,
    "toLine": 2579
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4131,
    "toLine": 4140
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2676,
    "toLine": 2685
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 113,
        "clones": 3,
        "snippet": "if (token.tokenType == Tokens.BY) {\n                        read();\n                        readThis(Tokens.DEFAULT);\n                    } else {\n                        readThis(Tokens.ALWAYS);\n                        generatedAlways = true;\n                    }\n                    readThis(Tokens.AS);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2570,
    "toLine": 2579
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4131,
    "toLine": 4140
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2676,
    "toLine": 2685
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 6,
        "mass": 100,
        "clones": 3,
        "snippet": "if (token.tokenType == Tokens.RESTRICT) {\n                            read();\n                        } else if (token.tokenType == Tokens.CASCADE) {\n                            read();\n                            cascade = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 759,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 832,
    "toLine": 837
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 797,
    "toLine": 802
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 6,
        "mass": 100,
        "clones": 3,
        "snippet": "if (token.tokenType == Tokens.RESTRICT) {\n                            read();\n                        } else if (token.tokenType == Tokens.CASCADE) {\n                            read();\n                            cascade = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 759,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 832,
    "toLine": 837
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 797,
    "toLine": 802
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 6,
        "mass": 100,
        "clones": 3,
        "snippet": "if (token.tokenType == Tokens.RESTRICT) {\n                            read();\n                        } else if (token.tokenType == Tokens.CASCADE) {\n                            read();\n                            cascade = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 759,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 832,
    "toLine": 837
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 797,
    "toLine": 802
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 8,
        "mass": 189,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.MAXVALUE) {\n                                sequence.setDefaultMaxValue();\n                            } else if (token.tokenType == Tokens.MINVALUE) {\n                                sequence.setDefaultMinValue();\n                            } else if (token.tokenType == Tokens.CYCLE) {\n                                sequence.setCycle(false);\n                            } else {\n                                throw unexpectedToken();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4205,
    "toLine": 4212
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2825,
    "toLine": 2832
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 8,
        "mass": 189,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.MAXVALUE) {\n                                sequence.setDefaultMaxValue();\n                            } else if (token.tokenType == Tokens.MINVALUE) {\n                                sequence.setDefaultMinValue();\n                            } else if (token.tokenType == Tokens.CYCLE) {\n                                sequence.setCycle(false);\n                            } else {\n                                throw unexpectedToken();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 4205,
    "toLine": 4212
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 2825,
    "toLine": 2832
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/ClobDataID.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 20,
        "mass": 158,
        "clones": 2,
        "snippet": "Result resultIn = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getOffset();\n    }\n    public long nonZeroLength(SessionInterface session) {\n        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);\n        Result    resultIn  = session.execute(resultOut);\n        if (resultIn.isError()) {\n            throw resultIn.getException();\n        }\n        return ((ResultLob) resultIn).getBlockLength();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BlobDataID.java",
    "fromLine": 176,
    "toLine": 195
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobDataID.java",
    "fromLine": 211,
    "toLine": 230
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 8,
        "volume": 15,
        "mass": 487,
        "clones": 2,
        "snippet": "{\n        try {\n            FileAccess   fa  = isDump ? FileUtil.getFileUtil()\n                                      : database.logger.getFileAccess();\n            OutputStream fos = fa.openOutputStreamElement(outFile);\n            outDescriptor = fa.getFileSync(fos);\n            fileStreamOut = fos;\n            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);\n        } catch (IOException e) {\n            throw Error.error(e, ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_Message_Pair, new Object[] {\n                e.toString(), outFile\n            });\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
    "fromLine": 102,
    "toLine": 116
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java",
    "fromLine": 269,
    "toLine": 283
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 17,
        "volume": 17,
        "mass": 158,
        "clones": 2,
        "snippet": "switch (targetType.typeCode) {\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 1989,
    "toLine": 2005
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 983,
    "toLine": 999
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 15,
        "mass": 139,
        "clones": 2,
        "snippet": "{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            if (cal != null) {\n                millis = HsqlDateTime.convertMillisToCalendar(calendar,\n                        millis);\n            }\n        }\n        Timestamp ts = new Timestamp(millis);\n        ts.setNanos(t.getNanos());\n        return ts;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 4928,
    "toLine": 4942
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 1408,
    "toLine": 1422
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 100,
        "clones": 2,
        "snippet": "{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);\n            millis = HsqlDateTime.getNormalisedTime(millis);\n        }\n        return new Time(millis);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 4821,
    "toLine": 4829
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 1348,
    "toLine": 1356
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 7,
        "mass": 117,
        "clones": 2,
        "snippet": "if (o instanceof Clob) {\n                return (Clob) o;\n            } else if (o instanceof String) {\n                return new JDBCClob((String) o);\n            }\n            throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 7645,
    "toLine": 7651
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 4494,
    "toLine": 4500
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 7,
        "mass": 117,
        "clones": 2,
        "snippet": "if (o instanceof Clob) {\n                return (Clob) o;\n            } else if (o instanceof String) {\n                return new JDBCClob((String) o);\n            }\n            throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 7645,
    "toLine": 7651
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 4494,
    "toLine": 4500
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 13,
        "mass": 242,
        "clones": 2,
        "snippet": "if (o == null) {\n            return null;\n        }\n        if (o instanceof ClobDataID) {\n            return ((ClobDataID) o).getCharacterStream(session);\n        } else if (o instanceof Clob) {\n            return ((Clob) o).getCharacterStream();\n        } else if (o instanceof String) {\n            return new StringReader((String) o);\n        }\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 1924,
    "toLine": 1936
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 4266,
    "toLine": 4278
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 69,
        "clones": 2,
        "snippet": "integerValue = new Integer(1000);\n            arrayValue   = new Double[] {\n                new Double(1), new Double(Double.NaN),\n                new Double(Double.NEGATIVE_INFINITY),\n                new Double(Double.POSITIVE_INFINITY)\n            };\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 305,
    "toLine": 310
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 128,
    "toLine": 133
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 69,
        "clones": 2,
        "snippet": "integerValue = new Integer(1000);\n            arrayValue   = new Double[] {\n                new Double(1), new Double(Double.NaN),\n                new Double(Double.NEGATIVE_INFINITY),\n                new Double(Double.POSITIVE_INFINITY)\n            };\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 305,
    "toLine": 310
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 128,
    "toLine": 133
}
,]
}
,
{
    "metadata": {
        "cc": 13,
        "volume": 95,
        "mass": 1121,
        "clones": 2,
        "snippet": "stmnt.execute(ddl1);\n            PreparedStatement ps = connection.prepareStatement(\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\n            ps.setString(1, \"0.2\");\n            ps.setDouble(2, 0.2);\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\n            ps.setInt(4, Integer.MAX_VALUE);\n            ps.setInt(5, Short.MAX_VALUE);\n            ps.setInt(6, 0);\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\n            ps.setTimestamp(\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.NaN);\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setInt(5, Short.MIN_VALUE);\n            ps.setInt(6, 0);\n            ps.setTimestamp(\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\n            ps.execute();\n            ps.setInt(1, 0);\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\n            ps.setInt(4, Integer.MIN_VALUE);\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\n            ps.setObject(6, new Integer(2), Types.TINYINT);\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\n                                                   + 2));\n            ps.execute();\n            ps.setObject(1, new Float(0), Types.INTEGER);\n            ps.setObject(4, new Float(1), Types.INTEGER);\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\n            ps.execute();\n            ResultSet rs =\n            boolean result = rs.next();\n            value = rs.getDouble(2);\n            int integerValue = rs.getInt(4);\n            if (rs.next()) {\n                value        = rs.getDouble(2);\n                wasEqual     = Double.isNaN(value);\n                integerValue = rs.getInt(4);\n                integerValue = rs.getInt(1);\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\n            }\n            if (rs.next()) {\n                value    = rs.getDouble(2);\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\n            }\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\n            if (rs.next()) {\n                int max = rs.getInt(1);\n                System.out.println(\"Max value for i: \" + max);\n            }\n            try {\n                ps.setString(5, \"three\");\n                fail(\"update did not fail\");\n            } catch (SQLException e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 370,
    "toLine": 464
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 445,
    "toLine": 539
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 19,
        "mass": 160,
        "clones": 2,
        "snippet": "stmnt.execute(\"drop table CDTYPE if exists\");\n                stmnt.execute(\n                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");\n                rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");\n                if (rs.next()) {\n                    int max = rs.getInt(1);\n                    System.out.println(\"Max value for ID: \" + max);\n                } else {\n                    System.out.println(\"Max value for ID not returned\");\n                }\n                stmnt.executeUpdate(\n                    \"INSERT INTO cdType VALUES (10,'Test String');\");\n                stmnt.execute(\"CALL IDENTITY();\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSql.java",
    "fromLine": 467,
    "toLine": 485
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
    "fromLine": 542,
    "toLine": 560
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/ScriptRunner.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 139,
        "clones": 2,
        "snippet": "{\n            String error = \"statement error processing log \" + databaseFile\n                           + \"line: \" + scr.getLineNumber();\n            database.logger.logSevereEvent(error, e);\n            if (fullReplay) {\n                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/ScriptRunner.java",
    "fromLine": 290,
    "toLine": 299
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/ScriptRunner.java",
    "fromLine": 271,
    "toLine": 280
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 139,
        "clones": 2,
        "snippet": "{\n            String error = \"statement error processing log \" + databaseFile\n                           + \"line: \" + scr.getLineNumber();\n            database.logger.logSevereEvent(error, e);\n            if (fullReplay) {\n                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/ScriptRunner.java",
    "fromLine": 290,
    "toLine": 299
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/ScriptRunner.java",
    "fromLine": 271,
    "toLine": 280
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 10
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 8,
        "volume": 15,
        "mass": 207,
        "clones": 2,
        "snippet": "while (true) {\n                Iterator it = unresolved.iterator();\n                if (!it.hasNext()) {\n                    break;\n                }\n                OrderedHashSet newResolved = new OrderedHashSet();\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n                if (newResolved.size() == 0) {\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 2514,
    "toLine": 2528
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 2480,
    "toLine": 2494
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 15,
        "mass": 207,
        "clones": 2,
        "snippet": "while (true) {\n                Iterator it = unresolved.iterator();\n                if (!it.hasNext()) {\n                    break;\n                }\n                OrderedHashSet newResolved = new OrderedHashSet();\n                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,\n                                          newResolved);\n                unresolved.removeAll(newResolved);\n                if (newResolved.size() == 0) {\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 2514,
    "toLine": 2528
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 2480,
    "toLine": 2494
}
,]
}
,
{
    "metadata": {
        "cc": 16,
        "volume": 32,
        "mass": 525,
        "clones": 2,
        "snippet": "if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n        }\n    }\n    public Type getDomainOrUDT(String name, String schemaName, boolean raise) {\n        readLock.lock();\n        try {\n            Schema schema = (Schema) schemaMap.get(schemaName);\n            if (schema != null) {\n                SchemaObject object = schema.typeLookup.getObject(name);\n                if (object != null) {\n                    return (Type) object;\n                }\n            }\n            if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1215,
    "toLine": 1246
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1189,
    "toLine": 1221
}
,]
}
,
{
    "metadata": {
        "cc": 16,
        "volume": 32,
        "mass": 525,
        "clones": 2,
        "snippet": "if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n        }\n    }\n    public Type getDomainOrUDT(String name, String schemaName, boolean raise) {\n        readLock.lock();\n        try {\n            Schema schema = (Schema) schemaMap.get(schemaName);\n            if (schema != null) {\n                SchemaObject object = schema.typeLookup.getObject(name);\n                if (object != null) {\n                    return (Type) object;\n                }\n            }\n            if (raise) {\n                throw Error.error(ErrorCode.X_42501, name);\n            }\n            return null;\n        } finally {\n            readLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1215,
    "toLine": 1246
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1189,
    "toLine": 1221
}
,]
}
,
{
    "metadata": {
        "cc": 34,
        "volume": 32,
        "mass": 629,
        "clones": 2,
        "snippet": "Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1116,
    "toLine": 1147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1068,
    "toLine": 1099
}
,]
}
,
{
    "metadata": {
        "cc": 34,
        "volume": 32,
        "mass": 629,
        "clones": 2,
        "snippet": "Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1116,
    "toLine": 1147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1068,
    "toLine": 1099
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 8,
        "mass": 175,
        "clones": 2,
        "snippet": "if (set.map.size() != 0) {\n                        values = new Object[set.map.size()];\n                        set.map.valuesToArray(values);\n                        objects =\n                            new WrapperIterator(objects,\n                                                new WrapperIterator(values));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1611,
    "toLine": 1618
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1599,
    "toLine": 1605
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 8,
        "mass": 175,
        "clones": 2,
        "snippet": "if (set.map.size() != 0) {\n                        values = new Object[set.map.size()];\n                        set.map.valuesToArray(values);\n                        objects =\n                            new WrapperIterator(objects,\n                                                new WrapperIterator(values));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1611,
    "toLine": 1618
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1599,
    "toLine": 1605
}
,]
}
,
{
    "metadata": {
        "cc": 34,
        "volume": 32,
        "mass": 629,
        "clones": 2,
        "snippet": "Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1116,
    "toLine": 1147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1068,
    "toLine": 1099
}
,]
}
,
{
    "metadata": {
        "cc": 34,
        "volume": 32,
        "mass": 629,
        "clones": 2,
        "snippet": "Session session = database.sessionManager.getSysSession();\n            for (int i = 0; i < set.size(); i++) {\n                HsqlName name = (HsqlName) set.get(i);\n                switch (name.type) {\n                    case SchemaObject.VIEW :\n                    case SchemaObject.CONSTRAINT :\n                    case SchemaObject.ASSERTION :\n                    case SchemaObject.ROUTINE :\n                    case SchemaObject.PROCEDURE :\n                    case SchemaObject.FUNCTION :\n                    case SchemaObject.SPECIFIC_ROUTINE :\n                        SchemaObject object = getSchemaObject(name);\n                        object.compile(session, null);\n                        break;\n                }\n            }\n            if (Error.TRACE) {\n                HsqlArrayList list = getAllTables(false);\n                for (int i = 0; i < list.size(); i++) {\n                    Table t = (Table) list.get(i);\n                    t.verifyConstraintsIntegrity();\n                }\n            }\n        } finally {\n            writeLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1116,
    "toLine": 1147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/SchemaManager.java",
    "fromLine": 1068,
    "toLine": 1099
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 10
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 8,
        "mass": 173,
        "clones": 2,
        "snippet": "if (readIfThis(Tokens.NO)) {\n            readThis(Tokens.PAD);\n            padSpace = Boolean.FALSE;\n        } else if (readIfThis(Tokens.PAD)) {\n            readThis(Tokens.SPACE);\n            padSpace = Boolean.TRUE;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDDL.java",
    "fromLine": 1886,
    "toLine": 1893
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1023,
    "toLine": 1030
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 10,
        "mass": 157,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.AND) {\n                read();\n                if (token.tokenType == Tokens.NO) {\n                    read();\n                } else {\n                    chain = true;\n                }\n                readThis(Tokens.CHAIN);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1800,
    "toLine": 1809
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1685,
    "toLine": 1694
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 10,
        "mass": 157,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.AND) {\n                read();\n                if (token.tokenType == Tokens.NO) {\n                    read();\n                } else {\n                    chain = true;\n                }\n                readThis(Tokens.CHAIN);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1800,
    "toLine": 1809
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1685,
    "toLine": 1694
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 124,
        "clones": 3,
        "snippet": "if (!e.getDataType().isCharacterType()) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                if (e.getType() != OpTypes.VALUE\n                        && (e.getType() != OpTypes.SQL_FUNCTION\n                            || !((FunctionSQL) e).isValueFunction())) {\n                    throw Error.error(ErrorCode.X_0P000);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 546,
    "toLine": 553
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1927,
    "toLine": 1934
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 573,
    "toLine": 580
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 124,
        "clones": 3,
        "snippet": "if (!e.getDataType().isCharacterType()) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                if (e.getType() != OpTypes.VALUE\n                        && (e.getType() != OpTypes.SQL_FUNCTION\n                            || !((FunctionSQL) e).isValueFunction())) {\n                    throw Error.error(ErrorCode.X_0P000);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 546,
    "toLine": 553
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1927,
    "toLine": 1934
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 573,
    "toLine": 580
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 8,
        "mass": 124,
        "clones": 3,
        "snippet": "if (!e.getDataType().isCharacterType()) {\n                    throw Error.error(ErrorCode.X_0P000);\n                }\n                if (e.getType() != OpTypes.VALUE\n                        && (e.getType() != OpTypes.SQL_FUNCTION\n                            || !((FunctionSQL) e).isValueFunction())) {\n                    throw Error.error(ErrorCode.X_0P000);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 546,
    "toLine": 553
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1927,
    "toLine": 1934
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 573,
    "toLine": 580
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 18,
        "mass": 288,
        "clones": 2,
        "snippet": "HsqlArrayList charsets = null;\n                if (readIfThis(Tokens.FOR)) {\n                    charsets = new HsqlArrayList();\n                    while (true) {\n                        SchemaObject charset =\n                            readSchemaObjectName(SchemaObject.CHARSET);\n                        charsets.add(charset);\n                        if (token.tokenType == Tokens.COMMA) {\n                            read();\n                            continue;\n                        }\n                        break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 628,
    "toLine": 645
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 591,
    "toLine": 608
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 18,
        "mass": 288,
        "clones": 2,
        "snippet": "HsqlArrayList charsets = null;\n                if (readIfThis(Tokens.FOR)) {\n                    charsets = new HsqlArrayList();\n                    while (true) {\n                        SchemaObject charset =\n                            readSchemaObjectName(SchemaObject.CHARSET);\n                        charsets.add(charset);\n                        if (token.tokenType == Tokens.COMMA) {\n                            read();\n                            continue;\n                        }\n                        break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 628,
    "toLine": 645
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 591,
    "toLine": 608
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 21,
        "mass": 384,
        "clones": 2,
        "snippet": "int delay = 0;\n                if (token.tokenType == Tokens.TRUE) {\n                    delay = database.getProperties().getDefaultWriteDelay();\n                    read();\n                } else if (token.tokenType == Tokens.FALSE) {\n                    delay = 0;\n                    read();\n                } else {\n                    delay = this.readInteger();\n                    if (delay < 0) {\n                        delay = 0;\n                    }\n                    if (token.tokenType == Tokens.MILLIS) {\n                        read();\n                    } else {\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1514,
    "toLine": 1534
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 756,
    "toLine": 776
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 21,
        "mass": 384,
        "clones": 2,
        "snippet": "int delay = 0;\n                if (token.tokenType == Tokens.TRUE) {\n                    delay = database.getProperties().getDefaultWriteDelay();\n                    read();\n                } else if (token.tokenType == Tokens.FALSE) {\n                    delay = 0;\n                    read();\n                } else {\n                    delay = this.readInteger();\n                    if (delay < 0) {\n                        delay = 0;\n                    }\n                    if (token.tokenType == Tokens.MILLIS) {\n                        read();\n                    } else {\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 1514,
    "toLine": 1534
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserCommand.java",
    "fromLine": 756,
    "toLine": 776
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/Tree.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 30,
        "mass": 205,
        "clones": 2,
        "snippet": "{\n        dMinimum = d;\n    }\n    public void setBounds(int x, int y, int w, int h) {\n        super.setBounds(x, y, w, h);\n        iSbHeight = sbHoriz.getPreferredSize().height;\n        iSbWidth  = sbVert.getPreferredSize().width;\n        iHeight   = h - iSbHeight;\n        iWidth    = w - iSbWidth;\n        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);\n        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);\n        adjustScroll();\n        iImage = null;\n        repaint();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/Grid.java",
    "fromLine": 174,
    "toLine": 203
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/Tree.java",
    "fromLine": 155,
    "toLine": 186
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 7
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 14,
        "mass": 231,
        "clones": 3,
        "snippet": "String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n            connection.setAutoCommit(false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 71,
    "toLine": 84
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 223,
    "toLine": 236
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 128,
    "toLine": 141
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 14,
        "mass": 231,
        "clones": 3,
        "snippet": "String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n            connection.setAutoCommit(false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 71,
    "toLine": 84
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 223,
    "toLine": 236
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 128,
    "toLine": 141
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 14,
        "mass": 231,
        "clones": 3,
        "snippet": "String            insert = \"insert into t1 values(?,?,?)\";\n            String            select = \"select i, c, t from t1\";\n            PreparedStatement ps     = connection.prepareStatement(insert);\n            for (int i = 0; i < 10; i++) {\n                ps.setInt(1, i);\n                ps.setString(2, String.valueOf(i) + \" s\");\n                ps.setBytes(3, new byte[] {\n                    (byte) i, ' ', (byte) i\n                });\n                ps.execute();\n            }\n            connection.setAutoCommit(false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 71,
    "toLine": 84
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 223,
    "toLine": 236
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 128,
    "toLine": 141
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 134,
        "clones": 4,
        "snippet": "while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 246,
    "toLine": 250
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 259,
    "toLine": 263
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 277,
    "toLine": 281
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 268,
    "toLine": 272
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 134,
        "clones": 4,
        "snippet": "while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 246,
    "toLine": 250
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 259,
    "toLine": 263
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 277,
    "toLine": 281
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 268,
    "toLine": 272
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 134,
        "clones": 4,
        "snippet": "while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 246,
    "toLine": 250
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 259,
    "toLine": 263
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 277,
    "toLine": 281
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 268,
    "toLine": 272
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 134,
        "clones": 4,
        "snippet": "while (srs.previous()) {\n                String name = srs.getString(2);\n                float  id   = srs.getFloat(1);\n                System.out.println(name + \"   \" + id);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 246,
    "toLine": 250
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 259,
    "toLine": 263
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 277,
    "toLine": 281
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
    "fromLine": 268,
    "toLine": 272
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/OrderedLongHashSet.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 17,
        "volume": 28,
        "mass": 282,
        "clones": 2,
        "snippet": "{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedIntHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedLongHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,]
}
,
{
    "metadata": {
        "cc": 17,
        "volume": 28,
        "mass": 282,
        "clones": 2,
        "snippet": "{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedIntHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedLongHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 8
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 22,
        "volume": 32,
        "mass": 653,
        "clones": 2,
        "snippet": "{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 613,
    "toLine": 644
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 418,
    "toLine": 449
}
,]
}
,
{
    "metadata": {
        "cc": 22,
        "volume": 32,
        "mass": 653,
        "clones": 2,
        "snippet": "{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 613,
    "toLine": 644
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 418,
    "toLine": 449
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 18,
        "mass": 231,
        "clones": 2,
        "snippet": "int hash = (int) longKey;\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n        int     index       = hashIndex.getHashIndex(hash);\n        int     lookup      = hashIndex.hashTable[index];\n        int     lastLookup  = -1;\n        Object  returnValue = null;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 469,
    "toLine": 486
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 310,
    "toLine": 327
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 18,
        "mass": 231,
        "clones": 2,
        "snippet": "int hash = (int) longKey;\n        if (isObjectKey) {\n            if (objectKey == null) {\n                return null;\n            }\n            if (comparator == null) {\n                hash = objectKey.hashCode();\n            } else {\n                hash = comparator.hashCode(objectKey);\n            }\n        }\n        int     index       = hashIndex.getHashIndex(hash);\n        int     lookup      = hashIndex.hashTable[index];\n        int     lastLookup  = -1;\n        Object  returnValue = null;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 469,
    "toLine": 486
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 310,
    "toLine": 327
}
,]
}
,
{
    "metadata": {
        "cc": 22,
        "volume": 32,
        "mass": 653,
        "clones": 2,
        "snippet": "{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 613,
    "toLine": 644
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 418,
    "toLine": 449
}
,]
}
,
{
    "metadata": {
        "cc": 22,
        "volume": 32,
        "mass": 653,
        "clones": 2,
        "snippet": "{\n                throw new NoSuchElementException(\"BaseHashMap\");\n            }\n        }\n        lookup = hashIndex.linkNode(index, lastLookup);\n        if (isObjectKey) {\n            objectKeyTable[lookup] = objectKey;\n        } else if (isIntKey) {\n            intKeyTable[lookup] = (int) longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        } else if (isLongKey) {\n            longKeyTable[lookup] = longKey;\n            if (longKey == 0) {\n                hasZeroKey   = true;\n                zeroKeyIndex = lookup;\n            }\n        }\n        if (isObjectValue) {\n            objectValueTable[lookup] = objectValue;\n        } else if (isIntValue) {\n            intValueTable[lookup] = (int) longValue;\n        } else if (isLongValue) {\n            longValueTable[lookup] = longValue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 613,
    "toLine": 644
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 418,
    "toLine": 449
}
,]
}
,
{
    "metadata": {
        "cc": 44,
        "volume": 16,
        "mass": 467,
        "clones": 2,
        "snippet": "{\n            if (isObjectKey) {\n                if (objectKeyTable[lookup] != null) {\n                    return lookup;\n                }\n            } else if (isIntKey) {\n                if (intKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n                }\n            } else {\n                if (longKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 1207,
    "toLine": 1222
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 1178,
    "toLine": 1193
}
,]
}
,
{
    "metadata": {
        "cc": 44,
        "volume": 16,
        "mass": 467,
        "clones": 2,
        "snippet": "{\n            if (isObjectKey) {\n                if (objectKeyTable[lookup] != null) {\n                    return lookup;\n                }\n            } else if (isIntKey) {\n                if (intKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n                }\n            } else {\n                if (longKeyTable[lookup] != 0) {\n                    return lookup;\n                } else if (hasZeroKey && lookup == zeroKeyIndex) {\n                    return lookup;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 1207,
    "toLine": 1222
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/BaseHashMap.java",
    "fromLine": 1178,
    "toLine": 1193
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 42
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 15,
        "volume": 24,
        "mass": 535,
        "clones": 2,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1613
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1561
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 24,
        "mass": 535,
        "clones": 2,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1613
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1561
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 24,
        "mass": 535,
        "clones": 2,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1613
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1561
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 24,
        "mass": 535,
        "clones": 2,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                } } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong (1)\",\n            expectedBytes.length, ba1.length);\n        for (int i = 0; i < ba1.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);\n        }\n        assertEquals(\"Retrieved bye array length wrong (2)\",\n            expectedBytes.length, ba2.length);\n        for (int i = 0; i < ba2.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1613
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1561
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 14,
        "volume": 21,
        "mass": 421,
        "clones": 2,
        "snippet": "assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong\",\n            expectedBytes.length, ba.length);\n        for (int i = 0; i < ba.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong\", expectedBytes[i], ba[i]);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 759,
    "toLine": 779
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 724,
    "toLine": 743
}
,]
}
,
{
    "metadata": {
        "cc": 14,
        "volume": 21,
        "mass": 421,
        "clones": 2,
        "snippet": "assertFalse(\"Got too many rows with id in (1, 2)\", rs.next());\n        } catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (st != null) {\n                    st.close();\n                }\n            } catch(Exception e) {\n            }\n        }\n        assertEquals(\"Retrieved bye array length wrong\",\n            expectedBytes.length, ba.length);\n        for (int i = 0; i < ba.length; i++) {\n            assertEquals(\"Byte \" + i + \" wrong\", expectedBytes[i], ba[i]);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 759,
    "toLine": 779
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 724,
    "toLine": 743
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/TimestampData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 9,
        "volume": 14,
        "mass": 190,
        "clones": 2,
        "snippet": "{\n        long diff = seconds - b.seconds;\n        if (diff == 0) {\n            diff = nanos - b.nanos;\n            if (diff == 0) {\n                return 0;\n            }\n        }\n        return diff > 0 ? 1\n                        : -1;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/TimeData.java",
    "fromLine": 93,
    "toLine": 106
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/TimestampData.java",
    "fromLine": 99,
    "toLine": 112
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 8,
        "mass": 214,
        "clones": 5,
        "snippet": "for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 344,
    "toLine": 351
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 185,
    "toLine": 192
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementQuery.java",
    "fromLine": 94,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 294,
    "toLine": 301
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementProcedure.java",
    "fromLine": 378,
    "toLine": 385
}
,]
}
,
{
    "metadata": {
        "cc": 16,
        "volume": 23,
        "mass": 438,
        "clones": 2,
        "snippet": "for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n            set.add(name);\n        }\n        for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 279,
    "toLine": 301
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 329,
    "toLine": 351
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 132,
        "clones": 2,
        "snippet": "catch (HsqlException e) {\n                    String[] info = getConstraintInfo(c);\n                    refiterator.release();\n                    throw Error.error(null, ErrorCode.X_27000,\n                                      ErrorCode.CONSTRAINT, info);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1585,
    "toLine": 1591
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1499,
    "toLine": 1505
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 132,
        "clones": 2,
        "snippet": "catch (HsqlException e) {\n                    String[] info = getConstraintInfo(c);\n                    refiterator.release();\n                    throw Error.error(null, ErrorCode.X_27000,\n                                      ErrorCode.CONSTRAINT, info);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1585,
    "toLine": 1591
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1499,
    "toLine": 1505
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 242,
        "clones": 2,
        "snippet": "if (extraUpdateTables != null) {\n            for (int i = 0; i < extraUpdateTables.size(); i++) {\n                Table currentTable = (Table) extraUpdateTables.get(i);\n                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,\n                                          navigator);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1387,
    "toLine": 1392
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1129,
    "toLine": 1134
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 242,
        "clones": 2,
        "snippet": "if (extraUpdateTables != null) {\n            for (int i = 0; i < extraUpdateTables.size(); i++) {\n                Table currentTable = (Table) extraUpdateTables.get(i);\n                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,\n                                          navigator);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1387,
    "toLine": 1392
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 1129,
    "toLine": 1134
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 11,
        "mass": 162,
        "clones": 2,
        "snippet": "catch (Exception e) {\n            Object[] messages = new Object[] {\n                new Integer(field), e.toString()\n            };\n            throw new IOException(\n                Error.getMessage(\n                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));\n        }\n        return s;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java",
    "fromLine": 140,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputText.java",
    "fromLine": 181,
    "toLine": 191
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 5,
        "mass": 121,
        "clones": 4,
        "snippet": "if (indexList.length == 0 || accessorList[0] == null) {\n            indexList    = keys;\n            accessorList = new CachedObject[indexList.length];\n            return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
    "fromLine": 312,
    "toLine": 316
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDisk.java",
    "fromLine": 354,
    "toLine": 358
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 221,
    "toLine": 225
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 356,
    "toLine": 360
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 5,
        "mass": 148,
        "clones": 2,
        "snippet": "Object[] data = ((Row) object).getData();\n        for (int i = 0; i < nullsList.length; i++) {\n            if (data[i] == null) {\n                nullsList[i] = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 104,
    "toLine": 108
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 172,
    "toLine": 176
}
,]
}
,
{
    "metadata": {
        "cc": 22,
        "volume": 47,
        "mass": 432,
        "clones": 2,
        "snippet": "{\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT :\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n            case RowAction.ACTION_DELETE_FINAL :\n                delete(session, row);\n                remove(row);\n                break;\n        }\n    }\n    public void rollbackRow(Session session, Row row, int changeAction,\n                            int txModel) {\n        switch (changeAction) {\n            case RowAction.ACTION_DELETE :\n                row = (Row) get(row, true);\n                ((RowAVL) row).setNewNodes(this);\n                row.keepInMemory(false);\n                indexRow(session, row);\n                break;\n            case RowAction.ACTION_INSERT :\n                delete(session, row);\n                remove(row);\n                break;\n            case RowAction.ACTION_INSERT_DELETE :\n                remove(row);\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
    "fromLine": 133,
    "toLine": 179
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
    "fromLine": 256,
    "toLine": 302
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 9
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 3,
        "mass": 111,
        "clones": 2,
        "snippet": "if (reportProgress && (i + 1) % 10000 == 0) {\n                System.out.println(\"insert \" + (i + 1) + \" : \"\n                                   + sw.elapsedTime());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 463,
    "toLine": 465
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 383,
    "toLine": 385
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 3,
        "mass": 111,
        "clones": 2,
        "snippet": "if (reportProgress && (i + 1) % 10000 == 0) {\n                System.out.println(\"insert \" + (i + 1) + \" : \"\n                                   + sw.elapsedTime());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 463,
    "toLine": 465
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 383,
    "toLine": 385
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 16,
        "mass": 221,
        "clones": 2,
        "snippet": "ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Select \" + (i + 1) + \" : \"\n                                       + (sw.elapsedTime() + 1));\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 608,
    "toLine": 623
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 573,
    "toLine": 588
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 16,
        "mass": 221,
        "clones": 2,
        "snippet": "ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Select \" + (i + 1) + \" : \"\n                                       + (sw.elapsedTime() + 1));\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 608,
    "toLine": 623
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 573,
    "toLine": 588
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 18,
        "mass": 317,
        "clones": 3,
        "snippet": "ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Update \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 764,
    "toLine": 781
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 852,
    "toLine": 869
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 810,
    "toLine": 827
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 18,
        "mass": 317,
        "clones": 3,
        "snippet": "ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Update \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 764,
    "toLine": 781
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 852,
    "toLine": 869
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 810,
    "toLine": 827
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 18,
        "mass": 317,
        "clones": 3,
        "snippet": "ps.execute();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"Update \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 764,
    "toLine": 781
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 852,
    "toLine": 869
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 810,
    "toLine": 827
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 19,
        "mass": 307,
        "clones": 2,
        "snippet": "ps.setInt(1, random);\n                count += ps.executeUpdate();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"delete \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 945,
    "toLine": 963
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 892,
    "toLine": 919
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 19,
        "mass": 307,
        "clones": 2,
        "snippet": "ps.setInt(1, random);\n                count += ps.executeUpdate();\n                if (reportProgress && (i + 1) % 10000 == 0\n                        || (slow && (i + 1) % 100 == 0)) {\n                    System.out.println(\"delete \" + (i + 1) + \" : \"\n                                       + sw.elapsedTime() + \" rps: \"\n                }\n            }\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(\"error : \" + random);\n            e.printStackTrace();\n        }\n        long time = sw.elapsedTime();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 945,
    "toLine": 963
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestCacheSize.java",
    "fromLine": 892,
    "toLine": 919
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 11,
        "volume": 25,
        "mass": 332,
        "clones": 2,
        "snippet": "String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n                accessTable[lookup] = accessCount++;\n                return testValue;\n            }\n        }\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n            return getOrAddString(key);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java",
    "fromLine": 249,
    "toLine": 273
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java",
    "fromLine": 204,
    "toLine": 228
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 25,
        "mass": 332,
        "clones": 2,
        "snippet": "String testValue;\n        int    index      = hashIndex.getHashIndex(key.hashCode());\n        int    lookup     = hashIndex.hashTable[index];\n        int    lastLookup = -1;\n        for (; lookup >= 0;\n                lastLookup = lookup,\n                lookup = hashIndex.getNextLookup(lookup)) {\n            testValue = (String) objectKeyTable[lookup];\n            if (key.equals(testValue)) {\n                if (accessCount > ACCESS_MAX) {\n                    resetAccessCount();\n                }\n                accessTable[lookup] = accessCount++;\n                return testValue;\n            }\n        }\n        if (hashIndex.elementCount >= threshold) {\n            reset();\n            return getOrAddString(key);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java",
    "fromLine": 249,
    "toLine": 273
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java",
    "fromLine": 204,
    "toLine": 228
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/tar/DbBackup.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 7,
        "mass": 279,
        "clones": 2,
        "snippet": "String[] patternStrings = null;\n                if (sa.length > firstPatInd) {\n                    patternStrings = new String[sa.length - firstPatInd];\n                    for (int i = firstPatInd; i < sa.length; i++) {\n                        patternStrings[i - firstPatInd] = sa[i];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/tar/DbBackup.java",
    "fromLine": 147,
    "toLine": 153
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/tar/TarReader.java",
    "fromLine": 102,
    "toLine": 108
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/rights/GranteeManager.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 4,
        "mass": 99,
        "clones": 2,
        "snippet": "for (int i = 0; i < map.size(); i++) {\n                Grantee g = (Grantee) map.get(i);\n                g.revokeDbObject(name);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/GranteeManager.java",
    "fromLine": 510,
    "toLine": 513
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/GranteeManager.java",
    "fromLine": 496,
    "toLine": 499
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 4,
        "mass": 99,
        "clones": 2,
        "snippet": "for (int i = 0; i < map.size(); i++) {\n                Grantee g = (Grantee) map.get(i);\n                g.revokeDbObject(name);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/GranteeManager.java",
    "fromLine": 510,
    "toLine": 513
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rights/GranteeManager.java",
    "fromLine": 496,
    "toLine": 499
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 16
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 11,
        "volume": 13,
        "mass": 384,
        "clones": 2,
        "snippet": "for (int i = 0; i < headerArray.length; i++) {\n                condlPrint(\"<TH>\"\n                        + SqlFile.escapeHtml(headerArray[i]) + \"<\/TH>\", true);\n                condlPrint(((i > 0) ? \"  \" : \"\")\n                        + ((i < headerArray.length - 1 || rightJust[i])\n                           ? StringUtil.toPaddedString(\n                             headerArray[i], maxWidth[i], ' ', !rightJust[i])\n                           : headerArray[i])\n                        , false);\n            }\n            condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n            condlPrintln(\"\", false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4474,
    "toLine": 4486
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4079,
    "toLine": 4094
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 13,
        "mass": 384,
        "clones": 2,
        "snippet": "for (int i = 0; i < headerArray.length; i++) {\n                condlPrint(\"<TH>\"\n                        + SqlFile.escapeHtml(headerArray[i]) + \"<\/TH>\", true);\n                condlPrint(((i > 0) ? \"  \" : \"\")\n                        + ((i < headerArray.length - 1 || rightJust[i])\n                           ? StringUtil.toPaddedString(\n                             headerArray[i], maxWidth[i], ' ', !rightJust[i])\n                           : headerArray[i])\n                        , false);\n            }\n            condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n            condlPrintln(\"\", false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4474,
    "toLine": 4486
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4079,
    "toLine": 4094
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 5,
        "mass": 79,
        "clones": 3,
        "snippet": "shared.userVars.put(mathMatcher.group(1), Long.toString(\n                                new Calculator(((mathMatcher.groupCount() > 1\n                                && mathMatcher.group(2) != null)\n                                ? mathMatcher.group(2)\n                                : \"\"), shared.userVars).reduce(0, false)));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2340,
    "toLine": 2344
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2758,
    "toLine": 2761
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2384,
    "toLine": 2391
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 5,
        "mass": 79,
        "clones": 3,
        "snippet": "shared.userVars.put(mathMatcher.group(1), Long.toString(\n                                new Calculator(((mathMatcher.groupCount() > 1\n                                && mathMatcher.group(2) != null)\n                                ? mathMatcher.group(2)\n                                : \"\"), shared.userVars).reduce(0, false)));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2340,
    "toLine": 2344
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2758,
    "toLine": 2761
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2384,
    "toLine": 2391
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 5,
        "mass": 79,
        "clones": 3,
        "snippet": "shared.userVars.put(mathMatcher.group(1), Long.toString(\n                                new Calculator(((mathMatcher.groupCount() > 1\n                                && mathMatcher.group(2) != null)\n                                ? mathMatcher.group(2)\n                                : \"\"), shared.userVars).reduce(0, false)));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2340,
    "toLine": 2344
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2758,
    "toLine": 2761
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2384,
    "toLine": 2391
}
,]
}
,
{
    "metadata": {
        "cc": 21,
        "volume": 20,
        "mass": 397,
        "clones": 2,
        "snippet": "historize();\n                        Statement statement = processSQL();\n                        ResultSet rs = null;\n                        if (statement != null) {\n                            try {\n                                rs = statement.getResultSet();\n                            } catch (SQLException se) {\n                                try {\n                                    if (statement != null) statement.close();\n                                } catch (SQLException nse) {\n                                } finally {\n                                    statement = null;\n                                }\n                                throw se;  \/\/ rethrow\n                            }\n                            displaySqlResults(\n                                    statement, rs, null, null, true);\n                        }\n                        continue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 1006,
    "toLine": 1025
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 954,
    "toLine": 975
}
,]
}
,
{
    "metadata": {
        "cc": 21,
        "volume": 20,
        "mass": 397,
        "clones": 2,
        "snippet": "historize();\n                        Statement statement = processSQL();\n                        ResultSet rs = null;\n                        if (statement != null) {\n                            try {\n                                rs = statement.getResultSet();\n                            } catch (SQLException se) {\n                                try {\n                                    if (statement != null) statement.close();\n                                } catch (SQLException nse) {\n                                } finally {\n                                    statement = null;\n                                }\n                                throw se;  \/\/ rethrow\n                            }\n                            displaySqlResults(\n                                    statement, rs, null, null, true);\n                        }\n                        continue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 1006,
    "toLine": 1025
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 954,
    "toLine": 975
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 10,
        "mass": 111,
        "clones": 2,
        "snippet": "condlPrint(((j > 0) ? \"  \" : \"\")\n                            + ((j < fieldArray.length - 1 || rightJust[j])\n                               ? StringUtil.toPaddedString(\n                                 fieldArray[j], maxWidth[j], ' ', !rightJust[j])\n                               : fieldArray[j])\n                            , false);\n                }\n                condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n                condlPrintln(\"\", false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4508,
    "toLine": 4517
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4122,
    "toLine": 4133
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 10,
        "mass": 111,
        "clones": 2,
        "snippet": "condlPrint(((j > 0) ? \"  \" : \"\")\n                            + ((j < fieldArray.length - 1 || rightJust[j])\n                               ? StringUtil.toPaddedString(\n                                 fieldArray[j], maxWidth[j], ' ', !rightJust[j])\n                               : fieldArray[j])\n                            , false);\n                }\n                condlPrintln(LS + PRE_TR + \"<\/TR>\", true);\n                condlPrintln(\"\", false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4508,
    "toLine": 4517
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4122,
    "toLine": 4133
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 6,
        "mass": 237,
        "clones": 2,
        "snippet": "if (!htmlMode) {\n                for (int i = 0; i < headerArray.length; i++)\n                    condlPrint(((i > 0) ? \"  \" : \"\")\n                            + SqlFile.divider(maxWidth[i]), false);\n                condlPrintln(\"\", false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4489,
    "toLine": 4494
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4096,
    "toLine": 4102
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 6,
        "mass": 237,
        "clones": 2,
        "snippet": "if (!htmlMode) {\n                for (int i = 0; i < headerArray.length; i++)\n                    condlPrint(((i > 0) ? \"  \" : \"\")\n                            + SqlFile.divider(maxWidth[i]), false);\n                condlPrintln(\"\", false);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4489,
    "toLine": 4494
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 4096,
    "toLine": 4102
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 70,
        "clones": 3,
        "snippet": "shared.userVars.put(mathMatcher.group(1), Long.toString(\n                            Calculator.reassignValue(mathMatcher.group(1),\n                            shared.userVars, mathMatcher.group(2),\n                            (mathMatcher.groupCount() < 3)\n                            ? null : mathMatcher.group(3))));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2332,
    "toLine": 2336
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2745,
    "toLine": 2749
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2373,
    "toLine": 2379
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 70,
        "clones": 3,
        "snippet": "shared.userVars.put(mathMatcher.group(1), Long.toString(\n                            Calculator.reassignValue(mathMatcher.group(1),\n                            shared.userVars, mathMatcher.group(2),\n                            (mathMatcher.groupCount() < 3)\n                            ? null : mathMatcher.group(3))));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2332,
    "toLine": 2336
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2745,
    "toLine": 2749
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2373,
    "toLine": 2379
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 70,
        "clones": 3,
        "snippet": "shared.userVars.put(mathMatcher.group(1), Long.toString(\n                            Calculator.reassignValue(mathMatcher.group(1),\n                            shared.userVars, mathMatcher.group(2),\n                            (mathMatcher.groupCount() < 3)\n                            ? null : mathMatcher.group(3))));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2332,
    "toLine": 2336
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2745,
    "toLine": 2749
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 2373,
    "toLine": 2379
}
,]
}
,
{
    "metadata": {
        "cc": 13,
        "volume": 9,
        "mass": 354,
        "clones": 2,
        "snippet": "if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new NumberFormatException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 6162,
    "toLine": 6170
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 6150,
    "toLine": 6158
}
,]
}
,
{
    "metadata": {
        "cc": 13,
        "volume": 9,
        "mass": 354,
        "clones": 2,
        "snippet": "if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new NumberFormatException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 6162,
    "toLine": 6170
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
    "fromLine": 6150,
    "toLine": 6158
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 8,
        "mass": 214,
        "clones": 5,
        "snippet": "for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 344,
    "toLine": 351
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 185,
    "toLine": 192
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementQuery.java",
    "fromLine": 94,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 294,
    "toLine": 301
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementProcedure.java",
    "fromLine": 378,
    "toLine": 385
}
,]
}
,
{
    "metadata": {
        "cc": 16,
        "volume": 23,
        "mass": 438,
        "clones": 2,
        "snippet": "for (int i = 0; i < rangeVariables.length; i++) {\n            Table    rangeTable = rangeVariables[i].rangeTable;\n            HsqlName name       = rangeTable.getName();\n            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {\n                continue;\n            }\n            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n            set.add(name);\n        }\n        for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 279,
    "toLine": 301
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 329,
    "toLine": 351
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 13,
        "mass": 141,
        "clones": 4,
        "snippet": "{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 270,
    "toLine": 282
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 117,
    "toLine": 129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 201,
    "toLine": 213
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSimple.java",
    "fromLine": 106,
    "toLine": 118
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 34,
        "mass": 430,
        "clones": 2,
        "snippet": "{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n    }\n    public Result execute(Session session) {\n        Result result;\n        try {\n            if (subqueries.length > 0) {\n                materializeSubQueries(session);\n            }\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 117,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 270,
    "toLine": 303
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 21,
        "mass": 307,
        "clones": 2,
        "snippet": "{\n        OrderedHashSet subQueries = null;\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n        subQueries.toArray(subQueryArray);\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n        return subQueryArray;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 94,
    "toLine": 114
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 128,
    "toLine": 148
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 33,
        "mass": 289,
        "clones": 2,
        "snippet": "{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public int get(int key, int defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return intValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(int key, int[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = intValueTable[lookup];\n            return true;\n        }\n        return false;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java",
    "fromLine": 58,
    "toLine": 90
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java",
    "fromLine": 65,
    "toLine": 97
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/IntKeyLongValueHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 51,
        "mass": 399,
        "clones": 2,
        "snippet": "{\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        throw new NoSuchElementException();\n    }\n    public long get(int key, int defaultValue) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            return longValueTable[lookup];\n        }\n        return defaultValue;\n    }\n    public boolean get(int key, long[] value) {\n        int lookup = getLookup(key);\n        if (lookup != -1) {\n            value[0] = longValueTable[lookup];\n            return true;\n        }\n        return false;\n    }\n    public boolean put(int key, int value) {\n        int oldSize = size();\n        super.addOrRemove(key, value, null, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(int key) {\n        int oldSize = size();\n        super.addOrRemove(key, 0, null, null, true);\n        return oldSize != size();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntKeyLongValueHashMap.java",
    "fromLine": 55,
    "toLine": 105
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongKeyLongValueHashMap.java",
    "fromLine": 65,
    "toLine": 115
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 29,
        "volume": 47,
        "mass": 697,
        "clones": 2,
        "snippet": "{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    protected void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    protected void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 963,
    "toLine": 1009
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 770,
    "toLine": 816
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 5,
        "mass": 124,
        "clones": 2,
        "snippet": "if (start < 1) {\n            throw JDBCUtil.outOfRangeArgument(\"start: \" + start);\n        } else if (pattern == null || pattern.length == 0\n                   || start > length()) {\n            return -1L;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 260,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 190,
    "toLine": 194
}
,]
}
,
{
    "metadata": {
        "cc": 29,
        "volume": 47,
        "mass": 697,
        "clones": 2,
        "snippet": "{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    protected void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    protected void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 963,
    "toLine": 1009
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 770,
    "toLine": 816
}
,]
}
,
{
    "metadata": {
        "cc": 41,
        "volume": 63,
        "mass": 744,
        "clones": 2,
        "snippet": "if (randomAccessFile != null) {\n                try {\n                    randomAccessFile.close();\n                } catch (Exception ex) {}\n            }\n        }\n    }\n    public synchronized void free() throws SQLException {\n        if (m_closed) {\n            return;\n        }\n        m_closed = true;\n        final List streams = new ArrayList();\n        streams.addAll(m_streams);\n        m_streams = null;\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            }\n        }\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 635,
    "toLine": 697
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 508,
    "toLine": 586
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestDima.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 4,
        "mass": 143,
        "clones": 2,
        "snippet": "while (rs.next()) {\n                System.out.println(rs.getInt(1));\n                System.out.println(rs.getInt(2));\n                System.out.println(rs.getString(3));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestDima.java",
    "fromLine": 113,
    "toLine": 116
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestDima.java",
    "fromLine": 103,
    "toLine": 106
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 4,
        "mass": 143,
        "clones": 2,
        "snippet": "while (rs.next()) {\n                System.out.println(rs.getInt(1));\n                System.out.println(rs.getInt(2));\n                System.out.println(rs.getString(3));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestDima.java",
    "fromLine": 113,
    "toLine": 116
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestDima.java",
    "fromLine": 103,
    "toLine": 106
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/OrderedIntHashSet.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 17,
        "volume": 28,
        "mass": 282,
        "clones": 2,
        "snippet": "{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedIntHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedLongHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,]
}
,
{
    "metadata": {
        "cc": 17,
        "volume": 28,
        "mass": 282,
        "clones": 2,
        "snippet": "{\n        return getLookup(value);\n    }\n    public int getStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (!super.containsKey(array[i])) {\n                break;\n            }\n        }\n        return i;\n    }\n    public int getOrderedStartMatchCount(int[] array) {\n        int i = 0;\n        for (; i < array.length; i++) {\n            if (i >= size() || get(i) != array[i]) {\n                break;\n            }\n        }\n        return i;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedIntHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/OrderedLongHashSet.java",
    "fromLine": 97,
    "toLine": 124
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/BinaryType.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 18,
        "mass": 132,
        "clones": 3,
        "snippet": "{\n        if (precision == 0) {\n            return getNameString();\n        }\n        StringBuffer sb = new StringBuffer(16);\n        sb.append(getNameString());\n        sb.append('(');\n        sb.append(precision);\n        sb.append(')');\n        return sb.toString();\n    }\n    public boolean isBitType() {\n        return true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BitType.java",
    "fromLine": 93,
    "toLine": 110
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 165,
    "toLine": 182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/BinaryType.java",
    "fromLine": 118,
    "toLine": 135
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 8,
        "mass": 214,
        "clones": 5,
        "snippet": "for (int i = 0; i < subqueries.length; i++) {\n            if (subqueries[i].queryExpression != null) {\n                subqueries[i].queryExpression.getBaseTableNames(set);\n            }\n        }\n        for (int i = 0; i < routines.length; i++) {\n            set.addAll(routines[i].getTableNamesForRead());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 344,
    "toLine": 351
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 185,
    "toLine": 192
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementQuery.java",
    "fromLine": 94,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementDML.java",
    "fromLine": 294,
    "toLine": 301
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementProcedure.java",
    "fromLine": 378,
    "toLine": 385
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 13,
        "mass": 141,
        "clones": 4,
        "snippet": "{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 270,
    "toLine": 282
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 117,
    "toLine": 129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 201,
    "toLine": 213
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSimple.java",
    "fromLine": 106,
    "toLine": 118
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 34,
        "mass": 430,
        "clones": 2,
        "snippet": "{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n    }\n    public Result execute(Session session) {\n        Result result;\n        try {\n            if (subqueries.length > 0) {\n                materializeSubQueries(session);\n            }\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 117,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 270,
    "toLine": 303
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 21,
        "mass": 307,
        "clones": 2,
        "snippet": "{\n        OrderedHashSet subQueries = null;\n        if (expression != null) {\n            subQueries = expression.collectAllSubqueries(subQueries);\n        }\n        if (subQueries == null || subQueries.size() == 0) {\n            return TableDerived.emptyArray;\n        }\n        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];\n        subQueries.toArray(subQueryArray);\n        for (int i = 0; i < subqueries.length; i++) {\n            subQueryArray[i].prepareTable();\n        }\n        return subQueryArray;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 94,
    "toLine": 114
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 128,
    "toLine": 148
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 48,
        "mass": 657,
        "clones": 2,
        "snippet": "super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n\t\tregisterColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n\t\tregisterColumnType( Types.BIT, \"bit\" );\n        registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n\t\tregisterColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n\t\tregisterColumnType( Types.DOUBLE, \"double\" );\n\t\tregisterColumnType( Types.FLOAT, \"float\" );\n\t\tregisterColumnType( Types.INTEGER, \"integer\" );\n\t\tregisterColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n\t\tregisterColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n\t\tregisterColumnType( Types.SMALLINT, \"smallint\" );\n\t\tregisterColumnType( Types.TINYINT, \"tinyint\" );\n\t\tregisterColumnType( Types.TIME, \"time\" );\n\t\tregisterColumnType( Types.TIMESTAMP, \"timestamp\" );\n\t\tregisterColumnType( Types.VARCHAR, \"varchar($l)\" );\n\t\tregisterColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.BLOB, \"longvarbinary\" );\n\t\tregisterColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 48,
        "mass": 657,
        "clones": 2,
        "snippet": "super();\n                try {\n                        Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );\n                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );\n                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );\n                }\n                catch ( Throwable e ) {\n                }\n\t\tregisterColumnType( Types.BIGINT, \"bigint\" );\n                registerColumnType( Types.BINARY, \"binary($l)\" );\n\t\tregisterColumnType( Types.BIT, \"bit\" );\n        registerColumnType( Types.BOOLEAN, \"boolean\" );\n                registerColumnType( Types.CHAR, \"char($l)\" );\n\t\tregisterColumnType( Types.DATE, \"date\" );\n                registerColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n\t\tregisterColumnType( Types.DOUBLE, \"double\" );\n\t\tregisterColumnType( Types.FLOAT, \"float\" );\n\t\tregisterColumnType( Types.INTEGER, \"integer\" );\n\t\tregisterColumnType( Types.LONGVARBINARY, \"longvarbinary\" );\n\t\tregisterColumnType( Types.LONGVARCHAR, \"longvarchar\" );\n\t\tregisterColumnType( Types.SMALLINT, \"smallint\" );\n\t\tregisterColumnType( Types.TINYINT, \"tinyint\" );\n\t\tregisterColumnType( Types.TIME, \"time\" );\n\t\tregisterColumnType( Types.TIMESTAMP, \"timestamp\" );\n\t\tregisterColumnType( Types.VARCHAR, \"varchar($l)\" );\n\t\tregisterColumnType( Types.VARBINARY, \"varbinary($l)\" );\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.NUMERIC, \"numeric\" );\n                }\n                else {\n                        registerColumnType( Types.NUMERIC, \"numeric($p,$s)\" );\n                }\n                if ( hsqldbVersion < 20 ) {\n\t\tregisterColumnType( Types.BLOB, \"longvarbinary\" );\n\t\tregisterColumnType( Types.CLOB, \"longvarchar\" );\n                }\n                else {\n                        registerColumnType( Types.BLOB, \"blob\" );\n                        registerColumnType( Types.CLOB, \"clob\" );\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 73,
    "toLine": 120
}
,]
}
,
{
    "metadata": {
        "cc": 43,
        "volume": 173,
        "mass": 1593,
        "clones": 2,
        "snippet": "getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 191,
    "toLine": 363
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 211,
    "toLine": 383
}
,]
}
,
{
    "metadata": {
        "cc": 43,
        "volume": 173,
        "mass": 1593,
        "clones": 2,
        "snippet": "getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 191,
    "toLine": 363
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 211,
    "toLine": 383
}
,]
}
,
{
    "metadata": {
        "cc": 43,
        "volume": 173,
        "mass": 1593,
        "clones": 2,
        "snippet": "getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE );\n\t}\n\tpublic String getAddColumnString() {\n\t\treturn \"add column\";\n\t}\n\tpublic boolean supportsIdentityColumns() {\n\t\treturn true;\n\t}\n\tpublic String getIdentityColumnString() {\n\t\treturn \"generated by default as identity (start with 1)\"; \/\/not null is implicit\n\t}\n\tpublic String getIdentitySelectString() {\n\t\treturn \"call identity()\";\n\t}\n\tpublic String getIdentityInsertString() {\n                return hsqldbVersion < 20 ? \"null\" : \"default\";\n        }\n        public boolean supportsLockTimeouts() {\n                return false;\n\t}\n\tpublic String getForUpdateString() {\n\t\treturn \"\";\n\t}\n\tpublic boolean supportsUnique() {\n\t\treturn false;\n\t}\n\tpublic boolean supportsLimit() {\n\t\treturn true;\n\t}\n\tpublic String getLimitString(String sql, boolean hasOffset) {\n                if ( hsqldbVersion < 20 ) {\n\t\treturn new StringBuffer( sql.length() + 10 )\n\t\t\t\t.append( sql )\n                                        .insert(\n                                                        sql.toLowerCase().indexOf( \"select\" ) + 6,\n                                                        hasOffset ? \" limit ? ?\" : \" top ?\"\n                                        )\n                                        .toString();\n                }\n                else {\n                        return new StringBuffer( sql.length() + 20 )\n                                        .append( sql )\n                                        .append( hasOffset ? \" offset ? limit ?\" : \" limit ?\" )\n\t\t\t\t.toString();\n\t}\n        }\n\tpublic boolean bindLimitParametersFirst() {\n                return hsqldbVersion < 20;\n\t}\n\tpublic boolean supportsIfExistsAfterTableName() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsColumnCheck() {\n                return hsqldbVersion >= 20;\n\t}\n\tpublic boolean supportsSequences() {\n\t\treturn true;\n\t}\n\tpublic boolean supportsPooledSequences() {\n\t\treturn true;\n\t}\n\tprotected String getCreateSequenceString(String sequenceName) {\n\t\treturn \"create sequence \" + sequenceName;\n\t}\n\tprotected String getDropSequenceString(String sequenceName) {\n\t\treturn \"drop sequence \" + sequenceName;\n\t}\n\tpublic String getSelectSequenceNextValString(String sequenceName) {\n\t\treturn \"next value for \" + sequenceName;\n\t}\n\tpublic String getSequenceNextValString(String sequenceName) {\n\t\treturn \"call next value for \" + sequenceName;\n\t}\n\tpublic String getQuerySequencesString() {\n\t\treturn \"select sequence_name from information_schema.system_sequences\";\n\t}\n\tpublic ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {\n                return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20;\n\t}\n        private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() {\n\t\tpublic String extractConstraintName(SQLException sqle) {\n\t\t\tString constraintName = null;\n\t\t\tint errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n\t\t\tif ( errorCode == -8 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Integrity constraint violation \", \" table:\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -9 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Violation of unique index: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -104 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n\t\t\t\t\t\t\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ( errorCode == -177 ) {\n\t\t\t\tconstraintName = extractUsingTemplate(\n                                                \"Integrity constraint violation - no parent \", \" table:\",\n                                                sqle.getMessage()\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn constraintName;\n\t\t}\n\t};\n        private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() {\n                public String extractConstraintName(SQLException sqle) {\n                        String constraintName = null;\n                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );\n                        if ( errorCode == -8 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -9 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -104 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        else if ( errorCode == -177 ) {\n                                constraintName = extractUsingTemplate(\n                                                \"; \", \" table: \", sqle.getMessage()\n                                );\n                        }\n                        return constraintName;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 191,
    "toLine": 363
}
,
{
	"loc": "project://hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
    "fromLine": 211,
    "toLine": 383
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 29,
        "volume": 47,
        "mass": 697,
        "clones": 2,
        "snippet": "{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    protected void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    protected void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 963,
    "toLine": 1009
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 770,
    "toLine": 816
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 5,
        "mass": 124,
        "clones": 2,
        "snippet": "if (start < 1) {\n            throw JDBCUtil.outOfRangeArgument(\"start: \" + start);\n        } else if (pattern == null || pattern.length == 0\n                   || start > length()) {\n            return -1L;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 260,
    "toLine": 264
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 190,
    "toLine": 194
}
,]
}
,
{
    "metadata": {
        "cc": 29,
        "volume": 47,
        "mass": 697,
        "clones": 2,
        "snippet": "{\n        boolean exists = false;\n        boolean isFile = false;\n        try {\n            exists = m_file.exists();\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n        if (exists) {\n            try {\n                isFile = m_file.isFile();\n            } catch (Exception ex) {\n                throw JDBCUtil.sqlException(ex);\n            }\n        }\n        if (exists) {\n            if (!isFile) {\n                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);\n            }\n        } else if (checkExists) {\n            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);\n        }\n    }\n    protected void checkClosed() throws SQLException {\n        if (m_closed) {\n            throw JDBCUtil.sqlException(ErrorCode.X_07501);\n        }\n    }\n    protected void createFile() throws SQLException {\n        try {\n            if (!m_file.exists()) {\n                FileUtil.getFileUtil().makeParentDirectories(m_file);\n                m_file.createNewFile();\n            }\n        } catch (Exception ex) {\n            throw JDBCUtil.sqlException(ex);\n        }\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 963,
    "toLine": 1009
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 770,
    "toLine": 816
}
,]
}
,
{
    "metadata": {
        "cc": 41,
        "volume": 63,
        "mass": 744,
        "clones": 2,
        "snippet": "if (randomAccessFile != null) {\n                try {\n                    randomAccessFile.close();\n                } catch (Exception ex) {}\n            }\n        }\n    }\n    public synchronized void free() throws SQLException {\n        if (m_closed) {\n            return;\n        }\n        m_closed = true;\n        final List streams = new ArrayList();\n        streams.addAll(m_streams);\n        m_streams = null;\n        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {\n            final Object stream = itr.next();\n            if (stream instanceof InputStream) {\n                try {\n                    ((InputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            } else if (stream instanceof OutputStream) {\n                try {\n                    ((OutputStream) stream).close();\n                } catch (Exception ex) {\n                }\n            }\n        }\n        if (m_deleteOnFree) {\n            try {\n                m_file.delete();\n            } catch (Exception e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
    "fromLine": 635,
    "toLine": 697
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
    "fromLine": 508,
    "toLine": 586
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/result/ResultLob.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 8,
        "mass": 141,
        "clones": 2,
        "snippet": "result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/result/ResultLob.java",
    "fromLine": 416,
    "toLine": 423
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/result/ResultLob.java",
    "fromLine": 393,
    "toLine": 400
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 8,
        "mass": 141,
        "clones": 2,
        "snippet": "result.blockOffset = dataInput.readLong();\n                result.blockLength = dataInput.readLong();\n                result.charBlock   = new char[(int) result.blockLength];\n                for (int i = 0; i < result.charBlock.length; i++) {\n                    result.charBlock[i] = dataInput.readChar();\n                }\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/result/ResultLob.java",
    "fromLine": 416,
    "toLine": 423
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/result/ResultLob.java",
    "fromLine": 393,
    "toLine": 400
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ParserBase.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 11,
        "volume": 12,
        "mass": 401,
        "clones": 2,
        "snippet": "String tokenS;\n        if (token.charsetSchema != null) {\n            tokenS = token.charsetSchema;\n        } else if (token.charsetName != null) {\n            tokenS = token.charsetName;\n        } else if (token.namePrePrefix != null) {\n            tokenS = token.namePrePrefix;\n        } else if (token.namePrefix != null) {\n            tokenS = token.namePrefix;\n        } else {\n            tokenS = token.tokenString;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserBase.java",
    "fromLine": 802,
    "toLine": 813
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserBase.java",
    "fromLine": 775,
    "toLine": 786
}
,]
}
,
{
    "metadata": {
        "cc": 11,
        "volume": 12,
        "mass": 401,
        "clones": 2,
        "snippet": "String tokenS;\n        if (token.charsetSchema != null) {\n            tokenS = token.charsetSchema;\n        } else if (token.charsetName != null) {\n            tokenS = token.charsetName;\n        } else if (token.namePrePrefix != null) {\n            tokenS = token.namePrePrefix;\n        } else if (token.namePrefix != null) {\n            tokenS = token.namePrefix;\n        } else {\n            tokenS = token.tokenString;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserBase.java",
    "fromLine": 802,
    "toLine": 813
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserBase.java",
    "fromLine": 775,
    "toLine": 786
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 5
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 135,
        "clones": 42,
        "snippet": "catch (SQLException se) {\n            junit.framework.AssertionFailedError ase\n                = new junit.framework.AssertionFailedError(se.getMessage());\n            ase.initCause(se);\n            throw ase;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 137,
    "toLine": 141
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 148,
    "toLine": 152
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 239,
    "toLine": 243
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 324,
    "toLine": 328
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcService.java",
    "fromLine": 343,
    "toLine": 347
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
    "fromLine": 195,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 154,
    "toLine": 158
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 184,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 214,
    "toLine": 218
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 243,
    "toLine": 247
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 307,
    "toLine": 311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 336,
    "toLine": 340
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 365,
    "toLine": 369
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 394,
    "toLine": 398
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 423,
    "toLine": 427
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 453,
    "toLine": 457
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 483,
    "toLine": 487
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 514,
    "toLine": 518
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 543,
    "toLine": 547
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 605,
    "toLine": 609
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 635,
    "toLine": 639
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 664,
    "toLine": 668
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 692,
    "toLine": 696
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 725,
    "toLine": 728
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 760,
    "toLine": 764
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 798,
    "toLine": 802
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 831,
    "toLine": 835
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 871,
    "toLine": 875
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 911,
    "toLine": 915
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 952,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 992,
    "toLine": 996
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1037,
    "toLine": 1041
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1077,
    "toLine": 1081
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1117,
    "toLine": 1121
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1157,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1197,
    "toLine": 1201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1279,
    "toLine": 1283
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1321,
    "toLine": 1325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1368,
    "toLine": 1372
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1410,
    "toLine": 1414
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1590,
    "toLine": 1594
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
    "fromLine": 1538,
    "toLine": 1542
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 7
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 13,
        "mass": 161,
        "clones": 2,
        "snippet": "sqlState = parseSQLStateValue();\n            if (readIfThis(Tokens.SET)) {\n                readThis(Tokens.MESSAGE_TEXT);\n                readThis(Tokens.EQUALS);\n                message = XreadSimpleValueSpecificationOrNull();\n                if (message == null) {\n                    throw unexpectedToken();\n                }\n                resolveOuterReferencesAndTypes(routine, context, message);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 2148,
    "toLine": 2160
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 2117,
    "toLine": 2129
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 13,
        "mass": 161,
        "clones": 2,
        "snippet": "sqlState = parseSQLStateValue();\n            if (readIfThis(Tokens.SET)) {\n                readThis(Tokens.MESSAGE_TEXT);\n                readThis(Tokens.EQUALS);\n                message = XreadSimpleValueSpecificationOrNull();\n                if (message == null) {\n                    throw unexpectedToken();\n                }\n                resolveOuterReferencesAndTypes(routine, context, message);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 2148,
    "toLine": 2160
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 2117,
    "toLine": 2129
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 10,
        "mass": 201,
        "clones": 5,
        "snippet": "if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1369,
    "toLine": 1378
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1749,
    "toLine": 1758
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1791,
    "toLine": 1800
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1875,
    "toLine": 1884
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1823,
    "toLine": 1832
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 10,
        "mass": 201,
        "clones": 5,
        "snippet": "if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1369,
    "toLine": 1378
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1749,
    "toLine": 1758
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1791,
    "toLine": 1800
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1875,
    "toLine": 1884
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1823,
    "toLine": 1832
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 10,
        "mass": 201,
        "clones": 5,
        "snippet": "if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1369,
    "toLine": 1378
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1749,
    "toLine": 1758
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1791,
    "toLine": 1800
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1875,
    "toLine": 1884
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1823,
    "toLine": 1832
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 10,
        "mass": 201,
        "clones": 5,
        "snippet": "if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1369,
    "toLine": 1378
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1749,
    "toLine": 1758
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1791,
    "toLine": 1800
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1875,
    "toLine": 1884
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1823,
    "toLine": 1832
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 10,
        "mass": 201,
        "clones": 5,
        "snippet": "if (isSimpleName() && !isReservedKey()) {\n            if (label == null) {\n                throw unexpectedToken();\n            }\n            if (!label.name.equals(token.tokenString)) {\n                throw Error.error(ErrorCode.X_42508, token.tokenString);\n            }\n            read();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1369,
    "toLine": 1378
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1749,
    "toLine": 1758
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1791,
    "toLine": 1800
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1875,
    "toLine": 1884
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserRoutine.java",
    "fromLine": 1823,
    "toLine": 1832
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 16,
        "volume": 80,
        "mass": 1101,
        "clones": 2,
        "snippet": "{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,]
}
,
{
    "metadata": {
        "cc": 16,
        "volume": 80,
        "mass": 1101,
        "clones": 2,
        "snippet": "{\n        return conn;\n    }\n    public static void main(String[] sa) throws Exception {\n        if (sa.length < 3) {\n            System.err.println(\"SYNTAX:  \" + SqlFileEmbedder.class.getName()\n                    + \" path\/ro\/file.rc URLID file1.sql...\");\n            System.exit(2);\n        }\n        SqlFileEmbedder embedder =\n                new SqlFileEmbedder(new File(sa[0]), sa[1]);\n        String[] files = new String[sa.length - 2];\n        for (int i = 0; i < sa.length - 2; i++) {\n            files[i] = sa[i + 2];\n        }\n        try {\n            embedder.executeFiles(files);\n        } finally {\n            try {\n                embedder.getConn().close();\n            } catch (SQLException se) {\n            }\n        }\n    }\n    public SqlFileEmbedder(File rcFile, String urlid) throws Exception {\n        conn = (new RCData(rcFile, urlid)).getConnection();\n        conn.setAutoCommit(false);\n    }\n    public void executeFiles(String[] fileStrings)\n            throws IOException, SqlToolError, SQLException {\n        Map<String, String> sqlVarMap = new HashMap<String, String>();\n        sqlVarMap.put(\"invoker\", getClass().getName());\n        File file;\n        SqlFile sqlFile;\n        for (String fileString : fileStrings) {\n            file = new File(fileString);\n            if (!file.isFile())\n                throw new IOException(\"SQL file not present: \"\n                        + file.getAbsolutePath());\n            sqlFile = new SqlFile(file);\n            sqlFile.setConnection(conn);\n            sqlFile.addUserVars(sqlVarMap);\n            sqlFile.execute();\n            conn = sqlFile.getConnection();\n            sqlVarMap = sqlFile.getUserVars();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/SqlFileEmbedder.java",
    "fromLine": 68,
    "toLine": 147
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/ClosableCharArrayWriter.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 8,
        "volume": 99,
        "mass": 437,
        "clones": 2,
        "snippet": "out.write(buf, 0, count);\n        }\n    }\n    public synchronized int capacity() throws IOException {\n        checkFreed();\n        return buf.length;\n    }\n    public synchronized void reset() throws IOException {\n        checkClosed();\n        count = 0;\n    }\n    public synchronized void trimToSize() throws IOException {\n        checkFreed();\n        if (buf.length > count) {\n            buf = copyOf(buf, count);\n        }\n    }\n    public synchronized char[] toCharArray() throws IOException {\n        checkFreed();\n        return copyOf(buf, count);\n    }\n    public synchronized int size() throws IOException {\n        return count;\n    }\n    public synchronized void setSize(int newSize) {\n        if (newSize < 0) {\n            throw new ArrayIndexOutOfBoundsException(newSize);\n        } else if (newSize > buf.length) {\n            buf = copyOf(buf, Math.max(buf.length << 1, newSize));\n        }\n        count = newSize;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ClosableCharArrayWriter.java",
    "fromLine": 239,
    "toLine": 337
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java",
    "fromLine": 203,
    "toLine": 302
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/StringConverter.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 5,
        "mass": 156,
        "clones": 2,
        "snippet": "{\n            int c = ((int) b[i]) & 0xff;\n            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];\n            s[j++] = (char) HEXBYTES[c & 0xf];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringConverter.java",
    "fromLine": 252,
    "toLine": 256
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringConverter.java",
    "fromLine": 224,
    "toLine": 228
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 5,
        "mass": 156,
        "clones": 2,
        "snippet": "{\n            int c = ((int) b[i]) & 0xff;\n            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];\n            s[j++] = (char) HEXBYTES[c & 0xf];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringConverter.java",
    "fromLine": 252,
    "toLine": 256
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/StringConverter.java",
    "fromLine": 224,
    "toLine": 228
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
{
    "metadata": {
        "cc": 155,
        "volume": 319,
        "mass": 4119,
        "clones": 2,
        "snippet": "{\n        synchronized (TriggerSample.class) {\n            String ors = or == null ? \"null\"\n                                    : StringUtil.arrayToString(or);\n            String nrs = nr == null ? \"null\"\n                                    : StringUtil.arrayToString(nr);\n            out.println(\"----------------------------------------\");\n            out.println(getTriggerDescriptor(trn, typ, tn));\n            out.println(\"old row : \" + ors);\n            out.println(\"new row : \" + nrs);\n            out.flush();\n            if (\"TRIG_TEST\".equals(tn)) {\n                switch (typ) {\n                    case INSERT_BEFORE_ROW : {\n                        final int ID = ((Number) nr[0]).intValue();\n                        doAssert(ID < 11, \"ID < 11\");\n                        break;\n                    }\n                    case UPDATE_BEFORE_ROW : {\n                        if (\"unchangable\".equals(or[1])) {\n                            nr[1] = or[1];    \/\/ short-circuit the update\n                        }\n                        break;\n                    }\n                }\n            }\n            doAuditStep(typ, tn, ors, nrs);\n        }\n    }\n    private static void doAssert(boolean b, String msg) {\n        if (b) {\n        } else {\n            throw Error.error(ErrorCode.GENERAL_ERROR, msg);\n        }\n    }\n    private static void doAuditStep(int typ, String tn, String ors,\n                                    String nrs) {\n        Connection        conn;\n        PreparedStatement stmt;\n        switch (typ) {\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW : {\n                try {\n                    conn = getConnection();\n                    stmt = conn.prepareStatement(audit_insert_stmt);\n                    stmt.setString(1, getOperationSpec(typ));\n                    stmt.setString(2, tn);\n                    stmt.setString(3, ors);\n                    stmt.setString(4, nrs);\n                    stmt.executeUpdate();\n                    conn.close();\n                } catch (SQLException se) {\n                    se.printStackTrace();\n                }\n            }\n        }\n    }\n    public static String getWhenSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case UPDATE_BEFORE_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"BEFORE\";\n            }\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW : {\n                return \"AFTER\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getOperationSpec(int type) {\n        switch (type) {\n            case INSERT_AFTER :\n            case INSERT_AFTER_ROW :\n            case INSERT_BEFORE_ROW : {\n                return \"INSERT\";\n            }\n            case UPDATE_AFTER :\n            case UPDATE_AFTER_ROW :\n            case UPDATE_BEFORE_ROW : {\n                return \"UPDATE\";\n            }\n            case DELETE_AFTER :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"DELETE\";\n            }\n            default : {\n                return \"\";\n            }\n        }\n    }\n    public static String getQueueSpec(int qs) {\n        return (qs < 0) ? \"\"\n                        : (\"QUEUE \" + qs);\n    }\n    public static String getForEachSpec(int type) {\n        switch (type) {\n            case INSERT_BEFORE_ROW :\n            case INSERT_AFTER_ROW :\n            case UPDATE_BEFORE_ROW :\n            case UPDATE_AFTER_ROW :\n            case DELETE_AFTER_ROW :\n            case DELETE_BEFORE_ROW : {\n                return \"FOR EACH ROW\";\n            }\n            default : {\n                return \"FOR EACH STATEMENT\";\n            }\n        }\n    }\n    public static String getTriggerDDL(String trn, int typ, String tab,\n                                       int qs,\n                                       String impl) throws SQLException {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"CREATE TRIGGER \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        sb.append(' ');\n        sb.append(getQueueSpec(qs));\n        sb.append(\" CALL \\\"\");\n        sb.append(impl);\n        sb.append(\"\\\"\");\n        return sb.toString();\n    }\n    public static String getTriggerDescriptor(String trn, int typ,\n            String tab) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"TRIGGER : \");\n        sb.append(trn);\n        sb.append(' ');\n        sb.append(getWhenSpec(typ));\n        sb.append(' ');\n        sb.append(getOperationSpec(typ));\n        sb.append(\" ON \");\n        sb.append(tab);\n        sb.append(' ');\n        sb.append(getForEachSpec(typ));\n        return sb.toString();\n    }\n    private static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(drv).newInstance();\n            return DriverManager.getConnection(url, usr, pwd);\n        } catch (SQLException se) {\n            throw se;\n        } catch (Exception e) {\n            throw new SQLException(e.toString());\n        }\n    }\n    private static void createTrigger(Statement stmt, String trn,\n                                      int typ) throws SQLException {\n        stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));\n    }\n    private static void setup() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        stmt.execute(drop_test_table_stmt);\n        stmt.execute(create_test_table_stmt);\n        stmt.execute(drop_audit_table_stmt);\n        stmt.execute(create_audit_table_stmt);\n        createTrigger(stmt, \"tibr_\" + tn, INSERT_BEFORE_ROW);\n        createTrigger(stmt, \"tia_\" + tn, INSERT_AFTER);\n        createTrigger(stmt, \"tiar_\" + tn, INSERT_AFTER_ROW);\n        createTrigger(stmt, \"tubr_\" + tn, UPDATE_BEFORE_ROW);\n        createTrigger(stmt, \"tua_\" + tn, UPDATE_AFTER);\n        createTrigger(stmt, \"tuar_\" + tn, UPDATE_AFTER_ROW);\n        createTrigger(stmt, \"tdbr_\" + tn, DELETE_BEFORE_ROW);\n        createTrigger(stmt, \"tda_\" + tn, DELETE_AFTER);\n        createTrigger(stmt, \"tdar_\" + tn, DELETE_AFTER_ROW);\n        stmt.close();\n        conn.close();\n    }\n    private static void doSomeWork() throws SQLException {\n        Connection conn = getConnection();\n        Statement  stmt = conn.createStatement();\n        conn.setAutoCommit(false);\n        stmt.execute(\"INSERT INTO trig_test VALUES (1, 'hello')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (2, 'now what?')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (3, 'unchangable')\");\n        stmt.execute(\"INSERT INTO trig_test VALUES (4, 'goodbye')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"UPDATE trig_test SET value = 'all done'\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.execute(\"DELETE FROM trig_test\");\n        conn.rollback();\n        dumpTable(\"trig_test\");\n        try {\n            stmt.execute(\"INSERT INTO trig_test VALUES(11, 'whatever')\");\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        stmt.execute(\"INSERT INTO trig_test VALUES(10, 'whatever')\");\n        conn.commit();\n        dumpTable(\"trig_test\");\n        stmt.close();\n        conn.close();\n    }\n    private static void dumpTable(String tn) throws SQLException {\n        Connection        conn  = getConnection();\n        Statement         stmt  = conn.createStatement();\n        ResultSetMetaData rsmd  = rs.getMetaData();\n        int               count = rsmd.getColumnCount();\n        out.println();\n        out.println(\"DUMP FOR TABLE: \" + tn);\n        out.flush();\n        while (rs.next()) {\n            out.print(\"[\");\n            for (int i = 1; i <= count; i++) {\n                out.print(rs.getString(i));\n                if (i < count) {\n                    out.print(\" : \");\n                }\n            }\n            out.println(\"]\");\n        }\n        out.println();\n        out.flush();\n        rs.close();\n        stmt.close();\n        conn.close();\n    }\n    private static void runSample() throws SQLException {\n        setup();\n        doSomeWork();\n        dumpTable(\"audit\");\n    }\n    public static void main(String[] args) throws SQLException {\n        runSample();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/TriggerSample.java",
    "fromLine": 166,
    "toLine": 484
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 16,
        "mass": 250,
        "clones": 2,
        "snippet": "RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n            navigator.add(rowData);\n        }\n        Result result = Result.newDataResult(meta);\n        result.setNavigator(navigator);\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java",
    "fromLine": 539,
    "toLine": 554
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCArray.java",
    "fromLine": 585,
    "toLine": 600
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 9
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 162,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(rangeVariables, set);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 974,
    "toLine": 976
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 932,
    "toLine": 934
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 144,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceColumnReferences(range, list);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1082,
    "toLine": 1087
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 725,
    "toLine": 730
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 7,
        "mass": 150,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,\n                    length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1000,
    "toLine": 1006
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 899,
    "toLine": 905
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 147,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                set = nodes[i].collectRangeVariables(set);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 954,
    "toLine": 956
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 916,
    "toLine": 918
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 4,
        "mass": 154,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                if (nodes[i].hasReference(range)) {\n                    return true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1102,
    "toLine": 1105
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 969,
    "toLine": 972
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 7,
        "mass": 194,
        "clones": 3,
        "snippet": "{\n                        if (matchIndex < 0) {\n                            matchIndex = i;\n                        } else if (session.database.sqlEnforceRefs) {\n                            String message = getColumnName();\n                            throw Error.error(ErrorCode.X_42580, message);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1021,
    "toLine": 1027
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1051,
    "toLine": 1057
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1038,
    "toLine": 1044
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 7,
        "mass": 194,
        "clones": 3,
        "snippet": "{\n                        if (matchIndex < 0) {\n                            matchIndex = i;\n                        } else if (session.database.sqlEnforceRefs) {\n                            String message = getColumnName();\n                            throw Error.error(ErrorCode.X_42580, message);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1021,
    "toLine": 1027
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1051,
    "toLine": 1057
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1038,
    "toLine": 1044
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 7,
        "mass": 194,
        "clones": 3,
        "snippet": "{\n                        if (matchIndex < 0) {\n                            matchIndex = i;\n                        } else if (session.database.sqlEnforceRefs) {\n                            String message = getColumnName();\n                            throw Error.error(ErrorCode.X_42580, message);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1021,
    "toLine": 1027
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1051,
    "toLine": 1057
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 1038,
    "toLine": 1044
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 120,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] == null) {\n                continue;\n            }\n            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionColumn.java",
    "fromLine": 929,
    "toLine": 934
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1130,
    "toLine": 1135
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 7
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 21,
        "mass": 293,
        "clones": 2,
        "snippet": "condition =\n                ExpressionLogical.andExpressions(baseSelect.queryCondition,\n                                                 condition);\n            rangeVariables = baseSelect.rangeVariables;\n        }\n        if (condition != null) {\n            rangeVariables[0].addJoinCondition(condition);\n            RangeVariableResolver resolver =\n                new RangeVariableResolver(rangeVariables, null,\n                                          compileContext, false);\n            resolver.processConditions(session);\n            rangeVariables = resolver.rangeVariables;\n        }\n        for (int i = 0; i < rangeVariables.length; i++) {\n            rangeVariables[i].resolveRangeTableTypes(session,\n                    RangeVariable.emptyArray);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 609,
    "toLine": 629
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 490,
    "toLine": 510
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 21,
        "mass": 293,
        "clones": 2,
        "snippet": "condition =\n                ExpressionLogical.andExpressions(baseSelect.queryCondition,\n                                                 condition);\n            rangeVariables = baseSelect.rangeVariables;\n        }\n        if (condition != null) {\n            rangeVariables[0].addJoinCondition(condition);\n            RangeVariableResolver resolver =\n                new RangeVariableResolver(rangeVariables, null,\n                                          compileContext, false);\n            resolver.processConditions(session);\n            rangeVariables = resolver.rangeVariables;\n        }\n        for (int i = 0; i < rangeVariables.length; i++) {\n            rangeVariables[i].resolveRangeTableTypes(session,\n                    RangeVariable.emptyArray);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 609,
    "toLine": 629
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 490,
    "toLine": 510
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 172,
        "clones": 2,
        "snippet": "if (table != baseTable) {\n            int[] baseColumnMap = table.getBaseTableColumnMap();\n            int[] newColumnMap  = new int[columnMap.length];\n            ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);\n            columnMap = newColumnMap;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 283,
    "toLine": 289
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 206,
    "toLine": 213
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 172,
        "clones": 2,
        "snippet": "if (table != baseTable) {\n            int[] baseColumnMap = table.getBaseTableColumnMap();\n            int[] newColumnMap  = new int[columnMap.length];\n            ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);\n            columnMap = newColumnMap;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 283,
    "toLine": 289
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 206,
    "toLine": 213
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 4,
        "mass": 127,
        "clones": 2,
        "snippet": "{\n                    if (targetTable.colDefaults[columnMap[i]] == null\n                            && targetTable.identityColumn != columnMap[i]) {\n                        throw Error.error(ErrorCode.X_42544);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 735,
    "toLine": 738
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 692,
    "toLine": 696
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 4,
        "mass": 127,
        "clones": 2,
        "snippet": "{\n                    if (targetTable.colDefaults[columnMap[i]] == null\n                            && targetTable.identityColumn != columnMap[i]) {\n                        throw Error.error(ErrorCode.X_42544);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 735,
    "toLine": 738
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 692,
    "toLine": 696
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 18,
        "mass": 321,
        "clones": 2,
        "snippet": "HsqlArrayList list = new HsqlArrayList();\n        readThis(Tokens.OPENBRACKET);\n        if (token.tokenType == Tokens.CLOSEBRACKET) {\n            read();\n        } else {\n            while (true) {\n                Expression e = XreadValueExpression();\n                list.add(e);\n                if (token.tokenType == Tokens.COMMA) {\n                    read();\n                } else {\n                    readThis(Tokens.CLOSEBRACKET);\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 5232,
    "toLine": 5249
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 1149,
    "toLine": 1166
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/server/OdbcUtil.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 13,
        "volume": 9,
        "mass": 354,
        "clones": 2,
        "snippet": "if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new IllegalArgumentException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/OdbcUtil.java",
    "fromLine": 269,
    "toLine": 277
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/OdbcUtil.java",
    "fromLine": 257,
    "toLine": 265
}
,]
}
,
{
    "metadata": {
        "cc": 13,
        "volume": 9,
        "mass": 354,
        "clones": 2,
        "snippet": "if (c >= 'a' && c <= 'f') {\n                octet += 10 + c - 'a';\n            } else if (c >= 'A' && c <= 'F') {\n                octet += 10 + c - 'A';\n            } else if (c >= '0' && c <= '9') {\n                octet += c - '0';\n            } else {\n                throw new IllegalArgumentException(\n                    \"Non-hex character in input at offset \" + i + \": \" + c);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/OdbcUtil.java",
    "fromLine": 269,
    "toLine": 277
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/OdbcUtil.java",
    "fromLine": 257,
    "toLine": 265
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/OracleTransferHelper.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 15,
        "mass": 496,
        "clones": 2,
        "snippet": "if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n            t.Stmts.sDestDrop += DropSequence;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/OracleTransferHelper.java",
    "fromLine": 98,
    "toLine": 112
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java",
    "fromLine": 120,
    "toLine": 134
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/HashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 8,
        "mass": 129,
        "clones": 3,
        "snippet": "{\n        Iterator it = t.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            put(key, t.get(key));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntValueHashMap.java",
    "fromLine": 259,
    "toLine": 266
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HashMap.java",
    "fromLine": 85,
    "toLine": 92
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongValueHashMap.java",
    "fromLine": 210,
    "toLine": 217
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 9,
        "mass": 205,
        "clones": 2,
        "snippet": "if (columnMap == null) {\n                data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,\n                        visibleColumnCount);\n            } else {\n                Object[] newData = new Object[visibleColumnCount];\n                ArrayUtil.projectRow(data, columnMap, newData);\n                data = newData;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java",
    "fromLine": 204,
    "toLine": 212
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java",
    "fromLine": 199,
    "toLine": 207
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/Testdb.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 18,
        "volume": 144,
        "mass": 1138,
        "clones": 2,
        "snippet": "{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,]
}
,
{
    "metadata": {
        "cc": 18,
        "volume": 144,
        "mass": 1138,
        "clones": 2,
        "snippet": "{    \/\/ note more general exception\n        Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:\"\n                                           + db_file_name_prefix,    \/\/ filenames\n                                           \"SA\",                     \/\/ username\n                                           \"\");                      \/\/ password\n    }\n    public void shutdown() throws SQLException {\n        Statement st = conn.createStatement();\n        st.execute(\"SHUTDOWN\");\n        conn.close();    \/\/ if there are no other open connection\n    }\n    public synchronized void query(String expression) throws SQLException {\n        Statement st = null;\n        ResultSet rs = null;\n        st = conn.createStatement();         \/\/ statement objects can be reused with\n        rs = st.executeQuery(expression);    \/\/ run the query\n        dump(rs);\n        st.close();    \/\/ NOTE!! if you close a statement the associated ResultSet is\n    }\n    public synchronized void update(String expression) throws SQLException {\n        Statement st = null;\n        st = conn.createStatement();    \/\/ statements\n        int i = st.executeUpdate(expression);    \/\/ run the query\n        if (i == -1) {\n            System.out.println(\"db error : \" + expression);\n        }\n        st.close();\n    }    \/\/ void update()\n    public static void dump(ResultSet rs) throws SQLException {\n        ResultSetMetaData meta   = rs.getMetaData();\n        int               colmax = meta.getColumnCount();\n        int               i;\n        Object            o = null;\n        for (; rs.next(); ) {\n            for (i = 0; i < colmax; ++i) {\n                o = rs.getObject(i + 1);    \/\/ Is SQL the first column is indexed\n                System.out.print(o.toString() + \" \");\n            }\n            System.out.println(\" \");\n        }\n    }                                       \/\/void dump( ResultSet rs )\n    public static void main(String[] args) {\n        Testdb db = null;\n        try {\n            db = new Testdb(\"db_file\");\n        } catch (Exception ex1) {\n            ex1.printStackTrace();    \/\/ could not start db\n            return;                   \/\/ bye bye\n        }\n        try {\n            db.update(\n                \"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)\");\n        } catch (SQLException ex2) {\n        }\n        try {\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)\");\n            db.update(\n                \"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)\");\n            db.shutdown();\n        } catch (SQLException ex3) {\n            ex3.printStackTrace();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/sample/Testdb.java",
    "fromLine": 56,
    "toLine": 199
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/TransferCommon.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 186,
        "clones": 2,
        "snippet": "for (int i = 0; i < tTable.size(); i++) {\n                t          = (TransferTable) tTable.elementAt(i);\n                t.tracer   = tracer;\n                t.sourceDb = (TransferDb) sourceDb;\n                t.destDb   = targetDb;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferCommon.java",
    "fromLine": 135,
    "toLine": 139
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferCommon.java",
    "fromLine": 110,
    "toLine": 114
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 186,
        "clones": 2,
        "snippet": "for (int i = 0; i < tTable.size(); i++) {\n                t          = (TransferTable) tTable.elementAt(i);\n                t.tracer   = tracer;\n                t.sourceDb = (TransferDb) sourceDb;\n                t.destDb   = targetDb;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferCommon.java",
    "fromLine": 135,
    "toLine": 139
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/TransferCommon.java",
    "fromLine": 110,
    "toLine": 114
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/TimeData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 9,
        "volume": 14,
        "mass": 190,
        "clones": 2,
        "snippet": "{\n        long diff = seconds - b.seconds;\n        if (diff == 0) {\n            diff = nanos - b.nanos;\n            if (diff == 0) {\n                return 0;\n            }\n        }\n        return diff > 0 ? 1\n                        : -1;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/TimeData.java",
    "fromLine": 93,
    "toLine": 106
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/TimestampData.java",
    "fromLine": 99,
    "toLine": 112
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 13
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 12,
        "volume": 53,
        "mass": 517,
        "clones": 2,
        "snippet": "ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 759,
    "toLine": 811
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 682,
    "toLine": 734
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 53,
        "mass": 517,
        "clones": 2,
        "snippet": "ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 759,
    "toLine": 811
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 682,
    "toLine": 734
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 13,
        "mass": 322,
        "clones": 2,
        "snippet": "if (baOut.length != baR1.length) {\n                assertTrue(\"Expected array len \" + baR1.length + \", got len \"\n                           + baOut.length, false);\n            }\n            for (int i = 0; i < baOut.length; i++) {\n                if (baOut[i] != baR1[i]) {\n                    assertTrue(\"Expected array len \" + baR1.length\n                               + \", got len \" + baOut.length, false);\n                }\n            }\n            rs.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 238,
    "toLine": 250
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 183,
    "toLine": 195
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 13,
        "mass": 322,
        "clones": 2,
        "snippet": "if (baOut.length != baR1.length) {\n                assertTrue(\"Expected array len \" + baR1.length + \", got len \"\n                           + baOut.length, false);\n            }\n            for (int i = 0; i < baOut.length; i++) {\n                if (baOut[i] != baR1[i]) {\n                    assertTrue(\"Expected array len \" + baR1.length\n                               + \", got len \" + baOut.length, false);\n                }\n            }\n            rs.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 238,
    "toLine": 250
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 183,
    "toLine": 195
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 130,
        "clones": 3,
        "snippet": "System.out.println(\"Starting (sub-)test: \" + getName());\n        try {\n            String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";\n            String ddl1 =\n                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";\n            statement.execute(ddl0);\n            statement.execute(ddl1);\n        } catch (SQLException e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 260,
    "toLine": 269
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 740,
    "toLine": 749
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 665,
    "toLine": 674
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 130,
        "clones": 3,
        "snippet": "System.out.println(\"Starting (sub-)test: \" + getName());\n        try {\n            String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";\n            String ddl1 =\n                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";\n            statement.execute(ddl0);\n            statement.execute(ddl1);\n        } catch (SQLException e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 260,
    "toLine": 269
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 740,
    "toLine": 749
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 665,
    "toLine": 674
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 130,
        "clones": 3,
        "snippet": "System.out.println(\"Starting (sub-)test: \" + getName());\n        try {\n            String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";\n            String ddl1 =\n                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";\n            statement.execute(ddl0);\n            statement.execute(ddl1);\n        } catch (SQLException e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 260,
    "toLine": 269
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 740,
    "toLine": 749
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 665,
    "toLine": 674
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 18,
        "mass": 185,
        "clones": 2,
        "snippet": "{\n                reader = dataClob.getCharacterStream();\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }\n            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n            ps = connection.prepareStatement(dml1);\n            sw.zero();\n            sw.start();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 603,
    "toLine": 620
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 530,
    "toLine": 547
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 18,
        "mass": 185,
        "clones": 2,
        "snippet": "{\n                reader = dataClob.getCharacterStream();\n                ps.setString(1, \"test-id-1\" + i);\n                ps.setLong(2, 23456789123456L + i);\n                ps.setCharacterStream(3, reader, dataClob.length());\n                ps.setString(4, \"test-scope-1\" + i);\n                ps.executeUpdate();\n                connection.commit();\n            }\n            sw.stop();\n            System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));\n            ps = connection.prepareStatement(dml1);\n            sw.zero();\n            sw.start();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 603,
    "toLine": 620
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 530,
    "toLine": 547
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 12,
        "mass": 255,
        "clones": 2,
        "snippet": "            try {\n                InputStream fis =\n                    getClass().getResourceAsStream(resourceFileName);\n                fis    = getClass().getResourceAsStream(resourceFileName);\n                reader = new InputStreamReader(fis, \"ISO-8859-1\");\n                for (int i = 0; i < 100; i++) {\n                    reader.read();\n                }\n            } catch (Exception e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 471,
    "toLine": 482
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 445,
    "toLine": 455
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 12,
        "mass": 255,
        "clones": 2,
        "snippet": "            try {\n                InputStream fis =\n                    getClass().getResourceAsStream(resourceFileName);\n                fis    = getClass().getResourceAsStream(resourceFileName);\n                reader = new InputStreamReader(fis, \"ISO-8859-1\");\n                for (int i = 0; i < 100; i++) {\n                    reader.read();\n                }\n            } catch (Exception e) {}\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 471,
    "toLine": 482
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 445,
    "toLine": 455
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 53,
        "mass": 517,
        "clones": 2,
        "snippet": "ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 759,
    "toLine": 811
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 682,
    "toLine": 734
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 53,
        "mass": 517,
        "clones": 2,
        "snippet": "ps.executeUpdate();\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\n            ResultSet rs = statement.executeQuery(dq1);\n            rs.next();\n            int length = rs.getInt(1);\n            assertTrue(value.length() == length);\n            rs.close();\n            String dq3 = \"delete from clobtest;\";\n            statement.execute(dq3);\n            char[] testChars = new char[11111];\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\n                if (j > 255) {\n                    j = 32;\n                }\n                testChars[i] = (char) j;\n            }\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\n                                  testChars.length);\n            ps.executeUpdate();\n            String dq2 = \"select clobfield from clobtest;\";\n            rs = statement.executeQuery(dq2);\n            rs.next();\n            Reader reader   = rs.getCharacterStream(1);\n            char[] newChars = new char[testChars.length];\n            try {\n                reader.read(newChars);\n            } catch (IOException e) {\n                fail(\"test failure\");\n            }\n            for (int i = 0; i < testChars.length; i++) {\n                if (testChars[i] != newChars[i]) {\n                    fail(\"test failure\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            fail(\"test failure\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 759,
    "toLine": 811
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestLobs.java",
    "fromLine": 682,
    "toLine": 734
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementSchemaDefinition.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 15,
        "mass": 207,
        "clones": 2,
        "snippet": "{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSimple.java",
    "fromLine": 121,
    "toLine": 135
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSchemaDefinition.java",
    "fromLine": 59,
    "toLine": 73
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestGroupByHaving.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 68,
        "clones": 2,
        "snippet": "Object[][] expected = new Object[][] {\n            {\n                new Double(42500), new Integer(13)\n            }, {\n                new Double(45000), new Integer(23)\n            },\n        };\n        compareResults(sql, expected, \"00000\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestGroupByHaving.java",
    "fromLine": 227,
    "toLine": 235
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestGroupByHaving.java",
    "fromLine": 200,
    "toLine": 208
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 68,
        "clones": 2,
        "snippet": "Object[][] expected = new Object[][] {\n            {\n                new Double(42500), new Integer(13)\n            }, {\n                new Double(45000), new Integer(23)\n            },\n        };\n        compareResults(sql, expected, \"00000\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestGroupByHaving.java",
    "fromLine": 227,
    "toLine": 235
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestGroupByHaving.java",
    "fromLine": 200,
    "toLine": 208
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 92,
        "clones": 2,
        "snippet": "{\n        ensureRoom(2);\n        buffer[count++] = (byte) (v >>> 8);\n        buffer[count++] = (byte) v;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java",
    "fromLine": 170,
    "toLine": 175
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java",
    "fromLine": 111,
    "toLine": 116
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 92,
        "clones": 2,
        "snippet": "{\n        ensureRoom(2);\n        buffer[count++] = (byte) (v >>> 8);\n        buffer[count++] = (byte) v;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java",
    "fromLine": 170,
    "toLine": 175
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java",
    "fromLine": 111,
    "toLine": 116
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 7,
        "volume": 10,
        "mass": 323,
        "clones": 2,
        "snippet": "{\n        if (size == table.length) {\n            int        newSize  = size == 0 ? 4\n            Object[][] newTable = new Object[newSize][];\n            System.arraycopy(table, 0, newTable, 0, size);\n            table = newTable;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java",
    "fromLine": 641,
    "toLine": 650
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java",
    "fromLine": 262,
    "toLine": 271
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/rowio/RowInputText.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 15,
        "mass": 122,
        "clones": 2,
        "snippet": "{\n        String s = readString();\n        if (s == null) {\n            return null;\n        }\n        s = s.trim();\n        if (s.length() == 0) {\n            return null;\n        }\n        return ValuePool.getInt(Integer.parseInt(s));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputText.java",
    "fromLine": 291,
    "toLine": 305
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputText.java",
    "fromLine": 274,
    "toLine": 288
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 15,
        "mass": 122,
        "clones": 2,
        "snippet": "{\n        String s = readString();\n        if (s == null) {\n            return null;\n        }\n        s = s.trim();\n        if (s.length() == 0) {\n            return null;\n        }\n        return ValuePool.getInt(Integer.parseInt(s));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputText.java",
    "fromLine": 291,
    "toLine": 305
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputText.java",
    "fromLine": 274,
    "toLine": 288
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 11,
        "mass": 162,
        "clones": 2,
        "snippet": "catch (Exception e) {\n            Object[] messages = new Object[] {\n                new Integer(field), e.toString()\n            };\n            throw new IOException(\n                Error.getMessage(\n                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));\n        }\n        return s;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java",
    "fromLine": 140,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/rowio/RowInputText.java",
    "fromLine": 181,
    "toLine": 191
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/ClobType.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 84,
        "clones": 2,
        "snippet": "{\n            ClobData clob = session.createClob(((String) a).length());\n            clob.setString(session, 0, (String) a);\n            return clob;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/ClobType.java",
    "fromLine": 159,
    "toLine": 164
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/CharacterType.java",
    "fromLine": 502,
    "toLine": 508
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/IntValueHashMap.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 32,
        "mass": 205,
        "clones": 2,
        "snippet": "if (i == value) {\n                return objectKeyTable[it.getLookup()];\n            }\n        }\n        return null;\n    }\n    public boolean put(Object key, long value) {\n        if (key == null) {\n            throw new NoSuchElementException();\n        }\n        int oldSize = size();\n        super.addOrRemove(0, value, key, null, false);\n        return oldSize != size();\n    }\n    public boolean remove(Object key) {\n        int oldSize = size();\n        super.addOrRemove(0, 0, key, null, true);\n        return oldSize != size();\n    }\n    public boolean containsKey(Object key) {\n        return super.containsKey(key);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongValueHashMap.java",
    "fromLine": 116,
    "toLine": 147
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntValueHashMap.java",
    "fromLine": 117,
    "toLine": 148
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 8,
        "mass": 129,
        "clones": 3,
        "snippet": "{\n        Iterator it = t.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            put(key, t.get(key));\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/IntValueHashMap.java",
    "fromLine": 259,
    "toLine": 266
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/HashMap.java",
    "fromLine": 85,
    "toLine": 92
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/LongValueHashMap.java",
    "fromLine": 210,
    "toLine": 217
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementSimple.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 15,
        "mass": 207,
        "clones": 2,
        "snippet": "{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n        }\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSimple.java",
    "fromLine": 121,
    "toLine": 135
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSchemaDefinition.java",
    "fromLine": 59,
    "toLine": 73
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 13,
        "mass": 141,
        "clones": 4,
        "snippet": "{\n        StringBuffer sb = new StringBuffer();\n        sb.append('\\n');\n        for (int i = 0; i < blanks; i++) {\n            sb.append(' ');\n        }\n        sb.append(Tokens.T_STATEMENT);\n        return sb.toString();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSet.java",
    "fromLine": 270,
    "toLine": 282
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementExpression.java",
    "fromLine": 117,
    "toLine": 129
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCompound.java",
    "fromLine": 201,
    "toLine": 213
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSimple.java",
    "fromLine": 106,
    "toLine": 118
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 9,
        "mass": 205,
        "clones": 2,
        "snippet": "if (columnMap == null) {\n                data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,\n                        visibleColumnCount);\n            } else {\n                Object[] newData = new Object[visibleColumnCount];\n                ArrayUtil.projectRow(data, columnMap, newData);\n                data = newData;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java",
    "fromLine": 204,
    "toLine": 212
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java",
    "fromLine": 199,
    "toLine": 207
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 10,
        "mass": 323,
        "clones": 2,
        "snippet": "{\n        if (size == table.length) {\n            int        newSize  = size == 0 ? 4\n            Object[][] newTable = new Object[newSize][];\n            System.arraycopy(table, 0, newTable, 0, size);\n            table = newTable;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java",
    "fromLine": 641,
    "toLine": 650
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java",
    "fromLine": 262,
    "toLine": 271
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 8,
        "volume": 99,
        "mass": 437,
        "clones": 2,
        "snippet": "out.write(buf, 0, count);\n        }\n    }\n    public synchronized int capacity() throws IOException {\n        checkFreed();\n        return buf.length;\n    }\n    public synchronized void reset() throws IOException {\n        checkClosed();\n        count = 0;\n    }\n    public synchronized void trimToSize() throws IOException {\n        checkFreed();\n        if (buf.length > count) {\n            buf = copyOf(buf, count);\n        }\n    }\n    public synchronized char[] toCharArray() throws IOException {\n        checkFreed();\n        return copyOf(buf, count);\n    }\n    public synchronized int size() throws IOException {\n        return count;\n    }\n    public synchronized void setSize(int newSize) {\n        if (newSize < 0) {\n            throw new ArrayIndexOutOfBoundsException(newSize);\n        } else if (newSize > buf.length) {\n            buf = copyOf(buf, Math.max(buf.length << 1, newSize));\n        }\n        count = newSize;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ClosableCharArrayWriter.java",
    "fromLine": 239,
    "toLine": 337
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java",
    "fromLine": 203,
    "toLine": 302
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/DataFileCache.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 10,
        "volume": 20,
        "mass": 194,
        "clones": 2,
        "snippet": "CachedObject object;\n        if (pos < 0) {\n            return null;\n        }\n        readLock.lock();\n        try {\n            object = cache.get(pos);\n            if (object != null) {\n                if (keep) {\n                    object.keepInMemory(true);\n                }\n                return object;\n            }\n        } finally {\n            readLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/DataFileCache.java",
    "fromLine": 1018,
    "toLine": 1037
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/DataFileCache.java",
    "fromLine": 991,
    "toLine": 1010
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 20,
        "mass": 194,
        "clones": 2,
        "snippet": "CachedObject object;\n        if (pos < 0) {\n            return null;\n        }\n        readLock.lock();\n        try {\n            object = cache.get(pos);\n            if (object != null) {\n                if (keep) {\n                    object.keepInMemory(true);\n                }\n                return object;\n            }\n        } finally {\n            readLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/DataFileCache.java",
    "fromLine": 1018,
    "toLine": 1037
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/DataFileCache.java",
    "fromLine": 991,
    "toLine": 1010
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 73,
        "volume": 190,
        "mass": 5130,
        "clones": 2,
        "snippet": "{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,]
}
,
{
    "metadata": {
        "cc": 73,
        "volume": 190,
        "mass": 5130,
        "clones": 2,
        "snippet": "{\n        try {\n            super.init(config);\n            rowOut = new RowOutputBinary(BUFFER_SIZE, 1);\n            rowIn  = new RowInputBinary(rowOut);\n        } catch (ServletException e) {\n            log(e.toString());\n        }\n        String dbStr = getInitParameter(\"hsqldb.server.database\");\n        if (dbStr == null) {\n            dbStr = \".\";\n        }\n        String useWebInfStr =\n            getInitParameter(\"hsqldb.server.use_web-inf_path\");\n        if (!dbStr.equals(\".\") && \"true\".equalsIgnoreCase(useWebInfStr)) {\n            dbStr = getServletContext().getRealPath(\"\/\") + \"WEB-INF\/\" + dbStr;\n        }\n        HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false);\n        log(\"Database filename = \" + dbStr);\n        if (dbURL == null) {\n            errorStr = \"Bad Database name\";\n        } else {\n            dbPath = dbURL.getProperty(\"database\");\n            dbType = dbURL.getProperty(\"connection_type\");\n            try {\n                DatabaseManager.getDatabase(dbType, dbPath, dbURL);\n            } catch (HsqlException e) {\n                errorStr = e.getMessage();\n            }\n        }\n        if (errorStr == null) {\n            log(\"Initialization completed.\");\n        } else {\n            log(\"Database could not be initialised.\");\n            log(errorStr);\n        }\n    }\n    private static long lModified = 0;\n    protected long getLastModified(HttpServletRequest req) {\n        return lModified++;\n    }\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response)\n                      throws IOException, ServletException {\n        String query = request.getQueryString();\n        if ((query == null) || (query.length() == 0)) {\n            response.setContentType(\"text\/html\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            PrintWriter out = response.getWriter();\n            out.println(\n                \"<html><head><title>HSQL Database Engine Servlet<\/title>\");\n            out.println(\"<\/head><body><h1>HSQL Database Engine Servlet<\/h1>\");\n            out.println(\"The servlet is running.<p>\");\n            if (errorStr == null) {\n                out.println(\"The database is also running.<p>\");\n                out.println(\"Database name: \" + dbType + dbPath + \"<p>\");\n                out.println(\"Queries processed: \" + iQueries + \"<p>\");\n            } else {\n                out.println(\"<h2>The database is not running!<\/h2>\");\n                out.println(\"The error message is:<p>\");\n                out.println(errorStr);\n            }\n            out.println(\"<\/body><\/html>\");\n        }\n    }\n    public void doPost(HttpServletRequest request,\n                       HttpServletResponse response)\n                       throws IOException, ServletException {\n        synchronized (this) {\n            DataInputStream  inStream = null;\n            DataOutputStream dataOut  = null;\n            try {\n                inStream = new DataInputStream(request.getInputStream());\n                int  databaseID = inStream.readInt();\n                long sessionID  = inStream.readLong();\n                int  mode       = inStream.readByte();\n                Session session = DatabaseManager.getSession(databaseID,\n                    sessionID);\n                Result resultIn = Result.newResult(session, mode, inStream,\n                                                   rowIn);\n                resultIn.setDatabaseId(databaseID);\n                resultIn.setSessionId(sessionID);\n                Result resultOut;\n                int    type = resultIn.getType();\n                if (type == ResultConstants.CONNECT) {\n                    try {\n                        session = DatabaseManager.newSession(\n                            dbType, dbPath, resultIn.getMainString(),\n                            resultIn.getSubString(), new HsqlProperties(),\n                            resultIn.getZoneString(),\n                            resultIn.getUpdateCount());\n                        resultIn.readAdditionalResults(null, inStream, rowIn);\n                        resultOut = Result.newConnectionAcknowledgeResponse(\n                            session.getDatabase(), session.getId(),\n                            session.getDatabase().getDatabaseID());\n                    } catch (HsqlException e) {\n                        resultOut = Result.newErrorResult(e);\n                    }\n                } else if (type == ResultConstants.DISCONNECT\n                           || type == ResultConstants.RESETSESSION) {\n                    response.setHeader(\"Cache-Control\", \"no-cache\");    \/\/ DB-traffic should not be cached by proxy's\n                    response.setContentType(\"application\/octet-stream\");\n                    response.setContentLength(6);\n                    dataOut = new DataOutputStream(response.getOutputStream());\n                    dataOut.writeByte(ResultConstants.DISCONNECT);      \/\/ Mode\n                    dataOut.writeInt(4);                                \/\/Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)\n                    dataOut.writeByte(ResultConstants.NONE);            \/\/ No Additional results\n                    dataOut.close();\n                    return;\n                } else {\n                    int  dbId      = resultIn.getDatabaseId();\n                    long sessionId = resultIn.getSessionId();\n                    session = DatabaseManager.getSession(dbId, sessionId);\n                    resultIn.readLobResults(session, inStream, rowIn);\n                    resultOut = session.execute(resultIn);\n                }\n                HsqlByteArrayOutputStream memStream =\n                    new HsqlByteArrayOutputStream();\n                DataOutputStream tempOutput = new DataOutputStream(memStream);\n                resultOut.write(session, tempOutput, rowOut);\n                response.setHeader(\"Cache-Control\", \"no-cache\");        \/\/ DB-traffic should not be cached by proxy's\n                response.setContentType(\"application\/octet-stream\");\n                response.setContentLength(memStream.size());\n                dataOut = new DataOutputStream(response.getOutputStream());\n                memStream.writeTo(dataOut);\n                iQueries++;\n            } catch (HsqlException e) {}\n            finally {\n                if (dataOut != null) {\n                    dataOut.close();\n                }\n                if (inStream != null) {\n                    inStream.close();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java",
    "fromLine": 149,
    "toLine": 338
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/server/WebServer.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 14,
        "volume": 151,
        "mass": 907,
        "clones": 2,
        "snippet": "{\n        super(ServerConstants.SC_PROTOCOL_HTTP);\n    }\n    public static void main(String[] args) {\n        HsqlProperties argProps = null;\n        argProps = HsqlProperties.argArrayToProps(args,\n                ServerProperties.sc_key_prefix);\n        String[] errors = argProps.getErrorKeys();\n        if (errors.length != 0) {\n            System.out.println(\"no value for argument:\" + errors[0]);\n            printHelp(\"webserver.help\");\n            return;\n        }\n        String propsPath = argProps.getProperty(ServerProperties.sc_key_props);\n        String propsExtension = \"\";\n        if (propsPath == null) {\n            propsPath      = \"webserver\";\n            propsExtension = \".properties\";\n        }\n        propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);\n        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(\n            ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension);\n        ServerProperties props =\n            fileProps == null\n            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)\n            : fileProps;\n        props.addProperties(argProps);\n        ServerConfiguration.translateDefaultDatabaseProperty(props);\n        ServerConfiguration.translateDefaultNoSystemExitProperty(props);\n        ServerConfiguration.translateAddressProperty(props);\n        Server server = new WebServer();\n        try {\n            server.setProperties(props);\n        } catch (Exception e) {\n            server.printError(\"Failed to set properties\");\n            server.printStackTrace(e);\n            return;\n        }\n        server.print(\"Startup sequence initiated from main() method\");\n        if (fileProps != null) {\n            server.print(\"Loaded properties from [\" + propsPath\n                         + \".properties]\");\n        } else {\n            server.print(\"Could not load properties from file\");\n            server.print(\"Using cli\/default properties only\");\n        }\n        server.start();\n    }\n    public String getDefaultWebPage() {\n        return serverProperties.getProperty(\n            ServerProperties.sc_key_web_default_page);\n    }\n    public String getHelpString() {\n        return ResourceBundleHandler.getString(serverBundleHandle,\n                                               \"webserver.help\");\n    }\n    public String getProductName() {\n        return \"HSQLDB web server\";\n    }\n    public String getProtocol() {\n        return isTls() ? \"HTTPS\"\n                       : \"HTTP\";\n    }\n    public String getWebRoot() {\n        return serverProperties.getProperty(ServerProperties.sc_key_web_root);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/WebServer.java",
    "fromLine": 128,
    "toLine": 278
}
,
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/server/WebServer.java",
    "fromLine": 128,
    "toLine": 278
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 14,
        "volume": 31,
        "mass": 339,
        "clones": 2,
        "snippet": "if (!other.isDateTimeType()) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n                DateTimeType otherType = (DateTimeType) other;\n                if (otherType.startIntervalType > endIntervalType\n                        || startIntervalType > otherType.endIntervalType) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n                int     newType = typeCode;\n                int     scale   = this.scale > otherType.scale ? this.scale\n                                                               : otherType\n                                                                   .scale;\n                boolean zone    = withTimeZone || otherType.withTimeZone;\n                int startType = otherType.startIntervalType\n                                > startIntervalType ? startIntervalType\n                                                    : otherType\n                                                        .startIntervalType;\n                if (startType == Types.SQL_INTERVAL_HOUR) {\n                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                                   : Types.SQL_TIME;\n                } else {\n                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                                   : Types.SQL_TIMESTAMP;\n                }\n                return getDateTimeType(newType, scale);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 335,
    "toLine": 365
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 286,
    "toLine": 314
}
,]
}
,
{
    "metadata": {
        "cc": 14,
        "volume": 31,
        "mass": 339,
        "clones": 2,
        "snippet": "if (!other.isDateTimeType()) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n                DateTimeType otherType = (DateTimeType) other;\n                if (otherType.startIntervalType > endIntervalType\n                        || startIntervalType > otherType.endIntervalType) {\n                    throw Error.error(ErrorCode.X_42562);\n                }\n                int     newType = typeCode;\n                int     scale   = this.scale > otherType.scale ? this.scale\n                                                               : otherType\n                                                                   .scale;\n                boolean zone    = withTimeZone || otherType.withTimeZone;\n                int startType = otherType.startIntervalType\n                                > startIntervalType ? startIntervalType\n                                                    : otherType\n                                                        .startIntervalType;\n                if (startType == Types.SQL_INTERVAL_HOUR) {\n                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE\n                                   : Types.SQL_TIME;\n                } else {\n                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE\n                                   : Types.SQL_TIMESTAMP;\n                }\n                return getDateTimeType(newType, scale);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 335,
    "toLine": 365
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 286,
    "toLine": 314
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 112,
        "clones": 2,
        "snippet": "{\n                        TimeData ti = (TimeData) a;\n                        long seconds = session.getCurrentDate().getSeconds()\n                                       + ti.getSeconds()\n                                       - session.getZoneSeconds();\n                        return new TimestampData(seconds,\n                                                 scaleNanos(ti.getNanos()),\n                                                 session.getZoneSeconds());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 692,
    "toLine": 700
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 658,
    "toLine": 666
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 112,
        "clones": 2,
        "snippet": "{\n                        TimeData ti = (TimeData) a;\n                        long seconds = session.getCurrentDate().getSeconds()\n                                       + ti.getSeconds()\n                                       - session.getZoneSeconds();\n                        return new TimestampData(seconds,\n                                                 scaleNanos(ti.getNanos()),\n                                                 session.getZoneSeconds());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 692,
    "toLine": 700
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 658,
    "toLine": 666
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 11,
        "mass": 224,
        "clones": 2,
        "snippet": "if (a == null || b == null) {\n            return null;\n        }\n        if (otherType.isNumberType()) {\n            if (typeCode == Types.SQL_DATE) {\n                b = ((NumberType) otherType).floor(b);\n            }\n            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(\n                IntervalSecondData.oneDay, b);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 1121,
    "toLine": 1131
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 1071,
    "toLine": 1081
}
,]
}
,
{
    "metadata": {
        "cc": 7,
        "volume": 11,
        "mass": 224,
        "clones": 2,
        "snippet": "if (a == null || b == null) {\n            return null;\n        }\n        if (otherType.isNumberType()) {\n            if (typeCode == Types.SQL_DATE) {\n                b = ((NumberType) otherType).floor(b);\n            }\n            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(\n                IntervalSecondData.oneDay, b);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 1121,
    "toLine": 1131
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/DateTimeType.java",
    "fromLine": 1071,
    "toLine": 1081
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 7,
        "mass": 181,
        "clones": 2,
        "snippet": "        if (d.width >= 640) {\n            setLocation((d.width - size.width) \/ 2,\n                        (d.height - size.height) \/ 2);\n        } else {\n            setLocation(0, 0);\n            setSize(d);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java",
    "fromLine": 255,
    "toLine": 261
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialog.java",
    "fromLine": 256,
    "toLine": 262
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 145,
        "clones": 2,
        "snippet": "if (setting != null) {\n                mName.setText(setting.getName());\n                mDriver.setText(setting.getDriver());\n                mURL.setText(setting.getUrl());\n                mUser.setText(setting.getUser());\n                mPassword.setText(setting.getPassword());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java",
    "fromLine": 359,
    "toLine": 364
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialog.java",
    "fromLine": 159,
    "toLine": 164
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 7
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 24,
        "mass": 425,
        "clones": 2,
        "snippet": "            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 236,
    "toLine": 259
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 191,
    "toLine": 214
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 24,
        "mass": 425,
        "clones": 2,
        "snippet": "            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 236,
    "toLine": 259
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 191,
    "toLine": 214
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 33,
        "mass": 360,
        "clones": 3,
        "snippet": "long min;\n        long max;\n        switch (dataType.typeCode) {\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 335,
    "toLine": 367
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 506,
    "toLine": 538
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 465,
    "toLine": 497
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 33,
        "mass": 360,
        "clones": 3,
        "snippet": "long min;\n        long max;\n        switch (dataType.typeCode) {\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 335,
    "toLine": 367
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 506,
    "toLine": 538
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 465,
    "toLine": 497
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 33,
        "mass": 360,
        "clones": 3,
        "snippet": "long min;\n        long max;\n        switch (dataType.typeCode) {\n            case Types.TINYINT :\n                max = Byte.MAX_VALUE;\n                min = Byte.MIN_VALUE;\n                break;\n            case Types.SQL_SMALLINT :\n                max = Short.MAX_VALUE;\n                min = Short.MIN_VALUE;\n                break;\n            case Types.SQL_INTEGER :\n                max = Integer.MAX_VALUE;\n                min = Integer.MIN_VALUE;\n                break;\n            case Types.SQL_BIGINT :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                max = Long.MAX_VALUE;\n                min = Long.MIN_VALUE;\n                break;\n            default :\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 335,
    "toLine": 367
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 506,
    "toLine": 538
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 465,
    "toLine": 497
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 24,
        "mass": 425,
        "clones": 2,
        "snippet": "            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 236,
    "toLine": 259
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 191,
    "toLine": 214
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 24,
        "mass": 425,
        "clones": 2,
        "snippet": "            sb.append(Tokens.T_START).append(' ');\n            sb.append(Tokens.T_WITH).append(' ');\n            sb.append(startValue);\n            if (getIncrement() != 1) {\n                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');\n                sb.append(Tokens.T_BY).append(' ');\n                sb.append(getIncrement());\n            }\n            if (!hasDefaultMinMax()) {\n                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');\n                sb.append(getMinValue());\n                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');\n                sb.append(getMaxValue());\n            }\n            if (isCycle()) {\n                sb.append(' ').append(Tokens.T_CYCLE);\n            }\n            if (name == null) {\n                sb.append(Tokens.T_CLOSEBRACKET);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 236,
    "toLine": 259
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/NumberSequence.java",
    "fromLine": 191,
    "toLine": 214
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCArray.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 16,
        "mass": 250,
        "clones": 2,
        "snippet": "RowSetNavigatorClient navigator = new RowSetNavigatorClient();\n        for (int i = (int) position; i < position + count; i++) {\n            Object[] rowData = new Object[2];\n            rowData[0] = Integer.valueOf(i + 1);\n            rowData[1] = data[i];\n            navigator.add(rowData);\n        }\n        Result result = Result.newDataResult(meta);\n        result.setNavigator(navigator);\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java",
    "fromLine": 539,
    "toLine": 554
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCArray.java",
    "fromLine": 585,
    "toLine": 600
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestBase.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 54,
        "volume": 104,
        "mass": 1856,
        "clones": 2,
        "snippet": "{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,]
}
,
{
    "metadata": {
        "cc": 54,
        "volume": 104,
        "mass": 1856,
        "clones": 2,
        "snippet": "{\n        super(name);\n    }\n    public TestBase(String name, String url, boolean isNetwork,\n                    boolean isHTTP) {\n        super(name);\n        this.isNetwork = isNetwork;\n        this.url       = url;\n        this.isHTTP    = isHTTP;\n    }\n    protected void setUp() {\n        if (isNetwork) {\n            if (url == null) {\n                if (isServlet) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8080\/HSQLwebApp\/test\";\n                } else if (isHTTP) {\n                    url = \"jdbc:hsqldb:http:\/\/localhost:8085\/test\";\n                } else {\n                    url = \"jdbc:hsqldb:hsql:\/\/localhost\/test\";\n                }\n            }\n            if (!isServlet) {\n                server = isHTTP ? new WebServer()\n                                : new Server();\n                if (isHTTP) {\n                    server.setPort(8085);\n                }\n                server.setDatabaseName(0, \"test\");\n                server.setDatabasePath(0, dbPath);\n                server.setLogWriter(null);\n                server.setErrWriter(null);\n                server.start();\n            }\n        } else {\n            if (url == null) {\n                url = \"jdbc:hsqldb:\" + dbPath;\n            }\n        }\n        try {\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(this + \".setUp() error: \" + e.getMessage());\n        }\n    }\n    protected void tearDown() {\n        if (isNetwork && !isServlet) {\n            server.stop();\n            server = null;\n        }\n    }\n    Connection newConnection() throws SQLException {\n        return DriverManager.getConnection(url, user, password);\n    }\n    public static void runWithResult(Class testCaseClass, String testName) {\n        try {\n            Constructor ctor = testCaseClass.getConstructor(new Class[]{\n                String.class });\n            TestBase theTest = (TestBase) ctor.newInstance(new Object[]{\n                testName });\n            theTest.runWithResult();\n        } catch (Exception ex) {\n            System.err.println(\"couldn't execute test:\");\n            ex.printStackTrace(System.err);\n        }\n    }\n    public void runWithResult() {\n        TestResult result   = run();\n        String     testName = this.getClass().getName();\n        if (testName.startsWith(\"org.hsqldb.test.\")) {\n            testName = testName.substring(16);\n        }\n        testName += \".\" + getName();\n        int failureCount = result.failureCount();\n        System.out.println(testName + \" failure count: \" + failureCount);\n        java.util.Enumeration failures = result.failures();\n        while (failures.hasMoreElements()) {\n            System.err.println(failures.nextElement());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/doc/verbatim/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestBase.java",
    "fromLine": 87,
    "toLine": 190
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 11
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 11,
        "mass": 126,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.LEFTBRACKET) {\n            read();\n            Expression e1 = XreadNumericValueExpression();\n            readThis(Tokens.RIGHTBRACKET);\n            e = new ExpressionAccessor(e, e1);\n        }\n        return e;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 4908,
    "toLine": 4918
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 2968,
    "toLine": 2978
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 11,
        "mass": 126,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.LEFTBRACKET) {\n            read();\n            Expression e1 = XreadNumericValueExpression();\n            readThis(Tokens.RIGHTBRACKET);\n            e = new ExpressionAccessor(e, e1);\n        }\n        return e;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 4908,
    "toLine": 4918
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 2968,
    "toLine": 2978
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 4,
        "mass": 158,
        "clones": 2,
        "snippet": "{\n                    r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,\n                            r.nodes.length + 1);\n                    r.nodes[r.nodes.length - 1] = e;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 4936,
    "toLine": 4939
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 4696,
    "toLine": 4699
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 4,
        "mass": 158,
        "clones": 2,
        "snippet": "{\n                    r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,\n                            r.nodes.length + 1);\n                    r.nodes[r.nodes.length - 1] = e;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 4936,
    "toLine": 4939
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 4696,
    "toLine": 4699
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 6,
        "mass": 118,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.COMMA) {\n                readThis(Tokens.COMMA);\n            } else if (token.tokenType == Tokens.CLOSEBRACKET) {\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 5425,
    "toLine": 5430
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 5385,
    "toLine": 5390
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 6,
        "mass": 118,
        "clones": 2,
        "snippet": "if (token.tokenType == Tokens.COMMA) {\n                readThis(Tokens.COMMA);\n            } else if (token.tokenType == Tokens.CLOSEBRACKET) {\n                readThis(Tokens.CLOSEBRACKET);\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 5425,
    "toLine": 5430
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 5385,
    "toLine": 5390
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 17,
        "mass": 577,
        "clones": 2,
        "snippet": "if (queryExpression.sortAndSlice == null) {\n                    queryExpression.addSortAndSlice(sortAndSlice);\n                } else {\n                    if (queryExpression.sortAndSlice.hasLimit()) {\n                        if (sortAndSlice.hasLimit()) {\n                            throw Error.error(ErrorCode.X_42549);\n                        }\n                        for (int i = 0; i < sortAndSlice.exprList.size();\n                                i++) {\n                            Expression e =\n                                (Expression) sortAndSlice.exprList.get(i);\n                            queryExpression.sortAndSlice.addOrderExpression(e);\n                        }\n                    } else {\n                        queryExpression.addSortAndSlice(sortAndSlice);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 1109,
    "toLine": 1125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 1017,
    "toLine": 1031
}
,]
}
,
{
    "metadata": {
        "cc": 15,
        "volume": 17,
        "mass": 577,
        "clones": 2,
        "snippet": "if (queryExpression.sortAndSlice == null) {\n                    queryExpression.addSortAndSlice(sortAndSlice);\n                } else {\n                    if (queryExpression.sortAndSlice.hasLimit()) {\n                        if (sortAndSlice.hasLimit()) {\n                            throw Error.error(ErrorCode.X_42549);\n                        }\n                        for (int i = 0; i < sortAndSlice.exprList.size();\n                                i++) {\n                            Expression e =\n                                (Expression) sortAndSlice.exprList.get(i);\n                            queryExpression.sortAndSlice.addOrderExpression(e);\n                        }\n                    } else {\n                        queryExpression.addSortAndSlice(sortAndSlice);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 1109,
    "toLine": 1125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 1017,
    "toLine": 1031
}
,]
}
,
{
    "metadata": {
        "cc": 10,
        "volume": 18,
        "mass": 321,
        "clones": 2,
        "snippet": "HsqlArrayList list = new HsqlArrayList();\n        readThis(Tokens.OPENBRACKET);\n        if (token.tokenType == Tokens.CLOSEBRACKET) {\n            read();\n        } else {\n            while (true) {\n                Expression e = XreadValueExpression();\n                list.add(e);\n                if (token.tokenType == Tokens.COMMA) {\n                    read();\n                } else {\n                    readThis(Tokens.CLOSEBRACKET);\n                    break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 5232,
    "toLine": 5249
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDML.java",
    "fromLine": 1149,
    "toLine": 1166
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 27,
        "mass": 500,
        "clones": 2,
        "snippet": "return e;\n    }\n    Expression XreadIntervalValueExpression() {\n        Expression e = XreadDateTimeIntervalTerm();\n        while (true) {\n            int type;\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n            read();\n            Expression a = e;\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n        return e;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 3363,
    "toLine": 3389
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 3337,
    "toLine": 3363
}
,]
}
,
{
    "metadata": {
        "cc": 12,
        "volume": 27,
        "mass": 500,
        "clones": 2,
        "snippet": "return e;\n    }\n    Expression XreadIntervalValueExpression() {\n        Expression e = XreadDateTimeIntervalTerm();\n        while (true) {\n            int type;\n            if (token.tokenType == Tokens.PLUS) {\n                type = OpTypes.ADD;\n            } else if (token.tokenType == Tokens.MINUS) {\n                type = OpTypes.SUBTRACT;\n            } else {\n                break;\n            }\n            read();\n            Expression a = e;\n            e = XreadDateTimeIntervalTerm();\n            e = new ExpressionArithmetic(type, a, e);\n        }\n        return e;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 3363,
    "toLine": 3389
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ParserDQL.java",
    "fromLine": 3337,
    "toLine": 3363
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 13,
        "volume": 19,
        "mass": 343,
        "clones": 2,
        "snippet": "            c.commit();\n        } finally {\n            if (st != null) try {\n                st.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                st = null;  \/\/ Encourage GC\n            }\n            if (c != null) try {\n                c.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                c = null;  \/\/ Encourage GC\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java",
    "fromLine": 154,
    "toLine": 172
}
,
{
	"loc": "project://hsqldb/integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java",
    "fromLine": 119,
    "toLine": 137
}
,]
}
,
{
    "metadata": {
        "cc": 13,
        "volume": 19,
        "mass": 343,
        "clones": 2,
        "snippet": "            c.commit();\n        } finally {\n            if (st != null) try {\n                st.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                st = null;  \/\/ Encourage GC\n            }\n            if (c != null) try {\n                c.close();\n            } catch (SQLException se) {\n                log.error(\"Failed to close emulation database setup Connection\",\n                        se);\n            } finally {\n                c = null;  \/\/ Encourage GC\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java",
    "fromLine": 154,
    "toLine": 172
}
,
{
	"loc": "project://hsqldb/integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java",
    "fromLine": 119,
    "toLine": 137
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 11,
        "mass": 136,
        "clones": 2,
        "snippet": "if (idx < 0) {\n                    e.isSingleColumnEqual     = true;\n                    e.isSingleColumnCondition = true;\n                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());\n                    continue;\n                }\n                if (idx >= firstOuterJoinIndex) {\n                    continue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 446,
    "toLine": 456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 430,
    "toLine": 440
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 11,
        "mass": 136,
        "clones": 2,
        "snippet": "if (idx < 0) {\n                    e.isSingleColumnEqual     = true;\n                    e.isSingleColumnCondition = true;\n                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());\n                    continue;\n                }\n                if (idx >= firstOuterJoinIndex) {\n                    continue;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 446,
    "toLine": 456
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 430,
    "toLine": 440
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 6,
        "mass": 169,
        "clones": 2,
        "snippet": "{\n                    int index = rangeVarSet.getIndex(range);\n                    if (index > 0) {\n                        rangeVariables[index].isLeftJoin      = false;\n                        rangeVariables[index - 1].isRightJoin = false;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 189,
    "toLine": 194
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 177,
    "toLine": 182
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 6,
        "mass": 169,
        "clones": 2,
        "snippet": "{\n                    int index = rangeVarSet.getIndex(range);\n                    if (index > 0) {\n                        rangeVariables[index].isLeftJoin      = false;\n                        rangeVariables[index - 1].isRightJoin = false;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 189,
    "toLine": 194
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/RangeVariableResolver.java",
    "fromLine": 177,
    "toLine": 182
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 12
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 4,
        "mass": 77,
        "clones": 2,
        "snippet": "if (nodes[2].dataType.typeCode == Types.SQL_TIME\n                                || nodes[2].dataType.typeCode\n                                   == Types.SQL_TIME_WITH_TIME_ZONE) {\n                            throw Error.error(ErrorCode.X_42563);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2383,
    "toLine": 2386
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2361,
    "toLine": 2364
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 4,
        "mass": 77,
        "clones": 2,
        "snippet": "if (nodes[2].dataType.typeCode == Types.SQL_TIME\n                                || nodes[2].dataType.typeCode\n                                   == Types.SQL_TIME_WITH_TIME_ZONE) {\n                            throw Error.error(ErrorCode.X_42563);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2383,
    "toLine": 2386
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2361,
    "toLine": 2364
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 6,
        "mass": 129,
        "clones": 4,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            sb.append(nodes[i].getSQL());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 3679,
    "toLine": 3684
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 321,
    "toLine": 326
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 351,
    "toLine": 356
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 335,
    "toLine": 340
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 66,
        "clones": 2,
        "snippet": "parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 632,
    "toLine": 637
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 609,
    "toLine": 614
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 6,
        "mass": 66,
        "clones": 2,
        "snippet": "parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.CLOSEBRACKET\n                };\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 632,
    "toLine": 637
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 609,
    "toLine": 614
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 3,
        "mass": 137,
        "clones": 10,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n            if (nodes[i] != null) {\n                nodes[i].resolveTypes(session, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAggregate.java",
    "fromLine": 226,
    "toLine": 228
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLogical.java",
    "fromLine": 647,
    "toLine": 649
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2180,
    "toLine": 2182
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionTable.java",
    "fromLine": 99,
    "toLine": 101
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Expression.java",
    "fromLine": 1159,
    "toLine": 1161
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionLike.java",
    "fromLine": 123,
    "toLine": 125
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
    "fromLine": 255,
    "toLine": 257
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionSQL.java",
    "fromLine": 1202,
    "toLine": 1204
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionAccessor.java",
    "fromLine": 79,
    "toLine": 81
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/ExpressionOp.java",
    "fromLine": 379,
    "toLine": 381
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 10,
        "mass": 163,
        "clones": 2,
        "snippet": "TimestampData ts;\n                if (nodes[0] == null) {\n                    ts = session.getCurrentTimestamp(true);\n                } else {\n                    if (data[0] == null) {\n                        return null;\n                    }\n                    ts = (TimestampData) data[0];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 1381,
    "toLine": 1390
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 1364,
    "toLine": 1373
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 10,
        "mass": 163,
        "clones": 2,
        "snippet": "TimestampData ts;\n                if (nodes[0] == null) {\n                    ts = session.getCurrentTimestamp(true);\n                } else {\n                    if (data[0] == null) {\n                        return null;\n                    }\n                    ts = (TimestampData) data[0];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 1381,
    "toLine": 1390
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 1364,
    "toLine": 1373
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 11,
        "mass": 120,
        "clones": 2,
        "snippet": "parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,\n                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,\n                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,\n                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,\n                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,\n                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,\n                    Tokens.CLOSEBRACKET\n                };\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 704,
    "toLine": 714
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 690,
    "toLine": 700
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 11,
        "mass": 120,
        "clones": 2,
        "snippet": "parseList = new short[] {\n                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,\n                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,\n                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,\n                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,\n                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,\n                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,\n                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,\n                    Tokens.CLOSEBRACKET\n                };\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 704,
    "toLine": 714
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 690,
    "toLine": 700
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 11,
        "mass": 302,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i].dataType == null) {\n                        nodes[i].dataType = Type.SQL_VARCHAR;\n                    } else if (!nodes[i].dataType.isCharacterType()) {\n                        throw Error.error(ErrorCode.X_42561);\n                    }\n                }\n                dataType = Type.SQL_VARCHAR_DEFAULT;\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 3083,
    "toLine": 3093
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2977,
    "toLine": 2987
}
,]
}
,
{
    "metadata": {
        "cc": 9,
        "volume": 11,
        "mass": 302,
        "clones": 2,
        "snippet": "for (int i = 0; i < nodes.length; i++) {\n                    if (nodes[i].dataType == null) {\n                        nodes[i].dataType = Type.SQL_VARCHAR;\n                    } else if (!nodes[i].dataType.isCharacterType()) {\n                        throw Error.error(ErrorCode.X_42561);\n                    }\n                }\n                dataType = Type.SQL_VARCHAR_DEFAULT;\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 3083,
    "toLine": 3093
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/FunctionCustom.java",
    "fromLine": 2977,
    "toLine": 2987
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 16,
        "mass": 150,
        "clones": 2,
        "snippet": "if (result.isError()) {\n                return result;\n            }\n            if (offset + dataLength > length) {\n                length = offset + dataLength;\n                result = setLength(lobID, length);\n                if (result.isError()) {\n                    return result;\n                }\n            }\n            return ResultLob.newLobSetResponse(lobID, length);\n        } finally {\n            writeLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1633,
    "toLine": 1648
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1563,
    "toLine": 1578
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 16,
        "mass": 150,
        "clones": 2,
        "snippet": "if (result.isError()) {\n                return result;\n            }\n            if (offset + dataLength > length) {\n                length = offset + dataLength;\n                result = setLength(lobID, length);\n                if (result.isError()) {\n                    return result;\n                }\n            }\n            return ResultLob.newLobSetResponse(lobID, length);\n        } finally {\n            writeLock.unlock();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1633,
    "toLine": 1648
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1563,
    "toLine": 1578
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 185,
        "clones": 2,
        "snippet": "if (blockAddresses[i][LOBS.BLOCK_COUNT]\n                    + blockAddresses[i][LOBS.BLOCK_OFFSET] > blockLimit) {\n                blockCount -= (blockAddresses[i][LOBS.BLOCK_COUNT]\n                               + blockAddresses[i][LOBS.BLOCK_OFFSET]\n                               - blockLimit);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1320,
    "toLine": 1324
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1286,
    "toLine": 1290
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 5,
        "mass": 185,
        "clones": 2,
        "snippet": "if (blockAddresses[i][LOBS.BLOCK_COUNT]\n                    + blockAddresses[i][LOBS.BLOCK_OFFSET] > blockLimit) {\n                blockCount -= (blockAddresses[i][LOBS.BLOCK_COUNT]\n                               + blockAddresses[i][LOBS.BLOCK_OFFSET]\n                               - blockLimit);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1320,
    "toLine": 1324
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1286,
    "toLine": 1290
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 11,
        "mass": 211,
        "clones": 2,
        "snippet": "{\n            Object[] data = getLobHeader(lobID);\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n            return ResultLob.newLobSetResponse(lobID, length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1154,
    "toLine": 1164
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 672,
    "toLine": 682
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 11,
        "mass": 211,
        "clones": 2,
        "snippet": "{\n            Object[] data = getLobHeader(lobID);\n            if (data == null) {\n                throw Error.error(ErrorCode.X_0F502);\n            }\n            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();\n            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();\n            return ResultLob.newLobSetResponse(lobID, length);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 1154,
    "toLine": 1164
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobManager.java",
    "fromLine": 672,
    "toLine": 682
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 15,
        "mass": 496,
        "clones": 2,
        "snippet": "if (columnType.equals(\"SERIAL\")) {\n            String SeqName = new String(\"_\" + columnDesc.getString(4)\n                                        + \"_seq\");\n            int spaceleft = 31 - SeqName.length();\n            if (t.Stmts.sDestTable.length() > spaceleft) {\n                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)\n                          + SeqName;\n            } else {\n                SeqName = t.Stmts.sDestTable + SeqName;\n            }\n            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";\n            t.Stmts.sDestDrop += DropSequence;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/OracleTransferHelper.java",
    "fromLine": 98,
    "toLine": 112
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java",
    "fromLine": 120,
    "toLine": 134
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 3
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 5,
        "volume": 7,
        "mass": 144,
        "clones": 3,
        "snippet": "if (cs.getCompileTimestamp()\n                    < database.schemaManager.getSchemaChangeTimestamp()) {\n                cs = session.statementManager.getStatement(session, cs);\n                session.sessionContext.currentStatement = cs;\n                if (cs == null) {\n                    return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 491,
    "toLine": 497
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 286,
    "toLine": 292
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 725,
    "toLine": 731
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 10,
        "mass": 140,
        "clones": 3,
        "snippet": "            session.actionTimestamp         = getNextGlobalChangeTimestamp();\n            session.transactionEndTimestamp = session.actionTimestamp;\n            endTransaction(session);\n            for (int i = 0; i < limit; i++) {\n                RowAction action = (RowAction) session.rowActionList.get(i);\n                action.commit(session);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 122,
    "toLine": 131
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 98,
    "toLine": 107
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 167,
    "toLine": 176
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 18,
        "mass": 352,
        "clones": 3,
        "snippet": "{\n            writeLock.unlock();\n        }\n    }\n    public void rollbackSavepoint(Session session, int index) {\n        long timestamp = session.sessionContext.savepointTimestamps.get(index);\n        Integer oi = (Integer) session.sessionContext.savepoints.get(index);\n        int     start  = oi.intValue();\n        while (session.sessionContext.savepoints.size() > index + 1) {\n            session.sessionContext.savepoints.remove(\n                session.sessionContext.savepoints.size() - 1);\n            session.sessionContext.savepointTimestamps.removeLast();\n        }\n        rollbackPartial(session, start, timestamp);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
    "fromLine": 184,
    "toLine": 201
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManager2PL.java",
    "fromLine": 134,
    "toLine": 151
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
    "fromLine": 246,
    "toLine": 263
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestKarl.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 15,
        "mass": 338,
        "clones": 2,
        "snippet": "int col_count = rs.getMetaData().getColumnCount();\n        for (int i = 1; i <= col_count; i++) {\n            System.out.print(rs.getMetaData().getColumnLabel(i) + \"\\t\");\n        }\n        System.out.println(\"\");\n        while (rs.next()) {\n            for (int i = 1; i <= col_count; i++) {\n                System.out.print(rs.getObject(i));\n                System.out.print(\"\\t\");\n            }\n            System.out.println(\"\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestKarl.java",
    "fromLine": 267,
    "toLine": 281
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestKarl.java",
    "fromLine": 232,
    "toLine": 246
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 15,
        "mass": 338,
        "clones": 2,
        "snippet": "int col_count = rs.getMetaData().getColumnCount();\n        for (int i = 1; i <= col_count; i++) {\n            System.out.print(rs.getMetaData().getColumnLabel(i) + \"\\t\");\n        }\n        System.out.println(\"\");\n        while (rs.next()) {\n            for (int i = 1; i <= col_count; i++) {\n                System.out.print(rs.getObject(i));\n                System.out.print(\"\\t\");\n            }\n            System.out.println(\"\");\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestKarl.java",
    "fromLine": 267,
    "toLine": 281
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestKarl.java",
    "fromLine": 232,
    "toLine": 246
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 178,
        "clones": 7,
        "snippet": "{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "fromLine": 366,
    "toLine": 370
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 754,
    "toLine": 759
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 949,
    "toLine": 954
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 1708,
    "toLine": 1713
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2573,
    "toLine": 2577
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "fromLine": 953,
    "toLine": 957
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2728,
    "toLine": 2732
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/types/RowType.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 4,
        "volume": 20,
        "mass": 258,
        "clones": 2,
        "snippet": "{\n            return this;\n        }\n        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n        return new RowType(newTypes);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/RowType.java",
    "fromLine": 333,
    "toLine": 352
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/RowType.java",
    "fromLine": 305,
    "toLine": 324
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 20,
        "mass": 258,
        "clones": 2,
        "snippet": "{\n            return this;\n        }\n        if (!other.isRowType()) {\n            throw Error.error(ErrorCode.X_42562);\n        }\n        Type[] newTypes   = new Type[dataTypes.length];\n        Type[] otherTypes = ((RowType) other).getTypesArray();\n        if (dataTypes.length != otherTypes.length) {\n            throw Error.error(ErrorCode.X_42564);\n        }\n        for (int i = 0; i < dataTypes.length; i++) {\n            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);\n        }\n        return new RowType(newTypes);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/types/RowType.java",
    "fromLine": 333,
    "toLine": 352
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/types/RowType.java",
    "fromLine": 305,
    "toLine": 324
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 17,
        "volume": 17,
        "mass": 158,
        "clones": 2,
        "snippet": "switch (targetType.typeCode) {\n            case Types.SQL_NUMERIC :\n            case Types.SQL_DECIMAL :\n                break;\n            case Types.TINYINT :\n            case Types.SQL_SMALLINT :\n            case Types.SQL_INTEGER :\n            case Types.SQL_BIGINT :\n                targetType = Type.SQL_DECIMAL;\n                break;\n            case Types.SQL_DOUBLE :\n            default :\n                targetType = Type.SQL_DECIMAL_DEFAULT;\n                break;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 1989,
    "toLine": 2005
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 983,
    "toLine": 999
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 15,
        "mass": 139,
        "clones": 2,
        "snippet": "{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            if (cal != null) {\n                millis = HsqlDateTime.convertMillisToCalendar(calendar,\n                        millis);\n            }\n        }\n        Timestamp ts = new Timestamp(millis);\n        ts.setNanos(t.getNanos());\n        return ts;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 4928,
    "toLine": 4942
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 1408,
    "toLine": 1422
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 100,
        "clones": 2,
        "snippet": "{\n            Calendar calendar = cal == null ? session.getCalendar()\n                    : cal;\n            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);\n            millis = HsqlDateTime.getNormalisedTime(millis);\n        }\n        return new Time(millis);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 4821,
    "toLine": 4829
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 1348,
    "toLine": 1356
}
,]
}
,
{
    "metadata": {
        "cc": 8,
        "volume": 13,
        "mass": 242,
        "clones": 2,
        "snippet": "if (o == null) {\n            return null;\n        }\n        if (o instanceof ClobDataID) {\n            return ((ClobDataID) o).getCharacterStream(session);\n        } else if (o instanceof Clob) {\n            return ((Clob) o).getCharacterStream();\n        } else if (o instanceof String) {\n            return new StringReader((String) o);\n        }\n        throw JDBCUtil.sqlException(ErrorCode.X_42561);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
    "fromLine": 1924,
    "toLine": 1936
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
    "fromLine": 4266,
    "toLine": 4278
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 11,
        "mass": 222,
        "clones": 2,
        "snippet": "{\n                Class c =\n                    Class.forName(\"sun.security.action.GetPropertyAction\");\n                Constructor constructor = c.getConstructor(new Class[]{\n                    String.class });\n                java.security.PrivilegedAction a =\n                    (java.security.PrivilegedAction) constructor.newInstance(\n                        new Object[]{ \"user.home\" });\n                homedir =\n                    (String) java.security.AccessController.doPrivileged(a);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java",
    "fromLine": 315,
    "toLine": 325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
    "fromLine": 172,
    "toLine": 180
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 6
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 7,
        "mass": 100,
        "clones": 2,
        "snippet": "{\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n                    return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1506,
    "toLine": 1512
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1489,
    "toLine": 1495
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 7,
        "mass": 100,
        "clones": 2,
        "snippet": "{\n                    token.tokenString = Tokens.T_NOT_EQUALS;\n                    token.tokenType   = Tokens.NOT_EQUALS;\n                    currentPosition   += 2;\n                    token.isDelimiter = true;\n                    return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1506,
    "toLine": 1512
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1489,
    "toLine": 1495
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 10,
        "mass": 105,
        "clones": 2,
        "snippet": "{\n                        token.tokenString = sqlString.substring(tokenStart,\n                                currentPosition + 1);\n                        token.tokenType   = Tokens.X_MALFORMED_NUMERIC;\n                        token.isMalformed = true;\n                        return;\n                    }\n                    hasPoint      = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1018,
    "toLine": 1027
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1002,
    "toLine": 1011
}
,]
}
,
{
    "metadata": {
        "cc": 1,
        "volume": 10,
        "mass": 105,
        "clones": 2,
        "snippet": "{\n                        token.tokenString = sqlString.substring(tokenStart,\n                                currentPosition + 1);\n                        token.tokenType   = Tokens.X_MALFORMED_NUMERIC;\n                        token.isMalformed = true;\n                        return;\n                    }\n                    hasPoint      = true;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1018,
    "toLine": 1027
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1002,
    "toLine": 1011
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 17,
        "mass": 270,
        "clones": 2,
        "snippet": "{\n                    int pos = sqlString.indexOf('\\r', currentPosition + 2);\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\\n', currentPosition + 2);\n                    }\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n                    return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1618,
    "toLine": 1634
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1570,
    "toLine": 1586
}
,]
}
,
{
    "metadata": {
        "cc": 5,
        "volume": 17,
        "mass": 270,
        "clones": 2,
        "snippet": "{\n                    int pos = sqlString.indexOf('\\r', currentPosition + 2);\n                    if (pos == -1) {\n                        pos = sqlString.indexOf('\\n', currentPosition + 2);\n                    }\n                    if (pos == -1) {\n                        pos = limit;\n                    }\n                    token.tokenString = sqlString.substring(currentPosition\n                            + 2, pos);\n                    token.tokenType   = Tokens.X_REMARK;\n                    token.isDelimiter = true;\n                    return;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1618,
    "toLine": 1634
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/Scanner.java",
    "fromLine": 1570,
    "toLine": 1586
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/lib/FileUtil.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 14,
        "volume": 19,
        "mass": 354,
        "clones": 3,
        "snippet": "InputStream fis = null;\n            try {\n                fis = getClass().getResourceAsStream(fileName);\n                if (fis == null) {\n                    ClassLoader cl =\n                        Thread.currentThread().getContextClassLoader();\n                    if (cl != null) {\n                        fis = cl.getResourceAsStream(fileName);\n                    }\n                }\n            } catch (Throwable t) {\n            } finally {\n                if (fis == null) {\n                    throw new FileNotFoundException(fileName);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/FileUtil.java",
    "fromLine": 353,
    "toLine": 371
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFileInJar.java",
    "fromLine": 224,
    "toLine": 242
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/LobStoreInJar.java",
    "fromLine": 123,
    "toLine": 141
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/StatementSession.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 13,
        "volume": 25,
        "mass": 410,
        "clones": 2,
        "snippet": "{\n        Result result;\n        try {\n            result = getResult(session);\n        } catch (Throwable t) {\n            result = Result.newErrorResult(t, null);\n        }\n        if (result.isError()) {\n            result.getException().setStatementType(group, type);\n            return result;\n        }\n        try {\n            if (isLogged) {\n                session.database.logger.writeOtherStatement(session, sql);\n            }\n        } catch (Throwable e) {\n            return Result.newErrorResult(e, sql);\n        }\n        return result;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementCommand.java",
    "fromLine": 212,
    "toLine": 236
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/StatementSession.java",
    "fromLine": 234,
    "toLine": 258
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 7
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 178,
        "clones": 7,
        "snippet": "{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "fromLine": 366,
    "toLine": 370
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 754,
    "toLine": 759
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 949,
    "toLine": 954
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 1708,
    "toLine": 1713
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2573,
    "toLine": 2577
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "fromLine": 953,
    "toLine": 957
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2728,
    "toLine": 2732
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 178,
        "clones": 7,
        "snippet": "{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "fromLine": 366,
    "toLine": 370
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 754,
    "toLine": 759
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 949,
    "toLine": 954
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 1708,
    "toLine": 1713
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2573,
    "toLine": 2577
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "fromLine": 953,
    "toLine": 957
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2728,
    "toLine": 2732
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 178,
        "clones": 7,
        "snippet": "{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "fromLine": 366,
    "toLine": 370
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 754,
    "toLine": 759
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 949,
    "toLine": 954
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 1708,
    "toLine": 1713
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2573,
    "toLine": 2577
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "fromLine": 953,
    "toLine": 957
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2728,
    "toLine": 2732
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 178,
        "clones": 7,
        "snippet": "{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "fromLine": 366,
    "toLine": 370
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 754,
    "toLine": 759
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 949,
    "toLine": 954
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 1708,
    "toLine": 1713
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2573,
    "toLine": 2577
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "fromLine": 953,
    "toLine": 957
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2728,
    "toLine": 2732
}
,]
}
,
{
    "metadata": {
        "cc": 6,
        "volume": 5,
        "mass": 178,
        "clones": 7,
        "snippet": "{\n            if (type.isIntervalType()) {\n                type = ((IntervalType) type).getCharacterType();\n            } else if (type.isDateTimeTypeWithZone()) {\n                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
    "fromLine": 366,
    "toLine": 370
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 754,
    "toLine": 759
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 949,
    "toLine": 954
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 1708,
    "toLine": 1713
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2573,
    "toLine": 2577
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
    "fromLine": 953,
    "toLine": 957
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 2728,
    "toLine": 2732
}
,]
}
,
{
    "metadata": {
        "cc": 14,
        "volume": 71,
        "mass": 1373,
        "clones": 2,
        "snippet": "t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n            return t;\n        }\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n            row = t.getEmptyRowData();\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n            t.insertSys(session, store, row);\n        }\n        return t;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 3241,
    "toLine": 3311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 3136,
    "toLine": 3206
}
,]
}
,
{
    "metadata": {
        "cc": 14,
        "volume": 71,
        "mass": 1373,
        "clones": 2,
        "snippet": "t.createPrimaryKeyConstraint(name, new int[] {\n                0, 1, 2\n            }, false);\n            return t;\n        }\n        final int sequence_catalog           = 0;\n        final int sequence_schema            = 1;\n        final int sequence_name              = 2;\n        final int data_type                  = 3;\n        final int numeric_precision          = 4;\n        final int numeric_precision_radix    = 5;\n        final int numeric_scale              = 6;\n        final int maximum_value              = 7;\n        final int minimum_value              = 8;\n        final int increment                  = 9;\n        final int cycle_option               = 10;\n        final int declared_data_type         = 11;\n        final int declared_numeric_precision = 12;\n        final int declared_numeric_scale     = 13;\n        final int start_with                 = 14;\n        final int next_value                 = 15;\n        Iterator       it;\n        Object[]       row;\n        NumberSequence sequence;\n        it = database.schemaManager.databaseObjectIterator(\n            SchemaObject.SEQUENCE);\n        while (it.hasNext()) {\n            sequence = (NumberSequence) it.next();\n            if (!session.getGrantee().isAccessible(sequence)) {\n                continue;\n            }\n            row = t.getEmptyRowData();\n            NumberType type = (NumberType) sequence.getDataType();\n            int radix =\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\n                    .SQL_DECIMAL) ? 10\n                                  : 2;\n            row[sequence_catalog] = database.getCatalogName().name;\n            row[sequence_schema]  = sequence.getSchemaName().name;\n            row[sequence_name]    = sequence.getName().name;\n            row[data_type]        = sequence.getDataType().getFullNameString();\n            row[numeric_precision] =\n                ValuePool.getInt((int) type.getPrecision());\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\n            row[numeric_scale]              = ValuePool.INTEGER_0;\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\n            row[increment] = String.valueOf(sequence.getIncrement());\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\n                                                                 : \"NO\";\n            row[declared_data_type]         = row[data_type];\n            row[declared_numeric_precision] = row[numeric_precision];\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\n            row[start_with] = String.valueOf(sequence.getStartValue());\n            row[next_value]                 = String.valueOf(sequence.peek());\n            t.insertSys(session, store, row);\n        }\n        return t;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 3241,
    "toLine": 3311
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
    "fromLine": 3136,
    "toLine": 3206
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 4
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 111,
        "clones": 4,
        "snippet": "for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 148,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 155,
    "toLine": 157
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 172,
    "toLine": 174
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 165,
    "toLine": 167
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 111,
        "clones": 4,
        "snippet": "for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 148,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 155,
    "toLine": 157
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 172,
    "toLine": 174
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 165,
    "toLine": 167
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 111,
        "clones": 4,
        "snippet": "for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 148,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 155,
    "toLine": 157
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 172,
    "toLine": 174
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 165,
    "toLine": 167
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 3,
        "mass": 111,
        "clones": 4,
        "snippet": "for (int i = 0; i < addrs.length; i++) {\n                set.add(addrs[i].getHostAddress());\n                set.add(addrs[i].getHostName());\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 148,
    "toLine": 150
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 155,
    "toLine": 157
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 172,
    "toLine": 174
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
    "fromLine": 165,
    "toLine": 167
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/test/TestStressInsert.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 11,
        "mass": 173,
        "clones": 2,
        "snippet": "if (i % 100 == 0) {\n                long t3 = System.currentTimeMillis();\n                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));\n                t2 = t3;\n            }\n        }\n        System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));\n        shutdown();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStressInsert.java",
    "fromLine": 182,
    "toLine": 192
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStressInsert.java",
    "fromLine": 159,
    "toLine": 169
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 11,
        "mass": 173,
        "clones": 2,
        "snippet": "if (i % 100 == 0) {\n                long t3 = System.currentTimeMillis();\n                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));\n                t2 = t3;\n            }\n        }\n        System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));\n        shutdown();\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStressInsert.java",
    "fromLine": 182,
    "toLine": 192
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/test/TestStressInsert.java",
    "fromLine": 159,
    "toLine": 169
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 13
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 171,
    "toLine": 176
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 193,
    "toLine": 198
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 236,
    "toLine": 241
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 262,
    "toLine": 267
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 249,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 171,
    "toLine": 176
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 193,
    "toLine": 198
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 236,
    "toLine": 241
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 262,
    "toLine": 267
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 249,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 171,
    "toLine": 176
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 193,
    "toLine": 198
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 236,
    "toLine": 241
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 262,
    "toLine": 267
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 249,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 171,
    "toLine": 176
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 193,
    "toLine": 198
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 236,
    "toLine": 241
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 262,
    "toLine": 267
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 249,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 171,
    "toLine": 176
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 193,
    "toLine": 198
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 236,
    "toLine": 241
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 262,
    "toLine": 267
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 249,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 138,
        "clones": 6,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.isInMemory()) {\n            row  = (RowAVLDisk) store.get(this.row, false);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 171,
    "toLine": 176
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 193,
    "toLine": 198
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 215,
    "toLine": 220
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 236,
    "toLine": 241
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 262,
    "toLine": 267
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 249,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 5,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 288,
    "toLine": 293
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 320,
    "toLine": 325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 343,
    "toLine": 348
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 420,
    "toLine": 425
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 373,
    "toLine": 378
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 5,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 288,
    "toLine": 293
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 320,
    "toLine": 325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 343,
    "toLine": 348
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 420,
    "toLine": 425
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 373,
    "toLine": 378
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 5,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 288,
    "toLine": 293
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 320,
    "toLine": 325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 343,
    "toLine": 348
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 420,
    "toLine": 425
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 373,
    "toLine": 378
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 5,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 288,
    "toLine": 293
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 320,
    "toLine": 325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 343,
    "toLine": 348
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 420,
    "toLine": 425
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 373,
    "toLine": 378
}
,]
}
,
{
    "metadata": {
        "cc": 2,
        "volume": 6,
        "mass": 140,
        "clones": 5,
        "snippet": "NodeAVLDiskLarge node = this;\n        RowAVLDisk  row  = this.row;\n        if (!row.keepInMemory(true)) {\n            row  = (RowAVLDisk) store.get(this.row, true);\n            node = (NodeAVLDiskLarge) row.getNode(iId);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 288,
    "toLine": 293
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 320,
    "toLine": 325
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 343,
    "toLine": 348
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 420,
    "toLine": 425
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 373,
    "toLine": 378
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 10,
        "mass": 157,
        "clones": 2,
        "snippet": "if (node.iRight == NO_POS) {\n            return null;\n        }\n        if (node.nRight == null || !node.nRight.isInMemory()) {\n            node.nRight         = findNode(store, node.iRight);\n            node.nRight.nParent = node;\n        }\n        return node.nRight;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 201,
    "toLine": 210
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 245,
    "toLine": 254
}
,]
}
,
{
    "metadata": {
        "cc": 4,
        "volume": 10,
        "mass": 157,
        "clones": 2,
        "snippet": "if (node.iLeft == NO_POS) {\n            return null;\n        }\n        if (node.nLeft == null || !node.nLeft.isInMemory()) {\n            node.nLeft         = findNode(store, node.iLeft);\n            node.nLeft.nParent = node;\n        }\n        return node.nLeft;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
    "fromLine": 179,
    "toLine": 188
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
    "fromLine": 223,
    "toLine": 232
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDiskData.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 2
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 1,
        "volume": 9,
        "mass": 154,
        "clones": 2,
        "snippet": "{\n        this.database     = table.database;\n        this.manager      = manager;\n        this.table        = table;\n        this.indexList    = table.getIndexList();\n        this.accessorList = new CachedObject[indexList.length];\n        manager.setStore(table, this);\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLMemory.java",
    "fromLine": 58,
    "toLine": 66
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDiskData.java",
    "fromLine": 64,
    "toLine": 72
}
,]
}
,
{
    "metadata": {
        "cc": 3,
        "volume": 9,
        "mass": 115,
        "clones": 2,
        "snippet": "{\n        int position = key.getPosition();\n        if (position >= accessorList.length) {\n            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");\n        }\n        return accessorList[position];\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVLDiskData.java",
    "fromLine": 181,
    "toLine": 189
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
    "fromLine": 171,
    "toLine": 179
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
{
    "filename": "project://hsqldb/src/org/hsqldb/persist/RAFile.java",
    "metadata": {
        "volume": 0,
        "cloneClassesType1": 1
    },
    "results": {
        "type-1": [
            
{
    "metadata": {
        "cc": 3,
        "volume": 10,
        "mass": 113,
        "clones": 2,
        "snippet": "{\n        long mask    = 0xffffffffffffffffl << scale;\n        long newSize = value & mask;\n        if (newSize != value) {\n            newSize += 1 << scale;\n        }\n        return newSize;\n"
    },
    "edges": [
{
	"loc": "project://hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
    "fromLine": 1674,
    "toLine": 1683
}
,
{
	"loc": "project://hsqldb/src/org/hsqldb/persist/RAFile.java",
    "fromLine": 490,
    "toLine": 499
}
,]
}
,
        ],
        "type-2": [
            
        ]
    }
}
,
		]
	}